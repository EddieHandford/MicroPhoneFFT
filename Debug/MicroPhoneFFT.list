
MicroPhoneFFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007038  08007038  00017038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b0  080074b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  200001e0  0800769c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  0800769c  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e61  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e9  00000000  00000000  0002a06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  0002b958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188ec  00000000  00000000  0002c640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068d3  00000000  00000000  00044f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087d62  00000000  00000000  0004b7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000d35dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007020 	.word	0x08007020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007020 	.word	0x08007020

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000eb8:	b490      	push	{r4, r7}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0b00 	vstr	d0, [r7]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8000eca:	ec44 3b17 	vmov	d7, r3, r4
 8000ece:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed2:	eef0 0a67 	vmov.f32	s1, s15
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc90      	pop	{r4, r7}
 8000edc:	4770      	bx	lr

08000ede <_ZN10arduinoFFTC1Ev>:

*/

#include "arduinoFFT.h"

arduinoFFT::arduinoFFT(void)
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
{ // Constructor
	#warning("This method is deprecated and may be removed on future revisions.")
}
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN10arduinoFFTD1Ev>:
	this->_samples = samples;
	this->_samplingFrequency = samplingFrequency;
	this->_power = Exponent(samples);
}

arduinoFFT::~arduinoFFT(void)
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
{
// Destructor
}
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_ZN10arduinoFFT7ComputeEPdS0_th>:
{
	return(FFT_LIB_REV);
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t dir)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	807b      	strh	r3, [r7, #2]
	#warning("This method is deprecated and may be removed on future revisions.")
	Compute(vReal, vImag, samples, Exponent(samples), dir);
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 ff4f 	bl	8001dc0 <_ZN10arduinoFFT8ExponentEt>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4619      	mov	r1, r3
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	7e3b      	ldrb	r3, [r7, #24]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9100      	str	r1, [sp, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 f805 	bl	8000f44 <_ZN10arduinoFFT7ComputeEPdS0_thh>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <_ZN10arduinoFFT7ComputeEPdS0_thh>:
		}
	}
}

void arduinoFFT::Compute(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{	// Computes in-place complex-to-complex FFT
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b099      	sub	sp, #100	; 0x64
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	807b      	strh	r3, [r7, #2]
	// Reverse bits
	#warning("This method is deprecated and may be removed on future revisions.")
	uint16_t j = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8000f5e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	429a      	cmp	r2, r3
 8000f68:	da49      	bge.n	8000ffe <_ZN10arduinoFFT7ComputeEPdS0_thh+0xba>
		if (i < j) {
 8000f6a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8000f6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d21f      	bcs.n	8000fb6 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x72>
			Swap(&vReal[i], &vReal[j]);
 8000f76:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	18d1      	adds	r1, r2, r3
 8000f80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 ff32 	bl	8001df6 <_ZN10arduinoFFT4SwapEPdS0_>
			if(dir==FFT_REVERSE)
 8000f92:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10d      	bne.n	8000fb6 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x72>
				Swap(&vImag[i], &vImag[j]);
 8000f9a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 ff20 	bl	8001df6 <_ZN10arduinoFFT4SwapEPdS0_>
		}
		uint16_t k = (samples >> 1);
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	105b      	asrs	r3, r3, #1
 8000fba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		while (k <= j) {
 8000fbe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000fc2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d80c      	bhi.n	8000fe4 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xa0>
			j -= k;
 8000fca:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000fce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			k >>= 1;
 8000fd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000fdc:	105b      	asrs	r3, r3, #1
 8000fde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		while (k <= j) {
 8000fe2:	e7ec      	b.n	8000fbe <_ZN10arduinoFFT7ComputeEPdS0_thh+0x7a>
		}
		j += k;
 8000fe4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000fe8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000fec:	4413      	add	r3, r2
 8000fee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8000ff2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8000ffc:	e7af      	b.n	8000f5e <_ZN10arduinoFFT7ComputeEPdS0_thh+0x1a>
	}
	// Compute the FFT
#ifdef __AVR__
	uint8_t index = 0;
#endif
	double c1 = -1.0;
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	4cac      	ldr	r4, [pc, #688]	; (80012b4 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x370>)
 8001004:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double c2 = 0.0;
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	f04f 0400 	mov.w	r4, #0
 8001010:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	uint16_t l2 = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for (uint8_t l = 0; (l < power); l++) {
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001020:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001024:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001028:	429a      	cmp	r2, r3
 800102a:	f080 8147 	bcs.w	80012bc <_ZN10arduinoFFT7ComputeEPdS0_thh+0x378>
		uint16_t l1 = l2;
 800102e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001032:	857b      	strh	r3, [r7, #42]	; 0x2a
		l2 <<= 1;
 8001034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		double u1 = 1.0;
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	4c9d      	ldr	r4, [pc, #628]	; (80012b8 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x374>)
 8001044:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		double u2 = 0.0;
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	f04f 0400 	mov.w	r4, #0
 8001050:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		for (j = 0; j < l1; j++) {
 8001054:	2300      	movs	r3, #0
 8001056:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800105a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800105e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001060:	429a      	cmp	r2, r3
 8001062:	f080 80dc 	bcs.w	800121e <_ZN10arduinoFFT7ComputeEPdS0_thh+0x2da>
			 for (uint16_t i = j; i < samples; i += l2) {
 8001066:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800106a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800106c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	429a      	cmp	r2, r3
 8001072:	f080 8096 	bcs.w	80011a2 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x25e>
					uint16_t i1 = i + l1;
 8001076:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001078:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800107a:	4413      	add	r3, r2
 800107c:	853b      	strh	r3, [r7, #40]	; 0x28
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 800107e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800108e:	f7ff fabb 	bl	8000608 <__aeabi_dmul>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	4625      	mov	r5, r4
 8001098:	461c      	mov	r4, r3
 800109a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010aa:	f7ff faad 	bl	8000608 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff f8ef 	bl	8000298 <__aeabi_dsub>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	e9c7 3408 	strd	r3, r4, [r7, #32]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 80010c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010d2:	f7ff fa99 	bl	8000608 <__aeabi_dmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	460c      	mov	r4, r1
 80010da:	4625      	mov	r5, r4
 80010dc:	461c      	mov	r4, r3
 80010de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010ee:	f7ff fa8b 	bl	8000608 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff f8cf 	bl	800029c <__adddf3>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	e9c7 3406 	strd	r3, r4, [r7, #24]
					vReal[i1] = vReal[i] - t1;
 8001106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	18d5      	adds	r5, r2, r3
 800111a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800111e:	f7ff f8bb 	bl	8000298 <__aeabi_dsub>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	e9c5 3400 	strd	r3, r4, [r5]
					vImag[i1] = vImag[i] - t2;
 800112a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	18d5      	adds	r5, r2, r3
 800113e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001142:	f7ff f8a9 	bl	8000298 <__aeabi_dsub>
 8001146:	4603      	mov	r3, r0
 8001148:	460c      	mov	r4, r1
 800114a:	e9c5 3400 	strd	r3, r4, [r5]
					vReal[i] += t1;
 800114e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	18d5      	adds	r5, r2, r3
 8001162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001166:	f7ff f899 	bl	800029c <__adddf3>
 800116a:	4603      	mov	r3, r0
 800116c:	460c      	mov	r4, r1
 800116e:	e9c5 3400 	strd	r3, r4, [r5]
					vImag[i] += t2;
 8001172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	18d5      	adds	r5, r2, r3
 8001186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800118a:	f7ff f887 	bl	800029c <__adddf3>
 800118e:	4603      	mov	r3, r0
 8001190:	460c      	mov	r4, r1
 8001192:	e9c5 3400 	strd	r3, r4, [r5]
			 for (uint16_t i = j; i < samples; i += l2) {
 8001196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001198:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800119c:	4413      	add	r3, r2
 800119e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80011a0:	e764      	b.n	800106c <_ZN10arduinoFFT7ComputeEPdS0_thh+0x128>
			 }
			 double z = ((u1 * c1) - (u2 * c2));
 80011a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80011a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80011aa:	f7ff fa2d 	bl	8000608 <__aeabi_dmul>
 80011ae:	4603      	mov	r3, r0
 80011b0:	460c      	mov	r4, r1
 80011b2:	4625      	mov	r5, r4
 80011b4:	461c      	mov	r4, r3
 80011b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80011ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011be:	f7ff fa23 	bl	8000608 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff f865 	bl	8000298 <__aeabi_dsub>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
			 u2 = ((u1 * c2) + (u2 * c1));
 80011d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80011da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80011de:	f7ff fa13 	bl	8000608 <__aeabi_dmul>
 80011e2:	4603      	mov	r3, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	4625      	mov	r5, r4
 80011e8:	461c      	mov	r4, r3
 80011ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80011ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011f2:	f7ff fa09 	bl	8000608 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f84d 	bl	800029c <__adddf3>
 8001202:	4603      	mov	r3, r0
 8001204:	460c      	mov	r4, r1
 8001206:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			 u1 = z;
 800120a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800120e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		for (j = 0; j < l1; j++) {
 8001212:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001216:	3301      	adds	r3, #1
 8001218:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800121c:	e71d      	b.n	800105a <_ZN10arduinoFFT7ComputeEPdS0_thh+0x116>
#ifdef __AVR__
		c2 = pgm_read_float_near(&(_c2[index]));
		c1 = pgm_read_float_near(&(_c1[index]));
		index++;
#else
		c2 = sqrt((1.0 - c1) / 2.0);
 800121e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4924      	ldr	r1, [pc, #144]	; (80012b8 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x374>)
 8001228:	f7ff f836 	bl	8000298 <__aeabi_dsub>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	ec44 3b17 	vmov	d7, r3, r4
 8001248:	eeb0 0a47 	vmov.f32	s0, s14
 800124c:	eef0 0a67 	vmov.f32	s1, s15
 8001250:	f002 fd9e 	bl	8003d90 <sqrt>
 8001254:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		c1 = sqrt((1.0 + c1) / 2.0);
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x374>)
 800125e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001262:	f7ff f81b 	bl	800029c <__adddf3>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	4618      	mov	r0, r3
 800126c:	4621      	mov	r1, r4
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	ec44 3b17 	vmov	d7, r3, r4
 8001282:	eeb0 0a47 	vmov.f32	s0, s14
 8001286:	eef0 0a67 	vmov.f32	s1, s15
 800128a:	f002 fd81 	bl	8003d90 <sqrt>
 800128e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
#endif
		if (dir == FFT_FORWARD) {
 8001292:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x362>
			c2 = -c2;
 800129a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800129c:	64bb      	str	r3, [r7, #72]	; 0x48
 800129e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t l = 0; (l < power); l++) {
 80012a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80012aa:	3301      	adds	r3, #1
 80012ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80012b0:	e6b6      	b.n	8001020 <_ZN10arduinoFFT7ComputeEPdS0_thh+0xdc>
 80012b2:	bf00      	nop
 80012b4:	bff00000 	.word	0xbff00000
 80012b8:	3ff00000 	.word	0x3ff00000
		}
	}
	// Scaling for reverse transform
	if (dir != FFT_FORWARD) {
 80012bc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d039      	beq.n	8001338 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x3f4>
		for (uint16_t i = 0; i < samples; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d233      	bcs.n	8001338 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x3f4>
			 vReal[i] /= samples;
 80012d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f928 	bl	8000534 <__aeabi_i2d>
 80012e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	18d6      	adds	r6, r2, r3
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff fab2 	bl	800085c <__aeabi_ddiv>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	e9c6 3400 	strd	r3, r4, [r6]
			 vImag[i] /= samples;
 8001300:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	e9d3 4500 	ldrd	r4, r5, [r3]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	18d6      	adds	r6, r2, r3
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff fa9a 	bl	800085c <__aeabi_ddiv>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	e9c6 3400 	strd	r3, r4, [r6]
		for (uint16_t i = 0; i < samples; i++) {
 8001330:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001332:	3301      	adds	r3, #1
 8001334:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001336:	e7c7      	b.n	80012c8 <_ZN10arduinoFFT7ComputeEPdS0_thh+0x384>
		}
	}
}
 8001338:	bf00      	nop
 800133a:	3764      	adds	r7, #100	; 0x64
 800133c:	46bd      	mov	sp, r7
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001340 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t>:
		this->_vReal[i] = sqrt(sq(this->_vReal[i]) + sq(this->_vImag[i]));
	}
}

void arduinoFFT::ComplexToMagnitude(double *vReal, double *vImag, uint16_t samples)
{	// vM is half the size of vReal and vImag
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	807b      	strh	r3, [r7, #2]
	#warning("This method is deprecated and may be removed on future revisions.")
	for (uint16_t i = 0; i < samples; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	82fb      	strh	r3, [r7, #22]
 8001352:	8afa      	ldrh	r2, [r7, #22]
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	429a      	cmp	r2, r3
 8001358:	d243      	bcs.n	80013e2 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t+0xa2>
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
 800135a:	8afb      	ldrh	r3, [r7, #22]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4413      	add	r3, r2
 8001362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001366:	8afb      	ldrh	r3, [r7, #22]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001372:	461a      	mov	r2, r3
 8001374:	4623      	mov	r3, r4
 8001376:	f7ff f947 	bl	8000608 <__aeabi_dmul>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	461d      	mov	r5, r3
 8001380:	4626      	mov	r6, r4
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138e:	8afb      	ldrh	r3, [r7, #22]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	e9d3 3400 	ldrd	r3, r4, [r3]
 800139a:	461a      	mov	r2, r3
 800139c:	4623      	mov	r3, r4
 800139e:	f7ff f933 	bl	8000608 <__aeabi_dmul>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	4631      	mov	r1, r6
 80013ae:	f7fe ff75 	bl	800029c <__adddf3>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	ec44 3b17 	vmov	d7, r3, r4
 80013ba:	8afb      	ldrh	r3, [r7, #22]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	18d4      	adds	r4, r2, r3
 80013c2:	eeb0 0a47 	vmov.f32	s0, s14
 80013c6:	eef0 0a67 	vmov.f32	s1, s15
 80013ca:	f002 fce1 	bl	8003d90 <sqrt>
 80013ce:	eeb0 7a40 	vmov.f32	s14, s0
 80013d2:	eef0 7a60 	vmov.f32	s15, s1
 80013d6:	ed84 7b00 	vstr	d7, [r4]
	for (uint16_t i = 0; i < samples; i++) {
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	3301      	adds	r3, #1
 80013de:	82fb      	strh	r3, [r7, #22]
 80013e0:	e7b7      	b.n	8001352 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t+0x12>
	}
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ea:	0000      	movs	r0, r0
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <_ZN10arduinoFFT9WindowingEPdthh>:
	}
}


void arduinoFFT::Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
 80013f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013f4:	b08e      	sub	sp, #56	; 0x38
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	4611      	mov	r1, r2
 80013fe:	461a      	mov	r2, r3
 8001400:	460b      	mov	r3, r1
 8001402:	80fb      	strh	r3, [r7, #6]
 8001404:	4613      	mov	r3, r2
 8001406:	717b      	strb	r3, [r7, #5]
// The weighing function is symetric; half the weighs are recorded
	#warning("This method is deprecated and may be removed on future revisions.")
	double samplesMinusOne = (double(samples) - 1.0);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f882 	bl	8000514 <__aeabi_ui2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4bac      	ldr	r3, [pc, #688]	; (80016c8 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
 8001416:	f7fe ff3f 	bl	8000298 <__aeabi_dsub>
 800141a:	4603      	mov	r3, r0
 800141c:	460c      	mov	r4, r1
 800141e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001426:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	105b      	asrs	r3, r3, #1
 800142c:	429a      	cmp	r2, r3
 800142e:	f280 836c 	bge.w	8001b0a <_ZN10arduinoFFT9WindowingEPdthh+0x71a>
		double indexMinusOne = double(i);
 8001432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f86d 	bl	8000514 <__aeabi_ui2d>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	e9c7 3406 	strd	r3, r4, [r7, #24]
		double ratio = (indexMinusOne / samplesMinusOne);
 8001442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001446:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144a:	f7ff fa07 	bl	800085c <__aeabi_ddiv>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	e9c7 3404 	strd	r3, r4, [r7, #16]
		double weighingFactor = 1.0;
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	4c9b      	ldr	r4, [pc, #620]	; (80016c8 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
 800145c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		// Compute and record weighting factor
		switch (windowType) {
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b09      	cmp	r3, #9
 8001464:	f200 82f4 	bhi.w	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
 8001468:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <_ZN10arduinoFFT9WindowingEPdthh+0x80>)
 800146a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146e:	bf00      	nop
 8001470:	08001499 	.word	0x08001499
 8001474:	080014a5 	.word	0x080014a5
 8001478:	080014f1 	.word	0x080014f1
 800147c:	08001541 	.word	0x08001541
 8001480:	080015ad 	.word	0x080015ad
 8001484:	080016cd 	.word	0x080016cd
 8001488:	08001765 	.word	0x08001765
 800148c:	08001839 	.word	0x08001839
 8001490:	0800190d 	.word	0x0800190d
 8001494:	0800199d 	.word	0x0800199d
		case FFT_WIN_TYP_RECTANGLE: // rectangle (box car)
			weighingFactor = 1.0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	4c8a      	ldr	r4, [pc, #552]	; (80016c8 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
 800149e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 80014a2:	e2d5      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_HAMMING: // hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 80014a4:	a376      	add	r3, pc, #472	; (adr r3, 8001680 <_ZN10arduinoFFT9WindowingEPdthh+0x290>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ae:	f7ff f8ab 	bl	8000608 <__aeabi_dmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	ec44 3b17 	vmov	d7, r3, r4
 80014ba:	eeb0 0a47 	vmov.f32	s0, s14
 80014be:	eef0 0a67 	vmov.f32	s1, s15
 80014c2:	f002 fbd9 	bl	8003c78 <cos>
 80014c6:	ec51 0b10 	vmov	r0, r1, d0
 80014ca:	a36f      	add	r3, pc, #444	; (adr r3, 8001688 <_ZN10arduinoFFT9WindowingEPdthh+0x298>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f89a 	bl	8000608 <__aeabi_dmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	461a      	mov	r2, r3
 80014da:	4623      	mov	r3, r4
 80014dc:	a16c      	add	r1, pc, #432	; (adr r1, 8001690 <_ZN10arduinoFFT9WindowingEPdthh+0x2a0>)
 80014de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e2:	f7fe fed9 	bl	8000298 <__aeabi_dsub>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 80014ee:	e2af      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_HANN: // hann
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
 80014f0:	a363      	add	r3, pc, #396	; (adr r3, 8001680 <_ZN10arduinoFFT9WindowingEPdthh+0x290>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fa:	f7ff f885 	bl	8000608 <__aeabi_dmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	ec44 3b17 	vmov	d7, r3, r4
 8001506:	eeb0 0a47 	vmov.f32	s0, s14
 800150a:	eef0 0a67 	vmov.f32	s1, s15
 800150e:	f002 fbb3 	bl	8003c78 <cos>
 8001512:	ec54 3b10 	vmov	r3, r4, d0
 8001516:	461a      	mov	r2, r3
 8001518:	4623      	mov	r3, r4
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	496a      	ldr	r1, [pc, #424]	; (80016c8 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
 8001520:	f7fe feba 	bl	8000298 <__aeabi_dsub>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4618      	mov	r0, r3
 800152a:	4621      	mov	r1, r4
 800152c:	a358      	add	r3, pc, #352	; (adr r3, 8001690 <_ZN10arduinoFFT9WindowingEPdthh+0x2a0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f869 	bl	8000608 <__aeabi_dmul>
 8001536:	4603      	mov	r3, r0
 8001538:	460c      	mov	r4, r1
 800153a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 800153e:	e287      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_TRIANGLE: // triangle (Bartlett)
			#if defined(ESP8266) || defined(ESP32)
			weighingFactor = 1.0 - ((2.0 * fabs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
			#else
			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800154c:	f7ff f986 	bl	800085c <__aeabi_ddiv>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	461a      	mov	r2, r3
 8001556:	4623      	mov	r3, r4
 8001558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800155c:	f7fe fe9c 	bl	8000298 <__aeabi_dsub>
 8001560:	4603      	mov	r3, r0
 8001562:	460c      	mov	r4, r1
 8001564:	ec44 3b17 	vmov	d7, r3, r4
 8001568:	eeb0 0a47 	vmov.f32	s0, s14
 800156c:	eef0 0a67 	vmov.f32	s1, s15
 8001570:	f7ff fca2 	bl	8000eb8 <_ZSt3absd>
 8001574:	ec51 0b10 	vmov	r0, r1, d0
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	f7fe fe8e 	bl	800029c <__adddf3>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	4618      	mov	r0, r3
 8001586:	4621      	mov	r1, r4
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	f7ff f966 	bl	800085c <__aeabi_ddiv>
 8001590:	4603      	mov	r3, r0
 8001592:	460c      	mov	r4, r1
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	f04f 0000 	mov.w	r0, #0
 800159c:	494a      	ldr	r1, [pc, #296]	; (80016c8 <_ZN10arduinoFFT9WindowingEPdthh+0x2d8>)
 800159e:	f7fe fe7b 	bl	8000298 <__aeabi_dsub>
 80015a2:	4603      	mov	r3, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			#endif
			break;
 80015aa:	e251      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_NUTTALL: // nuttall
			weighingFactor = 0.355768 - (0.487396 * (cos(twoPi * ratio))) + (0.144232 * (cos(fourPi * ratio))) - (0.012604 * (cos(sixPi * ratio)));
 80015ac:	a334      	add	r3, pc, #208	; (adr r3, 8001680 <_ZN10arduinoFFT9WindowingEPdthh+0x290>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b6:	f7ff f827 	bl	8000608 <__aeabi_dmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	ec44 3b17 	vmov	d7, r3, r4
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	f002 fb55 	bl	8003c78 <cos>
 80015ce:	ec51 0b10 	vmov	r0, r1, d0
 80015d2:	a331      	add	r3, pc, #196	; (adr r3, 8001698 <_ZN10arduinoFFT9WindowingEPdthh+0x2a8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f816 	bl	8000608 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	a12e      	add	r1, pc, #184	; (adr r1, 80016a0 <_ZN10arduinoFFT9WindowingEPdthh+0x2b0>)
 80015e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ea:	f7fe fe55 	bl	8000298 <__aeabi_dsub>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4625      	mov	r5, r4
 80015f4:	461c      	mov	r4, r3
 80015f6:	a32c      	add	r3, pc, #176	; (adr r3, 80016a8 <_ZN10arduinoFFT9WindowingEPdthh+0x2b8>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001600:	f7ff f802 	bl	8000608 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	ec43 2b17 	vmov	d7, r2, r3
 800160c:	eeb0 0a47 	vmov.f32	s0, s14
 8001610:	eef0 0a67 	vmov.f32	s1, s15
 8001614:	f002 fb30 	bl	8003c78 <cos>
 8001618:	ec51 0b10 	vmov	r0, r1, d0
 800161c:	a324      	add	r3, pc, #144	; (adr r3, 80016b0 <_ZN10arduinoFFT9WindowingEPdthh+0x2c0>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe fff1 	bl	8000608 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe fe35 	bl	800029c <__adddf3>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4625      	mov	r5, r4
 8001638:	461c      	mov	r4, r3
 800163a:	a31f      	add	r3, pc, #124	; (adr r3, 80016b8 <_ZN10arduinoFFT9WindowingEPdthh+0x2c8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001644:	f7fe ffe0 	bl	8000608 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	ec43 2b17 	vmov	d7, r2, r3
 8001650:	eeb0 0a47 	vmov.f32	s0, s14
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	f002 fb0e 	bl	8003c78 <cos>
 800165c:	ec51 0b10 	vmov	r0, r1, d0
 8001660:	a317      	add	r3, pc, #92	; (adr r3, 80016c0 <_ZN10arduinoFFT9WindowingEPdthh+0x2d0>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffcf 	bl	8000608 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe11 	bl	8000298 <__aeabi_dsub>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 800167e:	e1e7      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
 8001680:	5474a168 	.word	0x5474a168
 8001684:	401921fb 	.word	0x401921fb
 8001688:	d70a3d71 	.word	0xd70a3d71
 800168c:	3fdd70a3 	.word	0x3fdd70a3
 8001690:	147ae148 	.word	0x147ae148
 8001694:	3fe147ae 	.word	0x3fe147ae
 8001698:	fe0ce0b9 	.word	0xfe0ce0b9
 800169c:	3fdf317e 	.word	0x3fdf317e
 80016a0:	253da72a 	.word	0x253da72a
 80016a4:	3fd6c4e7 	.word	0x3fd6c4e7
 80016a8:	541ebb2c 	.word	0x541ebb2c
 80016ac:	402921fb 	.word	0x402921fb
 80016b0:	b584b1ab 	.word	0xb584b1ab
 80016b4:	3fc27631 	.word	0x3fc27631
 80016b8:	7f57790e 	.word	0x7f57790e
 80016bc:	4032d97c 	.word	0x4032d97c
 80016c0:	3e63e8de 	.word	0x3e63e8de
 80016c4:	3f89d020 	.word	0x3f89d020
 80016c8:	3ff00000 	.word	0x3ff00000
		case FFT_WIN_TYP_BLACKMAN: // blackman
			weighingFactor = 0.42323 - (0.49755 * (cos(twoPi * ratio))) + (0.07922 * (cos(fourPi * ratio)));
 80016cc:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d8:	f7fe ff96 	bl	8000608 <__aeabi_dmul>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	ec44 3b17 	vmov	d7, r3, r4
 80016e4:	eeb0 0a47 	vmov.f32	s0, s14
 80016e8:	eef0 0a67 	vmov.f32	s1, s15
 80016ec:	f002 fac4 	bl	8003c78 <cos>
 80016f0:	ec51 0b10 	vmov	r0, r1, d0
 80016f4:	f20f 432c 	addw	r3, pc, #1068	; 0x42c
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe ff84 	bl	8000608 <__aeabi_dmul>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	f20f 4120 	addw	r1, pc, #1056	; 0x420
 800170c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001710:	f7fe fdc2 	bl	8000298 <__aeabi_dsub>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4625      	mov	r5, r4
 800171a:	461c      	mov	r4, r3
 800171c:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001728:	f7fe ff6e 	bl	8000608 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b17 	vmov	d7, r2, r3
 8001734:	eeb0 0a47 	vmov.f32	s0, s14
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	f002 fa9c 	bl	8003c78 <cos>
 8001740:	ec51 0b10 	vmov	r0, r1, d0
 8001744:	a3fd      	add	r3, pc, #1012	; (adr r3, 8001b3c <_ZN10arduinoFFT9WindowingEPdthh+0x74c>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff5d 	bl	8000608 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fda1 	bl	800029c <__adddf3>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 8001762:	e175      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_BLACKMAN_NUTTALL: // blackman nuttall
			weighingFactor = 0.3635819 - (0.4891775 * (cos(twoPi * ratio))) + (0.1365995 * (cos(fourPi * ratio))) - (0.0106411 * (cos(sixPi * ratio)));
 8001764:	a3ed      	add	r3, pc, #948	; (adr r3, 8001b1c <_ZN10arduinoFFT9WindowingEPdthh+0x72c>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800176e:	f7fe ff4b 	bl	8000608 <__aeabi_dmul>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	ec44 3b17 	vmov	d7, r3, r4
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f002 fa79 	bl	8003c78 <cos>
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	a3ee      	add	r3, pc, #952	; (adr r3, 8001b44 <_ZN10arduinoFFT9WindowingEPdthh+0x754>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff3a 	bl	8000608 <__aeabi_dmul>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	a1eb      	add	r1, pc, #940	; (adr r1, 8001b4c <_ZN10arduinoFFT9WindowingEPdthh+0x75c>)
 800179e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a2:	f7fe fd79 	bl	8000298 <__aeabi_dsub>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	4625      	mov	r5, r4
 80017ac:	461c      	mov	r4, r3
 80017ae:	a3e1      	add	r3, pc, #900	; (adr r3, 8001b34 <_ZN10arduinoFFT9WindowingEPdthh+0x744>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b8:	f7fe ff26 	bl	8000608 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	ec43 2b17 	vmov	d7, r2, r3
 80017c4:	eeb0 0a47 	vmov.f32	s0, s14
 80017c8:	eef0 0a67 	vmov.f32	s1, s15
 80017cc:	f002 fa54 	bl	8003c78 <cos>
 80017d0:	ec51 0b10 	vmov	r0, r1, d0
 80017d4:	a3df      	add	r3, pc, #892	; (adr r3, 8001b54 <_ZN10arduinoFFT9WindowingEPdthh+0x764>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff15 	bl	8000608 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fd59 	bl	800029c <__adddf3>
 80017ea:	4603      	mov	r3, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	4625      	mov	r5, r4
 80017f0:	461c      	mov	r4, r3
 80017f2:	a3da      	add	r3, pc, #872	; (adr r3, 8001b5c <_ZN10arduinoFFT9WindowingEPdthh+0x76c>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fc:	f7fe ff04 	bl	8000608 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	ec43 2b17 	vmov	d7, r2, r3
 8001808:	eeb0 0a47 	vmov.f32	s0, s14
 800180c:	eef0 0a67 	vmov.f32	s1, s15
 8001810:	f002 fa32 	bl	8003c78 <cos>
 8001814:	ec51 0b10 	vmov	r0, r1, d0
 8001818:	a3d2      	add	r3, pc, #840	; (adr r3, 8001b64 <_ZN10arduinoFFT9WindowingEPdthh+0x774>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe fef3 	bl	8000608 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fd35 	bl	8000298 <__aeabi_dsub>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 8001836:	e10b      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_BLACKMAN_HARRIS: // blackman harris
			weighingFactor = 0.35875 - (0.48829 * (cos(twoPi * ratio))) + (0.14128 * (cos(fourPi * ratio))) - (0.01168 * (cos(sixPi * ratio)));
 8001838:	a3b8      	add	r3, pc, #736	; (adr r3, 8001b1c <_ZN10arduinoFFT9WindowingEPdthh+0x72c>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001842:	f7fe fee1 	bl	8000608 <__aeabi_dmul>
 8001846:	4603      	mov	r3, r0
 8001848:	460c      	mov	r4, r1
 800184a:	ec44 3b17 	vmov	d7, r3, r4
 800184e:	eeb0 0a47 	vmov.f32	s0, s14
 8001852:	eef0 0a67 	vmov.f32	s1, s15
 8001856:	f002 fa0f 	bl	8003c78 <cos>
 800185a:	ec51 0b10 	vmov	r0, r1, d0
 800185e:	a3c3      	add	r3, pc, #780	; (adr r3, 8001b6c <_ZN10arduinoFFT9WindowingEPdthh+0x77c>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fed0 	bl	8000608 <__aeabi_dmul>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	a1c0      	add	r1, pc, #768	; (adr r1, 8001b74 <_ZN10arduinoFFT9WindowingEPdthh+0x784>)
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001876:	f7fe fd0f 	bl	8000298 <__aeabi_dsub>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	4625      	mov	r5, r4
 8001880:	461c      	mov	r4, r3
 8001882:	a3ac      	add	r3, pc, #688	; (adr r3, 8001b34 <_ZN10arduinoFFT9WindowingEPdthh+0x744>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800188c:	f7fe febc 	bl	8000608 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ec43 2b17 	vmov	d7, r2, r3
 8001898:	eeb0 0a47 	vmov.f32	s0, s14
 800189c:	eef0 0a67 	vmov.f32	s1, s15
 80018a0:	f002 f9ea 	bl	8003c78 <cos>
 80018a4:	ec51 0b10 	vmov	r0, r1, d0
 80018a8:	a3b4      	add	r3, pc, #720	; (adr r3, 8001b7c <_ZN10arduinoFFT9WindowingEPdthh+0x78c>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe feab 	bl	8000608 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fcef 	bl	800029c <__adddf3>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	4625      	mov	r5, r4
 80018c4:	461c      	mov	r4, r3
 80018c6:	a3a5      	add	r3, pc, #660	; (adr r3, 8001b5c <_ZN10arduinoFFT9WindowingEPdthh+0x76c>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d0:	f7fe fe9a 	bl	8000608 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b17 	vmov	d7, r2, r3
 80018dc:	eeb0 0a47 	vmov.f32	s0, s14
 80018e0:	eef0 0a67 	vmov.f32	s1, s15
 80018e4:	f002 f9c8 	bl	8003c78 <cos>
 80018e8:	ec51 0b10 	vmov	r0, r1, d0
 80018ec:	a3a5      	add	r3, pc, #660	; (adr r3, 8001b84 <_ZN10arduinoFFT9WindowingEPdthh+0x794>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe89 	bl	8000608 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe fccb 	bl	8000298 <__aeabi_dsub>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 800190a:	e0a1      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_FLT_TOP: // flat top
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
 800190c:	a383      	add	r3, pc, #524	; (adr r3, 8001b1c <_ZN10arduinoFFT9WindowingEPdthh+0x72c>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001916:	f7fe fe77 	bl	8000608 <__aeabi_dmul>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	ec44 3b17 	vmov	d7, r3, r4
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	eef0 0a67 	vmov.f32	s1, s15
 800192a:	f002 f9a5 	bl	8003c78 <cos>
 800192e:	ec51 0b10 	vmov	r0, r1, d0
 8001932:	a396      	add	r3, pc, #600	; (adr r3, 8001b8c <_ZN10arduinoFFT9WindowingEPdthh+0x79c>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe66 	bl	8000608 <__aeabi_dmul>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	a193      	add	r1, pc, #588	; (adr r1, 8001b94 <_ZN10arduinoFFT9WindowingEPdthh+0x7a4>)
 8001946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800194a:	f7fe fca5 	bl	8000298 <__aeabi_dsub>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4625      	mov	r5, r4
 8001954:	461c      	mov	r4, r3
 8001956:	a377      	add	r3, pc, #476	; (adr r3, 8001b34 <_ZN10arduinoFFT9WindowingEPdthh+0x744>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001960:	f7fe fe52 	bl	8000608 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	ec43 2b17 	vmov	d7, r2, r3
 800196c:	eeb0 0a47 	vmov.f32	s0, s14
 8001970:	eef0 0a67 	vmov.f32	s1, s15
 8001974:	f002 f980 	bl	8003c78 <cos>
 8001978:	ec51 0b10 	vmov	r0, r1, d0
 800197c:	a387      	add	r3, pc, #540	; (adr r3, 8001b9c <_ZN10arduinoFFT9WindowingEPdthh+0x7ac>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fe41 	bl	8000608 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7fe fc85 	bl	800029c <__adddf3>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 800199a:	e059      	b.n	8001a50 <_ZN10arduinoFFT9WindowingEPdthh+0x660>
		case FFT_WIN_TYP_WELCH: // welch
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019a8:	f7fe ff58 	bl	800085c <__aeabi_ddiv>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019b8:	f7fe fc6e 	bl	8000298 <__aeabi_dsub>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4625      	mov	r5, r4
 80019c2:	461c      	mov	r4, r3
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019d0:	f7fe ff44 	bl	800085c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe ff3e 	bl	800085c <__aeabi_ddiv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4625      	mov	r5, r4
 80019e6:	461c      	mov	r4, r3
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019f4:	f7fe ff32 	bl	800085c <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a00:	f7fe fc4a 	bl	8000298 <__aeabi_dsub>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4690      	mov	r8, r2
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a18:	f7fe ff20 	bl	800085c <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4640      	mov	r0, r8
 8001a22:	4649      	mov	r1, r9
 8001a24:	f7fe ff1a 	bl	800085c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fdea 	bl	8000608 <__aeabi_dmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	4935      	ldr	r1, [pc, #212]	; (8001b18 <_ZN10arduinoFFT9WindowingEPdthh+0x728>)
 8001a42:	f7fe fc29 	bl	8000298 <__aeabi_dsub>
 8001a46:	4603      	mov	r3, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			break;
 8001a4e:	bf00      	nop
		}
		if (dir == FFT_FORWARD) {
 8001a50:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d12a      	bne.n	8001aae <_ZN10arduinoFFT9WindowingEPdthh+0x6be>
			vData[i] *= weighingFactor;
 8001a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	18d5      	adds	r5, r2, r3
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a70:	f7fe fdca 	bl	8000608 <__aeabi_dmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	e9c5 3400 	strd	r3, r4, [r5]
			vData[samples - (i + 1)] *= weighingFactor;
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a80:	3301      	adds	r3, #1
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a92:	3301      	adds	r3, #1
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	18d5      	adds	r5, r2, r3
 8001a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	e9c5 3400 	strd	r3, r4, [r5]
 8001aac:	e029      	b.n	8001b02 <_ZN10arduinoFFT9WindowingEPdthh+0x712>
		}
		else {
			vData[i] /= weighingFactor;
 8001aae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	18d5      	adds	r5, r2, r3
 8001ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac6:	f7fe fec9 	bl	800085c <__aeabi_ddiv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	e9c5 3400 	strd	r3, r4, [r5]
			vData[samples - (i + 1)] /= weighingFactor;
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	4413      	add	r3, r2
 8001ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ae8:	3301      	adds	r3, #1
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	18d5      	adds	r5, r2, r3
 8001af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af6:	f7fe feb1 	bl	800085c <__aeabi_ddiv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	e9c5 3400 	strd	r3, r4, [r5]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8001b02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b04:	3301      	adds	r3, #1
 8001b06:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001b08:	e48d      	b.n	8001426 <_ZN10arduinoFFT9WindowingEPdthh+0x36>
		}
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3738      	adds	r7, #56	; 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b14:	f3af 8000 	nop.w
 8001b18:	3ff00000 	.word	0x3ff00000
 8001b1c:	5474a168 	.word	0x5474a168
 8001b20:	401921fb 	.word	0x401921fb
 8001b24:	f487fcb9 	.word	0xf487fcb9
 8001b28:	3fdfd7db 	.word	0x3fdfd7db
 8001b2c:	482be8bc 	.word	0x482be8bc
 8001b30:	3fdb1633 	.word	0x3fdb1633
 8001b34:	541ebb2c 	.word	0x541ebb2c
 8001b38:	402921fb 	.word	0x402921fb
 8001b3c:	0d306a2b 	.word	0x0d306a2b
 8001b40:	3fb447c3 	.word	0x3fb447c3
 8001b44:	251c193b 	.word	0x251c193b
 8001b48:	3fdf4eaf 	.word	0x3fdf4eaf
 8001b4c:	047ab904 	.word	0x047ab904
 8001b50:	3fd744ed 	.word	0x3fd744ed
 8001b54:	a89331a1 	.word	0xa89331a1
 8001b58:	3fc17c17 	.word	0x3fc17c17
 8001b5c:	7f57790e 	.word	0x7f57790e
 8001b60:	4032d97c 	.word	0x4032d97c
 8001b64:	43f29e18 	.word	0x43f29e18
 8001b68:	3f85cb00 	.word	0x3f85cb00
 8001b6c:	b33daf8e 	.word	0xb33daf8e
 8001b70:	3fdf4024 	.word	0x3fdf4024
 8001b74:	8f5c28f6 	.word	0x8f5c28f6
 8001b78:	3fd6f5c2 	.word	0x3fd6f5c2
 8001b7c:	89ca18bd 	.word	0x89ca18bd
 8001b80:	3fc21576 	.word	0x3fc21576
 8001b84:	102363b2 	.word	0x102363b2
 8001b88:	3f87ebaf 	.word	0x3f87ebaf
 8001b8c:	9ad27ebd 	.word	0x9ad27ebd
 8001b90:	3fe0ab30 	.word	0x3fe0ab30
 8001b94:	70a58489 	.word	0x70a58489
 8001b98:	3fd1fcf3 	.word	0x3fd1fcf3
 8001b9c:	16e6cc52 	.word	0x16e6cc52
 8001ba0:	3fc9595f 	.word	0x3fc9595f

08001ba4 <_ZN10arduinoFFT9MajorPeakEPdtd>:
	*v = abs(this->_vReal[IndexOfMaxY - 1] - (2.0 * this->_vReal[IndexOfMaxY]) + this->_vReal[IndexOfMaxY + 1]);
	#endif
}

double arduinoFFT::MajorPeak(double *vD, uint16_t samples, double samplingFrequency)
{
 8001ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba8:	b08e      	sub	sp, #56	; 0x38
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6178      	str	r0, [r7, #20]
 8001bae:	6139      	str	r1, [r7, #16]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	ed87 0b00 	vstr	d0, [r7]
 8001bb6:	81fb      	strh	r3, [r7, #14]
	#warning("This method is deprecated and may be removed on future revisions.")
	double maxY = 0;
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	f04f 0400 	mov.w	r4, #0
 8001bc0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	uint16_t IndexOfMaxY = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	//If sampling_frequency = 2 * max_frequency in signal,
	//value would be stored at position samples/2
	for (uint16_t i = 1; i < ((samples >> 1) + 1); i++) {
 8001bc8:	2301      	movs	r3, #1
 8001bca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001bcc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	105b      	asrs	r3, r3, #1
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	da46      	bge.n	8001c66 <_ZN10arduinoFFT9MajorPeakEPdtd+0xc2>
		if ((vD[i-1] < vD[i]) && (vD[i] > vD[i+1])) {
 8001bd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001bde:	3b01      	subs	r3, #1
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f7fe ff77 	bl	8000aec <__aeabi_dcmplt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02c      	beq.n	8001c5e <_ZN10arduinoFFT9MajorPeakEPdtd+0xba>
 8001c04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c12:	3301      	adds	r3, #1
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	f7fe ff81 	bl	8000b28 <__aeabi_dcmpgt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d018      	beq.n	8001c5e <_ZN10arduinoFFT9MajorPeakEPdtd+0xba>
			if (vD[i] > maxY) {
 8001c2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c40:	f7fe ff54 	bl	8000aec <__aeabi_dcmplt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <_ZN10arduinoFFT9MajorPeakEPdtd+0xba>
				maxY = vD[i];
 8001c4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c56:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
				IndexOfMaxY = i;
 8001c5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t i = 1; i < ((samples >> 1) + 1); i++) {
 8001c5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c60:	3301      	adds	r3, #1
 8001c62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001c64:	e7b2      	b.n	8001bcc <_ZN10arduinoFFT9MajorPeakEPdtd+0x28>
			}
		}
	}
	double delta = 0.5 * ((vD[IndexOfMaxY-1] - vD[IndexOfMaxY+1]) / (vD[IndexOfMaxY-1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY+1]));
 8001c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4623      	mov	r3, r4
 8001c8a:	f7fe fb05 	bl	8000298 <__aeabi_dsub>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	4698      	mov	r8, r3
 8001c94:	46a1      	mov	r9, r4
 8001c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ca8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	f7fe faf0 	bl	800029c <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fae8 	bl	8000298 <__aeabi_dsub>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4621      	mov	r1, r4
 8001cd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f7fe fadb 	bl	800029c <__adddf3>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	461a      	mov	r2, r3
 8001cec:	4623      	mov	r3, r4
 8001cee:	4640      	mov	r0, r8
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	f7fe fdb3 	bl	800085c <__aeabi_ddiv>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <_ZN10arduinoFFT9MajorPeakEPdtd+0x218>)
 8001d04:	f7fe fc80 	bl	8000608 <__aeabi_dmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples-1);
 8001d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc0e 	bl	8000534 <__aeabi_i2d>
 8001d18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d1c:	f7fe fabe 	bl	800029c <__adddf3>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d2c:	f7fe fc6c 	bl	8000608 <__aeabi_dmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4625      	mov	r5, r4
 8001d36:	461c      	mov	r4, r3
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbf9 	bl	8000534 <__aeabi_i2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f7fe fd87 	bl	800085c <__aeabi_ddiv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	e9c7 3406 	strd	r3, r4, [r7, #24]
	if(IndexOfMaxY==(samples >> 1)) //To improve calculation on edge values
 8001d56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	105b      	asrs	r3, r3, #1
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d121      	bne.n	8001da4 <_ZN10arduinoFFT9MajorPeakEPdtd+0x200>
		interpolatedX = ((IndexOfMaxY + delta)  * samplingFrequency) / (samples);
 8001d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbe6 	bl	8000534 <__aeabi_i2d>
 8001d68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d6c:	f7fe fa96 	bl	800029c <__adddf3>
 8001d70:	4603      	mov	r3, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	4618      	mov	r0, r3
 8001d76:	4621      	mov	r1, r4
 8001d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d7c:	f7fe fc44 	bl	8000608 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	89fb      	ldrh	r3, [r7, #14]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbd2 	bl	8000534 <__aeabi_i2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fd60 	bl	800085c <__aeabi_ddiv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	// returned value: interpolated frequency peak apex
	return(interpolatedX);
 8001da4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001da8:	ec44 3b17 	vmov	d7, r3, r4
}
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	eef0 0a67 	vmov.f32	s1, s15
 8001db4:	3738      	adds	r7, #56	; 0x38
 8001db6:	46bd      	mov	sp, r7
 8001db8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dbc:	3fe00000 	.word	0x3fe00000

08001dc0 <_ZN10arduinoFFT8ExponentEt>:
	*v = abs(vD[IndexOfMaxY - 1] - (2.0 * vD[IndexOfMaxY]) + vD[IndexOfMaxY + 1]);
	#endif
}

uint8_t arduinoFFT::Exponent(uint16_t value)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
	#warning("This method may not be accessible on future revisions.")
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
	while (((value >> result) & 1) != 1) result++;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	4113      	asrs	r3, r2
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <_ZN10arduinoFFT8ExponentEt+0x28>
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e7f3      	b.n	8001dd0 <_ZN10arduinoFFT8ExponentEt+0x10>
	return(result);
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_ZN10arduinoFFT4SwapEPdS0_>:

// Private functions

void arduinoFFT::Swap(double *x, double *y)
{
 8001df6:	b490      	push	{r4, r7}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
	double temp = *x;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e08:	e9c7 3404 	strd	r3, r4, [r7, #16]
	*x = *y;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	e9c2 3400 	strd	r3, r4, [r2]
	*y = temp;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e1e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc90      	pop	{r4, r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	0000      	movs	r0, r0
	...

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e36:	f000 fb1b 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3a:	f000 f8b7 	bl	8001fac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3e:	f000 f959 	bl	80020f4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001e42:	f000 f929 	bl	8002098 <_ZL19MX_USART2_UART_Initv>
    /* USER CODE BEGIN 3 */
	//  uart_buf_len = sprintf(uart_buf , "Timer test\r\n");
	//  HAL_UART_Transmit(&huart2 , (uint8_t * )uart_buf, uart_buf_len, 100);


	  double cycles = (((samples-1) * signalFrequency) / samplingFrequency); //Number of signal cycles that the sampling will read
 8001e46:	a455      	add	r4, pc, #340	; (adr r4, 8001f9c <main+0x16c>)
 8001e48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e4c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  for (uint16_t i = 0; i < samples; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	82fb      	strh	r3, [r7, #22]
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	2b7f      	cmp	r3, #127	; 0x7f
 8001e58:	d857      	bhi.n	8001f0a <main+0xda>
	  {
	    vReal[i] = int8_t((amplitude * (sin((i * (twoPi * cycles)) / samples))) / 2.0);
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb69 	bl	8000534 <__aeabi_i2d>
 8001e62:	4604      	mov	r4, r0
 8001e64:	460d      	mov	r5, r1
 8001e66:	a34f      	add	r3, pc, #316	; (adr r3, 8001fa4 <main+0x174>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e70:	f7fe fbca 	bl	8000608 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4620      	mov	r0, r4
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f7fe fbc4 	bl	8000608 <__aeabi_dmul>
 8001e80:	4603      	mov	r3, r0
 8001e82:	460c      	mov	r4, r1
 8001e84:	4618      	mov	r0, r3
 8001e86:	4621      	mov	r1, r4
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <main+0x148>)
 8001e8e:	f7fe fce5 	bl	800085c <__aeabi_ddiv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	ec44 3b17 	vmov	d7, r3, r4
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	f001 ff2d 	bl	8003d00 <sin>
 8001ea6:	ec51 0b10 	vmov	r0, r1, d0
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <main+0x14c>)
 8001eb0:	f7fe fbaa 	bl	8000608 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4621      	mov	r1, r4
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec4:	f7fe fcca 	bl	800085c <__aeabi_ddiv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	4621      	mov	r1, r4
 8001ed0:	f7fe fe4a 	bl	8000b68 <__aeabi_d2iz>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	8afd      	ldrh	r5, [r7, #22]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb2a 	bl	8000534 <__aeabi_i2d>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4926      	ldr	r1, [pc, #152]	; (8001f80 <main+0x150>)
 8001ee6:	00ea      	lsls	r2, r5, #3
 8001ee8:	440a      	add	r2, r1
 8001eea:	e9c2 3400 	strd	r3, r4, [r2]
	    vImag[i] = 0.0; //Imaginary part must be zeroed in case of looping to avoid wrong calculations and overflows
 8001eee:	8afb      	ldrh	r3, [r7, #22]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <main+0x154>)
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	441a      	add	r2, r3
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	e9c2 3400 	strd	r3, r4, [r2]
	  for (uint16_t i = 0; i < samples; i++)
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	3301      	adds	r3, #1
 8001f06:	82fb      	strh	r3, [r7, #22]
 8001f08:	e7a4      	b.n	8001e54 <main+0x24>
	  }




	  FFT.Windowing(vReal, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	491b      	ldr	r1, [pc, #108]	; (8001f80 <main+0x150>)
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <main+0x158>)
 8001f16:	f7ff fa6b 	bl	80013f0 <_ZN10arduinoFFT9WindowingEPdthh>
	  FFT.Compute(vReal, vImag, samples, FFT_FORWARD);
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <main+0x154>)
 8001f22:	4917      	ldr	r1, [pc, #92]	; (8001f80 <main+0x150>)
 8001f24:	4818      	ldr	r0, [pc, #96]	; (8001f88 <main+0x158>)
 8001f26:	f7fe fff0 	bl	8000f0a <_ZN10arduinoFFT7ComputeEPdS0_th>
	  FFT.ComplexToMagnitude(vReal, vImag, samples);
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <main+0x154>)
 8001f2e:	4914      	ldr	r1, [pc, #80]	; (8001f80 <main+0x150>)
 8001f30:	4815      	ldr	r0, [pc, #84]	; (8001f88 <main+0x158>)
 8001f32:	f7ff fa05 	bl	8001340 <_ZN10arduinoFFT18ComplexToMagnitudeEPdS0_t>
	  double x = FFT.MajorPeak(vReal, samples, samplingFrequency);
 8001f36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001f70 <main+0x140>
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	4910      	ldr	r1, [pc, #64]	; (8001f80 <main+0x150>)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <main+0x158>)
 8001f40:	f7ff fe30 	bl	8001ba4 <_ZN10arduinoFFT9MajorPeakEPdtd>
 8001f44:	ed87 0b00 	vstr	d0, [r7]



	  uart_buf_len = sprintf(uart_buf,  "%f \r\n", x);
 8001f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f4c:	490f      	ldr	r1, [pc, #60]	; (8001f8c <main+0x15c>)
 8001f4e:	4810      	ldr	r0, [pc, #64]	; (8001f90 <main+0x160>)
 8001f50:	f003 fc86 	bl	8005860 <siprintf>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <main+0x164>)
 8001f58:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <main+0x164>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	490b      	ldr	r1, [pc, #44]	; (8001f90 <main+0x160>)
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <main+0x168>)
 8001f66:	f001 fa26 	bl	80033b6 <HAL_UART_Transmit>




  }
 8001f6a:	e76c      	b.n	8001e46 <main+0x16>
 8001f6c:	f3af 8000 	nop.w
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40b38800 	.word	0x40b38800
 8001f78:	40600000 	.word	0x40600000
 8001f7c:	40590000 	.word	0x40590000
 8001f80:	20000298 	.word	0x20000298
 8001f84:	20000698 	.word	0x20000698
 8001f88:	20000278 	.word	0x20000278
 8001f8c:	08007038 	.word	0x08007038
 8001f90:	2000023c 	.word	0x2000023c
 8001f94:	20000270 	.word	0x20000270
 8001f98:	200001fc 	.word	0x200001fc
 8001f9c:	66666666 	.word	0x66666666
 8001fa0:	40296666 	.word	0x40296666
 8001fa4:	5474a168 	.word	0x5474a168
 8001fa8:	401921fb 	.word	0x401921fb

08001fac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	2230      	movs	r2, #48	; 0x30
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 ffec 	bl	8004f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <_Z18SystemClock_Configv+0xe4>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a2d      	ldr	r2, [pc, #180]	; (8002090 <_Z18SystemClock_Configv+0xe4>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <_Z18SystemClock_Configv+0xe4>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <_Z18SystemClock_Configv+0xe8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <_Z18SystemClock_Configv+0xe8>)
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <_Z18SystemClock_Configv+0xe8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002010:	2301      	movs	r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002014:	2310      	movs	r3, #16
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002020:	2310      	movs	r3, #16
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002024:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800202a:	2304      	movs	r3, #4
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800202e:	2307      	movs	r3, #7
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fd0e 	bl	8002a58 <HAL_RCC_OscConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 800204c:	f000 f8c2 	bl	80021d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002050:	230f      	movs	r3, #15
 8002052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002054:	2302      	movs	r3, #2
 8002056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2102      	movs	r1, #2
 800206c:	4618      	mov	r0, r3
 800206e:	f000 ff63 	bl	8002f38 <HAL_RCC_ClockConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8002082:	f000 f8a7 	bl	80021d4 <Error_Handler>
  }
}
 8002086:	bf00      	nop
 8002088:	3750      	adds	r7, #80	; 0x50
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000

08002098 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80020d0:	f001 f924 	bl	800331c <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80020e4:	f000 f876 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200001fc 	.word	0x200001fc
 80020f0:	40004400 	.word	0x40004400

080020f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2120      	movs	r1, #32
 800217e:	4812      	ldr	r0, [pc, #72]	; (80021c8 <_ZL12MX_GPIO_Initv+0xd4>)
 8002180:	f000 fc50 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_ZL12MX_GPIO_Initv+0xd8>)
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <_ZL12MX_GPIO_Initv+0xdc>)
 800219a:	f000 fac1 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800219e:	2320      	movs	r3, #32
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <_ZL12MX_GPIO_Initv+0xd4>)
 80021b6:	f000 fab3 	bl	8002720 <HAL_GPIO_Init>

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	10210000 	.word	0x10210000
 80021d0:	40020800 	.word	0x40020800

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <_Z41__static_initialization_and_destruction_0ii>:
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d102      	bne.n	8002204 <_Z41__static_initialization_and_destruction_0ii+0x20>
arduinoFFT FFT = arduinoFFT(); /* Create FFT object */
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002200:	f7fe fe6d 	bl	8000ede <_ZN10arduinoFFTC1Ev>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002210:	4293      	cmp	r3, r2
 8002212:	d102      	bne.n	800221a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002216:	f7fe fe6d 	bl	8000ef4 <_ZN10arduinoFFTD1Ev>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000278 	.word	0x20000278

08002228 <_GLOBAL__sub_I_huart2>:
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
 800222c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002230:	2001      	movs	r0, #1
 8002232:	f7ff ffd7 	bl	80021e4 <_Z41__static_initialization_and_destruction_0ii>
 8002236:	bd80      	pop	{r7, pc}

08002238 <_GLOBAL__sub_D_huart2>:
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
 800223c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff ffcf 	bl	80021e4 <_Z41__static_initialization_and_destruction_0ii>
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_MspInit+0x4c>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_MspInit+0x4c>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_MspInit+0x4c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_MspInit+0x4c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_MspInit+0x4c>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002286:	2007      	movs	r0, #7
 8002288:	f000 fa16 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_UART_MspInit+0x84>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12b      	bne.n	8002312 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f2:	230c      	movs	r3, #12
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002302:	2307      	movs	r3, #7
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_UART_MspInit+0x8c>)
 800230e:	f000 fa07 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f000 f8ca 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f002 fdc6 	bl	8004f44 <__errno>
 80023b8:	4602      	mov	r2, r0
 80023ba:	230c      	movs	r3, #12
 80023bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20018000 	.word	0x20018000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000a98 	.word	0x20000a98
 80023ec:	20000ab0 	.word	0x20000ab0

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <SystemInit+0x28>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <SystemInit+0x28>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SystemInit+0x28>)
 8002406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240a:	609a      	str	r2, [r3, #8]
#endif
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002422:	e003      	b.n	800242c <LoopCopyDataInit>

08002424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800242a:	3104      	adds	r1, #4

0800242c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800242c:	480b      	ldr	r0, [pc, #44]	; (800245c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002434:	d3f6      	bcc.n	8002424 <CopyDataInit>
  ldr  r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002438:	e002      	b.n	8002440 <LoopFillZerobss>

0800243a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800243a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800243c:	f842 3b04 	str.w	r3, [r2], #4

08002440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002444:	d3f9      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd3 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f002 fd81 	bl	8004f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7ff fcef 	bl	8001e30 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002458:	080074c0 	.word	0x080074c0
  ldr  r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002460:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002464:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002468:	20000aac 	.word	0x20000aac

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f90d 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fed0 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f917 	bl	8002706 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f000 f8ed 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000000 	.word	0x20000000
 800250c:	20000008 	.word	0x20000008
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000008 	.word	0x20000008
 8002538:	20000aa4 	.word	0x20000aa4

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000aa4 	.word	0x20000aa4

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff47 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff5c 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffb0 	bl	8002674 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00b      	beq.n	800277a <HAL_GPIO_Init+0x5a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276e:	2b11      	cmp	r3, #17
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b12      	cmp	r3, #18
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0xfc>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a47      	ldr	r2, [pc, #284]	; (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a45      	ldr	r2, [pc, #276]	; (8002a18 <HAL_GPIO_Init+0x2f8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <HAL_GPIO_Init+0x2fc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4934      	ldr	r1, [pc, #208]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002966:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_GPIO_Init+0x300>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3724      	adds	r7, #36	; 0x24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a40:	e003      	b.n	8002a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e25b      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d075      	beq.n	8002b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a76:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d00c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d112      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8e:	4b9d      	ldr	r3, [pc, #628]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	4b99      	ldr	r3, [pc, #612]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d05b      	beq.n	8002b60 <HAL_RCC_OscConfig+0x108>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d157      	bne.n	8002b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e236      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x74>
 8002abe:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0xb0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x98>
 8002ad6:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a8a      	ldr	r2, [pc, #552]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xb0>
 8002af0:	4b84      	ldr	r3, [pc, #528]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a83      	ldr	r2, [pc, #524]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff fd14 	bl	800253c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fd10 	bl	800253c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1fb      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0xc0>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fd00 	bl	800253c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7ff fcfc 	bl	800253c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1e7      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0xe8>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d116      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x152>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1bb      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4952      	ldr	r1, [pc, #328]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	e03a      	b.n	8002c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_RCC_OscConfig+0x2b0>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7ff fcb5 	bl	800253c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fcb1 	bl	800253c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e19c      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4940      	ldr	r1, [pc, #256]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x2b0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7ff fc94 	bl	800253c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c18:	f7ff fc90 	bl	800253c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e17b      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d030      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_OscConfig+0x2b4>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7ff fc74 	bl	800253c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c58:	f7ff fc70 	bl	800253c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e15b      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x200>
 8002c76:	e015      	b.n	8002ca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_OscConfig+0x2b4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fc5d 	bl	800253c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c86:	f7ff fc59 	bl	800253c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e144      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a0 	beq.w	8002df2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x2b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d121      	bne.n	8002d32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCC_OscConfig+0x2b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_RCC_OscConfig+0x2b8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fc1f 	bl	800253c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e011      	b.n	8002d26 <HAL_RCC_OscConfig+0x2ce>
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470000 	.word	0x42470000
 8002d0c:	42470e80 	.word	0x42470e80
 8002d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7ff fc12 	bl	800253c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0fd      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x4d4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x32a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x312>
 8002d50:	4b77      	ldr	r3, [pc, #476]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a76      	ldr	r2, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a73      	ldr	r2, [pc, #460]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x32a>
 8002d6a:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a6d      	ldr	r2, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7ff fbd7 	bl	800253c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7ff fbd3 	bl	800253c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0bc      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCC_OscConfig+0x33a>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7ff fbc1 	bl	800253c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7ff fbbd 	bl	800253c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0a6      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a51      	ldr	r2, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8092 	beq.w	8002f20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d05c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d141      	bne.n	8002e94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x4dc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7ff fb91 	bl	800253c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7ff fb8d 	bl	800253c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e078      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	4933      	ldr	r1, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_RCC_OscConfig+0x4dc>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fb66 	bl	800253c <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e74:	f7ff fb62 	bl	800253c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e04d      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x41c>
 8002e92:	e045      	b.n	8002f20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x4dc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fb4f 	bl	800253c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7ff fb4b 	bl	800253c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e036      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x44a>
 8002ec0:	e02e      	b.n	8002f20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e029      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d115      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470060 	.word	0x42470060

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0cc      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d90c      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	494d      	ldr	r1, [pc, #308]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d044      	beq.n	8003058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e067      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4934      	ldr	r1, [pc, #208]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7ff fa88 	bl	800253c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7ff fa84 	bl	800253c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d20c      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e032      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4916      	ldr	r1, [pc, #88]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030be:	f000 f821 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c2:	4601      	mov	r1, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	fa21 f303 	lsr.w	r3, r1, r3
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f9e8 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08007050 	.word	0x08007050
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d007      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x32>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d008      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x38>
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80b4 	bne.w	8003298 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003132:	60bb      	str	r3, [r7, #8]
       break;
 8003134:	e0b3      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003138:	60bb      	str	r3, [r7, #8]
      break;
 800313a:	e0b0      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800313c:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003146:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d04a      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b55      	ldr	r3, [pc, #340]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	ea03 0501 	and.w	r5, r3, r1
 8003168:	ea04 0602 	and.w	r6, r4, r2
 800316c:	4629      	mov	r1, r5
 800316e:	4632      	mov	r2, r6
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0154      	lsls	r4, r2, #5
 800317a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800317e:	014b      	lsls	r3, r1, #5
 8003180:	4619      	mov	r1, r3
 8003182:	4622      	mov	r2, r4
 8003184:	1b49      	subs	r1, r1, r5
 8003186:	eb62 0206 	sbc.w	r2, r2, r6
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	0194      	lsls	r4, r2, #6
 8003194:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003198:	018b      	lsls	r3, r1, #6
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	eb64 0402 	sbc.w	r4, r4, r2
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	00e2      	lsls	r2, r4, #3
 80031aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ae:	00d9      	lsls	r1, r3, #3
 80031b0:	460b      	mov	r3, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	195b      	adds	r3, r3, r5
 80031b6:	eb44 0406 	adc.w	r4, r4, r6
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	0262      	lsls	r2, r4, #9
 80031c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031c8:	0259      	lsls	r1, r3, #9
 80031ca:	460b      	mov	r3, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	4621      	mov	r1, r4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	461a      	mov	r2, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	f7fd fcec 	bl	8000bb8 <__aeabi_uldivmod>
 80031e0:	4603      	mov	r3, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e049      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	f04f 0400 	mov.w	r4, #0
 80031f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	ea03 0501 	and.w	r5, r3, r1
 80031fe:	ea04 0602 	and.w	r6, r4, r2
 8003202:	4629      	mov	r1, r5
 8003204:	4632      	mov	r2, r6
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	f04f 0400 	mov.w	r4, #0
 800320e:	0154      	lsls	r4, r2, #5
 8003210:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003214:	014b      	lsls	r3, r1, #5
 8003216:	4619      	mov	r1, r3
 8003218:	4622      	mov	r2, r4
 800321a:	1b49      	subs	r1, r1, r5
 800321c:	eb62 0206 	sbc.w	r2, r2, r6
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	0194      	lsls	r4, r2, #6
 800322a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800322e:	018b      	lsls	r3, r1, #6
 8003230:	1a5b      	subs	r3, r3, r1
 8003232:	eb64 0402 	sbc.w	r4, r4, r2
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	00e2      	lsls	r2, r4, #3
 8003240:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003244:	00d9      	lsls	r1, r3, #3
 8003246:	460b      	mov	r3, r1
 8003248:	4614      	mov	r4, r2
 800324a:	195b      	adds	r3, r3, r5
 800324c:	eb44 0406 	adc.w	r4, r4, r6
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	02a2      	lsls	r2, r4, #10
 800325a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800325e:	0299      	lsls	r1, r3, #10
 8003260:	460b      	mov	r3, r1
 8003262:	4614      	mov	r4, r2
 8003264:	4618      	mov	r0, r3
 8003266:	4621      	mov	r1, r4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	461a      	mov	r2, r3
 8003270:	4623      	mov	r3, r4
 8003272:	f7fd fca1 	bl	8000bb8 <__aeabi_uldivmod>
 8003276:	4603      	mov	r3, r0
 8003278:	460c      	mov	r4, r1
 800327a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	60bb      	str	r3, [r7, #8]
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800329a:	60bb      	str	r3, [r7, #8]
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	68bb      	ldr	r3, [r7, #8]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	00f42400 	.word	0x00f42400
 80032b0:	007a1200 	.word	0x007a1200

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000000 	.word	0x20000000

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d4:	4601      	mov	r1, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08007060 	.word	0x08007060

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff ffdc 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032fc:	4601      	mov	r1, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0b5b      	lsrs	r3, r3, #13
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08007060 	.word	0x08007060

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03f      	b.n	80033ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe ffa8 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f90b 	bl	800357c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b088      	sub	sp, #32
 80033ba:	af02      	add	r7, sp, #8
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	f040 8083 	bne.w	80034de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Transmit+0x2e>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e07b      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Transmit+0x40>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e074      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2221      	movs	r2, #33	; 0x21
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800340c:	f7ff f896 	bl	800253c <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003426:	e042      	b.n	80034ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d122      	bne.n	8003486 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f84c 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e042      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3302      	adds	r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	e017      	b.n	80034ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3301      	adds	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	e013      	b.n	80034ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f829 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e01f      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1b7      	bne.n	8003428 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2200      	movs	r2, #0
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f810 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	e02c      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d028      	beq.n	8003554 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <UART_WaitOnFlagUntilTimeout+0x30>
 8003508:	f7ff f818 	bl	800253c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	429a      	cmp	r2, r3
 8003516:	d21d      	bcs.n	8003554 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003526:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e00f      	b.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	429a      	cmp	r2, r3
 8003570:	d0c3      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035be:	f023 030c 	bic.w	r3, r3, #12
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	f040 818b 	bne.w	8003904 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4ac1      	ldr	r2, [pc, #772]	; (80038f8 <UART_SetConfig+0x37c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d005      	beq.n	8003604 <UART_SetConfig+0x88>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4abf      	ldr	r2, [pc, #764]	; (80038fc <UART_SetConfig+0x380>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f040 80bd 	bne.w	800377e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003604:	f7ff fe76 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8003608:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	461d      	mov	r5, r3
 800360e:	f04f 0600 	mov.w	r6, #0
 8003612:	46a8      	mov	r8, r5
 8003614:	46b1      	mov	r9, r6
 8003616:	eb18 0308 	adds.w	r3, r8, r8
 800361a:	eb49 0409 	adc.w	r4, r9, r9
 800361e:	4698      	mov	r8, r3
 8003620:	46a1      	mov	r9, r4
 8003622:	eb18 0805 	adds.w	r8, r8, r5
 8003626:	eb49 0906 	adc.w	r9, r9, r6
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003636:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800363a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800363e:	4688      	mov	r8, r1
 8003640:	4691      	mov	r9, r2
 8003642:	eb18 0005 	adds.w	r0, r8, r5
 8003646:	eb49 0106 	adc.w	r1, r9, r6
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	461d      	mov	r5, r3
 8003650:	f04f 0600 	mov.w	r6, #0
 8003654:	196b      	adds	r3, r5, r5
 8003656:	eb46 0406 	adc.w	r4, r6, r6
 800365a:	461a      	mov	r2, r3
 800365c:	4623      	mov	r3, r4
 800365e:	f7fd faab 	bl	8000bb8 <__aeabi_uldivmod>
 8003662:	4603      	mov	r3, r0
 8003664:	460c      	mov	r4, r1
 8003666:	461a      	mov	r2, r3
 8003668:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <UART_SetConfig+0x384>)
 800366a:	fba3 2302 	umull	r2, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	461d      	mov	r5, r3
 8003678:	f04f 0600 	mov.w	r6, #0
 800367c:	46a9      	mov	r9, r5
 800367e:	46b2      	mov	sl, r6
 8003680:	eb19 0309 	adds.w	r3, r9, r9
 8003684:	eb4a 040a 	adc.w	r4, sl, sl
 8003688:	4699      	mov	r9, r3
 800368a:	46a2      	mov	sl, r4
 800368c:	eb19 0905 	adds.w	r9, r9, r5
 8003690:	eb4a 0a06 	adc.w	sl, sl, r6
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036a8:	4689      	mov	r9, r1
 80036aa:	4692      	mov	sl, r2
 80036ac:	eb19 0005 	adds.w	r0, r9, r5
 80036b0:	eb4a 0106 	adc.w	r1, sl, r6
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	461d      	mov	r5, r3
 80036ba:	f04f 0600 	mov.w	r6, #0
 80036be:	196b      	adds	r3, r5, r5
 80036c0:	eb46 0406 	adc.w	r4, r6, r6
 80036c4:	461a      	mov	r2, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	f7fd fa76 	bl	8000bb8 <__aeabi_uldivmod>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b8b      	ldr	r3, [pc, #556]	; (8003900 <UART_SetConfig+0x384>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a86      	ldr	r2, [pc, #536]	; (8003900 <UART_SetConfig+0x384>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f4:	4498      	add	r8, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	461d      	mov	r5, r3
 80036fa:	f04f 0600 	mov.w	r6, #0
 80036fe:	46a9      	mov	r9, r5
 8003700:	46b2      	mov	sl, r6
 8003702:	eb19 0309 	adds.w	r3, r9, r9
 8003706:	eb4a 040a 	adc.w	r4, sl, sl
 800370a:	4699      	mov	r9, r3
 800370c:	46a2      	mov	sl, r4
 800370e:	eb19 0905 	adds.w	r9, r9, r5
 8003712:	eb4a 0a06 	adc.w	sl, sl, r6
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003722:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003726:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800372a:	4689      	mov	r9, r1
 800372c:	4692      	mov	sl, r2
 800372e:	eb19 0005 	adds.w	r0, r9, r5
 8003732:	eb4a 0106 	adc.w	r1, sl, r6
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	461d      	mov	r5, r3
 800373c:	f04f 0600 	mov.w	r6, #0
 8003740:	196b      	adds	r3, r5, r5
 8003742:	eb46 0406 	adc.w	r4, r6, r6
 8003746:	461a      	mov	r2, r3
 8003748:	4623      	mov	r3, r4
 800374a:	f7fd fa35 	bl	8000bb8 <__aeabi_uldivmod>
 800374e:	4603      	mov	r3, r0
 8003750:	460c      	mov	r4, r1
 8003752:	461a      	mov	r2, r3
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <UART_SetConfig+0x384>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2164      	movs	r1, #100	; 0x64
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a65      	ldr	r2, [pc, #404]	; (8003900 <UART_SetConfig+0x384>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 0207 	and.w	r2, r3, #7
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4442      	add	r2, r8
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e26f      	b.n	8003c5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800377e:	f7ff fda5 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8003782:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	461d      	mov	r5, r3
 8003788:	f04f 0600 	mov.w	r6, #0
 800378c:	46a8      	mov	r8, r5
 800378e:	46b1      	mov	r9, r6
 8003790:	eb18 0308 	adds.w	r3, r8, r8
 8003794:	eb49 0409 	adc.w	r4, r9, r9
 8003798:	4698      	mov	r8, r3
 800379a:	46a1      	mov	r9, r4
 800379c:	eb18 0805 	adds.w	r8, r8, r5
 80037a0:	eb49 0906 	adc.w	r9, r9, r6
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037b8:	4688      	mov	r8, r1
 80037ba:	4691      	mov	r9, r2
 80037bc:	eb18 0005 	adds.w	r0, r8, r5
 80037c0:	eb49 0106 	adc.w	r1, r9, r6
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	461d      	mov	r5, r3
 80037ca:	f04f 0600 	mov.w	r6, #0
 80037ce:	196b      	adds	r3, r5, r5
 80037d0:	eb46 0406 	adc.w	r4, r6, r6
 80037d4:	461a      	mov	r2, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	f7fd f9ee 	bl	8000bb8 <__aeabi_uldivmod>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <UART_SetConfig+0x384>)
 80037e4:	fba3 2302 	umull	r2, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	461d      	mov	r5, r3
 80037f2:	f04f 0600 	mov.w	r6, #0
 80037f6:	46a9      	mov	r9, r5
 80037f8:	46b2      	mov	sl, r6
 80037fa:	eb19 0309 	adds.w	r3, r9, r9
 80037fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003802:	4699      	mov	r9, r3
 8003804:	46a2      	mov	sl, r4
 8003806:	eb19 0905 	adds.w	r9, r9, r5
 800380a:	eb4a 0a06 	adc.w	sl, sl, r6
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800381a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800381e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003822:	4689      	mov	r9, r1
 8003824:	4692      	mov	sl, r2
 8003826:	eb19 0005 	adds.w	r0, r9, r5
 800382a:	eb4a 0106 	adc.w	r1, sl, r6
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	461d      	mov	r5, r3
 8003834:	f04f 0600 	mov.w	r6, #0
 8003838:	196b      	adds	r3, r5, r5
 800383a:	eb46 0406 	adc.w	r4, r6, r6
 800383e:	461a      	mov	r2, r3
 8003840:	4623      	mov	r3, r4
 8003842:	f7fd f9b9 	bl	8000bb8 <__aeabi_uldivmod>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	461a      	mov	r2, r3
 800384c:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <UART_SetConfig+0x384>)
 800384e:	fba3 1302 	umull	r1, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2164      	movs	r1, #100	; 0x64
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	3332      	adds	r3, #50	; 0x32
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <UART_SetConfig+0x384>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800386e:	4498      	add	r8, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	461d      	mov	r5, r3
 8003874:	f04f 0600 	mov.w	r6, #0
 8003878:	46a9      	mov	r9, r5
 800387a:	46b2      	mov	sl, r6
 800387c:	eb19 0309 	adds.w	r3, r9, r9
 8003880:	eb4a 040a 	adc.w	r4, sl, sl
 8003884:	4699      	mov	r9, r3
 8003886:	46a2      	mov	sl, r4
 8003888:	eb19 0905 	adds.w	r9, r9, r5
 800388c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800389c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038a4:	4689      	mov	r9, r1
 80038a6:	4692      	mov	sl, r2
 80038a8:	eb19 0005 	adds.w	r0, r9, r5
 80038ac:	eb4a 0106 	adc.w	r1, sl, r6
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	461d      	mov	r5, r3
 80038b6:	f04f 0600 	mov.w	r6, #0
 80038ba:	196b      	adds	r3, r5, r5
 80038bc:	eb46 0406 	adc.w	r4, r6, r6
 80038c0:	461a      	mov	r2, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	f7fd f978 	bl	8000bb8 <__aeabi_uldivmod>
 80038c8:	4603      	mov	r3, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <UART_SetConfig+0x384>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <UART_SetConfig+0x384>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 0207 	and.w	r2, r3, #7
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4442      	add	r2, r8
 80038f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80038f6:	e1b2      	b.n	8003c5e <UART_SetConfig+0x6e2>
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40011400 	.word	0x40011400
 8003900:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4ad7      	ldr	r2, [pc, #860]	; (8003c68 <UART_SetConfig+0x6ec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d005      	beq.n	800391a <UART_SetConfig+0x39e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4ad6      	ldr	r2, [pc, #856]	; (8003c6c <UART_SetConfig+0x6f0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	f040 80d1 	bne.w	8003abc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800391a:	f7ff fceb 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 800391e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	469a      	mov	sl, r3
 8003924:	f04f 0b00 	mov.w	fp, #0
 8003928:	46d0      	mov	r8, sl
 800392a:	46d9      	mov	r9, fp
 800392c:	eb18 0308 	adds.w	r3, r8, r8
 8003930:	eb49 0409 	adc.w	r4, r9, r9
 8003934:	4698      	mov	r8, r3
 8003936:	46a1      	mov	r9, r4
 8003938:	eb18 080a 	adds.w	r8, r8, sl
 800393c:	eb49 090b 	adc.w	r9, r9, fp
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800394c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003950:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003954:	4688      	mov	r8, r1
 8003956:	4691      	mov	r9, r2
 8003958:	eb1a 0508 	adds.w	r5, sl, r8
 800395c:	eb4b 0609 	adc.w	r6, fp, r9
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4619      	mov	r1, r3
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f04f 0400 	mov.w	r4, #0
 8003972:	0094      	lsls	r4, r2, #2
 8003974:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003978:	008b      	lsls	r3, r1, #2
 800397a:	461a      	mov	r2, r3
 800397c:	4623      	mov	r3, r4
 800397e:	4628      	mov	r0, r5
 8003980:	4631      	mov	r1, r6
 8003982:	f7fd f919 	bl	8000bb8 <__aeabi_uldivmod>
 8003986:	4603      	mov	r3, r0
 8003988:	460c      	mov	r4, r1
 800398a:	461a      	mov	r2, r3
 800398c:	4bb8      	ldr	r3, [pc, #736]	; (8003c70 <UART_SetConfig+0x6f4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	469b      	mov	fp, r3
 800399c:	f04f 0c00 	mov.w	ip, #0
 80039a0:	46d9      	mov	r9, fp
 80039a2:	46e2      	mov	sl, ip
 80039a4:	eb19 0309 	adds.w	r3, r9, r9
 80039a8:	eb4a 040a 	adc.w	r4, sl, sl
 80039ac:	4699      	mov	r9, r3
 80039ae:	46a2      	mov	sl, r4
 80039b0:	eb19 090b 	adds.w	r9, r9, fp
 80039b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039cc:	4689      	mov	r9, r1
 80039ce:	4692      	mov	sl, r2
 80039d0:	eb1b 0509 	adds.w	r5, fp, r9
 80039d4:	eb4c 060a 	adc.w	r6, ip, sl
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4619      	mov	r1, r3
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	0094      	lsls	r4, r2, #2
 80039ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	4623      	mov	r3, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	4631      	mov	r1, r6
 80039fa:	f7fd f8dd 	bl	8000bb8 <__aeabi_uldivmod>
 80039fe:	4603      	mov	r3, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b9a      	ldr	r3, [pc, #616]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003a06:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2164      	movs	r1, #100	; 0x64
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a95      	ldr	r2, [pc, #596]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	4498      	add	r8, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	469b      	mov	fp, r3
 8003a2a:	f04f 0c00 	mov.w	ip, #0
 8003a2e:	46d9      	mov	r9, fp
 8003a30:	46e2      	mov	sl, ip
 8003a32:	eb19 0309 	adds.w	r3, r9, r9
 8003a36:	eb4a 040a 	adc.w	r4, sl, sl
 8003a3a:	4699      	mov	r9, r3
 8003a3c:	46a2      	mov	sl, r4
 8003a3e:	eb19 090b 	adds.w	r9, r9, fp
 8003a42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a5a:	4689      	mov	r9, r1
 8003a5c:	4692      	mov	sl, r2
 8003a5e:	eb1b 0509 	adds.w	r5, fp, r9
 8003a62:	eb4c 060a 	adc.w	r6, ip, sl
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	f04f 0400 	mov.w	r4, #0
 8003a78:	0094      	lsls	r4, r2, #2
 8003a7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a7e:	008b      	lsls	r3, r1, #2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	4631      	mov	r1, r6
 8003a88:	f7fd f896 	bl	8000bb8 <__aeabi_uldivmod>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003a94:	fba3 1302 	umull	r1, r3, r3, r2
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	2164      	movs	r1, #100	; 0x64
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	3332      	adds	r3, #50	; 0x32
 8003aa6:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4442      	add	r2, r8
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	e0d0      	b.n	8003c5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7ff fc06 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8003ac0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	469a      	mov	sl, r3
 8003ac6:	f04f 0b00 	mov.w	fp, #0
 8003aca:	46d0      	mov	r8, sl
 8003acc:	46d9      	mov	r9, fp
 8003ace:	eb18 0308 	adds.w	r3, r8, r8
 8003ad2:	eb49 0409 	adc.w	r4, r9, r9
 8003ad6:	4698      	mov	r8, r3
 8003ad8:	46a1      	mov	r9, r4
 8003ada:	eb18 080a 	adds.w	r8, r8, sl
 8003ade:	eb49 090b 	adc.w	r9, r9, fp
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003af2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003af6:	4688      	mov	r8, r1
 8003af8:	4691      	mov	r9, r2
 8003afa:	eb1a 0508 	adds.w	r5, sl, r8
 8003afe:	eb4b 0609 	adc.w	r6, fp, r9
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	0094      	lsls	r4, r2, #2
 8003b16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b1a:	008b      	lsls	r3, r1, #2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	4631      	mov	r1, r6
 8003b24:	f7fd f848 	bl	8000bb8 <__aeabi_uldivmod>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003b30:	fba3 2302 	umull	r2, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	469b      	mov	fp, r3
 8003b3e:	f04f 0c00 	mov.w	ip, #0
 8003b42:	46d9      	mov	r9, fp
 8003b44:	46e2      	mov	sl, ip
 8003b46:	eb19 0309 	adds.w	r3, r9, r9
 8003b4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b4e:	4699      	mov	r9, r3
 8003b50:	46a2      	mov	sl, r4
 8003b52:	eb19 090b 	adds.w	r9, r9, fp
 8003b56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b6e:	4689      	mov	r9, r1
 8003b70:	4692      	mov	sl, r2
 8003b72:	eb1b 0509 	adds.w	r5, fp, r9
 8003b76:	eb4c 060a 	adc.w	r6, ip, sl
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	f04f 0400 	mov.w	r4, #0
 8003b8c:	0094      	lsls	r4, r2, #2
 8003b8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b92:	008b      	lsls	r3, r1, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	f7fd f80c 	bl	8000bb8 <__aeabi_uldivmod>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc6:	4498      	add	r8, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	469b      	mov	fp, r3
 8003bcc:	f04f 0c00 	mov.w	ip, #0
 8003bd0:	46d9      	mov	r9, fp
 8003bd2:	46e2      	mov	sl, ip
 8003bd4:	eb19 0309 	adds.w	r3, r9, r9
 8003bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8003bdc:	4699      	mov	r9, r3
 8003bde:	46a2      	mov	sl, r4
 8003be0:	eb19 090b 	adds.w	r9, r9, fp
 8003be4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfc:	4689      	mov	r9, r1
 8003bfe:	4692      	mov	sl, r2
 8003c00:	eb1b 0509 	adds.w	r5, fp, r9
 8003c04:	eb4c 060a 	adc.w	r6, ip, sl
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f04f 0400 	mov.w	r4, #0
 8003c1a:	0094      	lsls	r4, r2, #2
 8003c1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c20:	008b      	lsls	r3, r1, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	4623      	mov	r3, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	4631      	mov	r1, r6
 8003c2a:	f7fc ffc5 	bl	8000bb8 <__aeabi_uldivmod>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <UART_SetConfig+0x6f4>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4442      	add	r2, r8
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	e7ff      	b.n	8003c5e <UART_SetConfig+0x6e2>
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c68:	40011000 	.word	0x40011000
 8003c6c:	40011400 	.word	0x40011400
 8003c70:	51eb851f 	.word	0x51eb851f
 8003c74:	00000000 	.word	0x00000000

08003c78 <cos>:
 8003c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c7a:	ec51 0b10 	vmov	r0, r1, d0
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <cos+0x80>)
 8003c80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c84:	4293      	cmp	r3, r2
 8003c86:	dc06      	bgt.n	8003c96 <cos+0x1e>
 8003c88:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003cf0 <cos+0x78>
 8003c8c:	f000 fb80 	bl	8004390 <__kernel_cos>
 8003c90:	ec51 0b10 	vmov	r0, r1, d0
 8003c94:	e007      	b.n	8003ca6 <cos+0x2e>
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <cos+0x84>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	dd09      	ble.n	8003cb0 <cos+0x38>
 8003c9c:	ee10 2a10 	vmov	r2, s0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	f7fc faf9 	bl	8000298 <__aeabi_dsub>
 8003ca6:	ec41 0b10 	vmov	d0, r0, r1
 8003caa:	b005      	add	sp, #20
 8003cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cb0:	4668      	mov	r0, sp
 8003cb2:	f000 f8c9 	bl	8003e48 <__ieee754_rem_pio2>
 8003cb6:	f000 0003 	and.w	r0, r0, #3
 8003cba:	2801      	cmp	r0, #1
 8003cbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cc0:	ed9d 0b00 	vldr	d0, [sp]
 8003cc4:	d007      	beq.n	8003cd6 <cos+0x5e>
 8003cc6:	2802      	cmp	r0, #2
 8003cc8:	d00e      	beq.n	8003ce8 <cos+0x70>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d0de      	beq.n	8003c8c <cos+0x14>
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 ff66 	bl	8004ba0 <__kernel_sin>
 8003cd4:	e7dc      	b.n	8003c90 <cos+0x18>
 8003cd6:	f000 ff63 	bl	8004ba0 <__kernel_sin>
 8003cda:	ec53 2b10 	vmov	r2, r3, d0
 8003cde:	ee10 0a10 	vmov	r0, s0
 8003ce2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003ce6:	e7de      	b.n	8003ca6 <cos+0x2e>
 8003ce8:	f000 fb52 	bl	8004390 <__kernel_cos>
 8003cec:	e7f5      	b.n	8003cda <cos+0x62>
 8003cee:	bf00      	nop
	...
 8003cf8:	3fe921fb 	.word	0x3fe921fb
 8003cfc:	7fefffff 	.word	0x7fefffff

08003d00 <sin>:
 8003d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d02:	ec51 0b10 	vmov	r0, r1, d0
 8003d06:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <sin+0x88>)
 8003d08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	dc07      	bgt.n	8003d20 <sin+0x20>
 8003d10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003d80 <sin+0x80>
 8003d14:	2000      	movs	r0, #0
 8003d16:	f000 ff43 	bl	8004ba0 <__kernel_sin>
 8003d1a:	ec51 0b10 	vmov	r0, r1, d0
 8003d1e:	e007      	b.n	8003d30 <sin+0x30>
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <sin+0x8c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	dd09      	ble.n	8003d3a <sin+0x3a>
 8003d26:	ee10 2a10 	vmov	r2, s0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	f7fc fab4 	bl	8000298 <__aeabi_dsub>
 8003d30:	ec41 0b10 	vmov	d0, r0, r1
 8003d34:	b005      	add	sp, #20
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	4668      	mov	r0, sp
 8003d3c:	f000 f884 	bl	8003e48 <__ieee754_rem_pio2>
 8003d40:	f000 0003 	and.w	r0, r0, #3
 8003d44:	2801      	cmp	r0, #1
 8003d46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d4a:	ed9d 0b00 	vldr	d0, [sp]
 8003d4e:	d004      	beq.n	8003d5a <sin+0x5a>
 8003d50:	2802      	cmp	r0, #2
 8003d52:	d005      	beq.n	8003d60 <sin+0x60>
 8003d54:	b970      	cbnz	r0, 8003d74 <sin+0x74>
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7dd      	b.n	8003d16 <sin+0x16>
 8003d5a:	f000 fb19 	bl	8004390 <__kernel_cos>
 8003d5e:	e7dc      	b.n	8003d1a <sin+0x1a>
 8003d60:	2001      	movs	r0, #1
 8003d62:	f000 ff1d 	bl	8004ba0 <__kernel_sin>
 8003d66:	ec53 2b10 	vmov	r2, r3, d0
 8003d6a:	ee10 0a10 	vmov	r0, s0
 8003d6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d72:	e7dd      	b.n	8003d30 <sin+0x30>
 8003d74:	f000 fb0c 	bl	8004390 <__kernel_cos>
 8003d78:	e7f5      	b.n	8003d66 <sin+0x66>
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w
	...
 8003d88:	3fe921fb 	.word	0x3fe921fb
 8003d8c:	7fefffff 	.word	0x7fefffff

08003d90 <sqrt>:
 8003d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d94:	ed2d 8b02 	vpush	{d8}
 8003d98:	b08b      	sub	sp, #44	; 0x2c
 8003d9a:	ec55 4b10 	vmov	r4, r5, d0
 8003d9e:	f000 fa45 	bl	800422c <__ieee754_sqrt>
 8003da2:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <sqrt+0xac>)
 8003da4:	eeb0 8a40 	vmov.f32	s16, s0
 8003da8:	eef0 8a60 	vmov.f32	s17, s1
 8003dac:	f993 6000 	ldrsb.w	r6, [r3]
 8003db0:	1c73      	adds	r3, r6, #1
 8003db2:	d02a      	beq.n	8003e0a <sqrt+0x7a>
 8003db4:	4622      	mov	r2, r4
 8003db6:	462b      	mov	r3, r5
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc febe 	bl	8000b3c <__aeabi_dcmpun>
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	bb10      	cbnz	r0, 8003e0a <sqrt+0x7a>
 8003dc4:	f04f 0800 	mov.w	r8, #0
 8003dc8:	f04f 0900 	mov.w	r9, #0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fe8a 	bl	8000aec <__aeabi_dcmplt>
 8003dd8:	b1b8      	cbz	r0, 8003e0a <sqrt+0x7a>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <sqrt+0xb0>)
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	9708      	str	r7, [sp, #32]
 8003de4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003de8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003dec:	b9b6      	cbnz	r6, 8003e1c <sqrt+0x8c>
 8003dee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003df2:	4668      	mov	r0, sp
 8003df4:	f001 f81c 	bl	8004e30 <matherr>
 8003df8:	b1d0      	cbz	r0, 8003e30 <sqrt+0xa0>
 8003dfa:	9b08      	ldr	r3, [sp, #32]
 8003dfc:	b11b      	cbz	r3, 8003e06 <sqrt+0x76>
 8003dfe:	f001 f8a1 	bl	8004f44 <__errno>
 8003e02:	9b08      	ldr	r3, [sp, #32]
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e0e:	eef0 0a68 	vmov.f32	s1, s17
 8003e12:	b00b      	add	sp, #44	; 0x2c
 8003e14:	ecbd 8b02 	vpop	{d8}
 8003e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	4640      	mov	r0, r8
 8003e22:	4649      	mov	r1, r9
 8003e24:	f7fc fd1a 	bl	800085c <__aeabi_ddiv>
 8003e28:	2e02      	cmp	r6, #2
 8003e2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e2e:	d1e0      	bne.n	8003df2 <sqrt+0x62>
 8003e30:	f001 f888 	bl	8004f44 <__errno>
 8003e34:	2321      	movs	r3, #33	; 0x21
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	e7df      	b.n	8003dfa <sqrt+0x6a>
 8003e3a:	bf00      	nop
 8003e3c:	20000009 	.word	0x20000009
 8003e40:	08007068 	.word	0x08007068
 8003e44:	00000000 	.word	0x00000000

08003e48 <__ieee754_rem_pio2>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	ec57 6b10 	vmov	r6, r7, d0
 8003e50:	4bc3      	ldr	r3, [pc, #780]	; (8004160 <__ieee754_rem_pio2+0x318>)
 8003e52:	b08d      	sub	sp, #52	; 0x34
 8003e54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003e58:	4598      	cmp	r8, r3
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	9704      	str	r7, [sp, #16]
 8003e5e:	dc07      	bgt.n	8003e70 <__ieee754_rem_pio2+0x28>
 8003e60:	2200      	movs	r2, #0
 8003e62:	2300      	movs	r3, #0
 8003e64:	ed84 0b00 	vstr	d0, [r4]
 8003e68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	e027      	b.n	8003ec0 <__ieee754_rem_pio2+0x78>
 8003e70:	4bbc      	ldr	r3, [pc, #752]	; (8004164 <__ieee754_rem_pio2+0x31c>)
 8003e72:	4598      	cmp	r8, r3
 8003e74:	dc75      	bgt.n	8003f62 <__ieee754_rem_pio2+0x11a>
 8003e76:	9b04      	ldr	r3, [sp, #16]
 8003e78:	4dbb      	ldr	r5, [pc, #748]	; (8004168 <__ieee754_rem_pio2+0x320>)
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	ee10 0a10 	vmov	r0, s0
 8003e80:	a3a9      	add	r3, pc, #676	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2e0>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	4639      	mov	r1, r7
 8003e88:	dd36      	ble.n	8003ef8 <__ieee754_rem_pio2+0xb0>
 8003e8a:	f7fc fa05 	bl	8000298 <__aeabi_dsub>
 8003e8e:	45a8      	cmp	r8, r5
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	d018      	beq.n	8003ec8 <__ieee754_rem_pio2+0x80>
 8003e96:	a3a6      	add	r3, pc, #664	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2e8>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc f9fc 	bl	8000298 <__aeabi_dsub>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	e9c4 2300 	strd	r2, r3, [r4]
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	4639      	mov	r1, r7
 8003eac:	f7fc f9f4 	bl	8000298 <__aeabi_dsub>
 8003eb0:	a39f      	add	r3, pc, #636	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2e8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f9ef 	bl	8000298 <__aeabi_dsub>
 8003eba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ebe:	2501      	movs	r5, #1
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	b00d      	add	sp, #52	; 0x34
 8003ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	a39b      	add	r3, pc, #620	; (adr r3, 8004138 <__ieee754_rem_pio2+0x2f0>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f7fc f9e3 	bl	8000298 <__aeabi_dsub>
 8003ed2:	a39b      	add	r3, pc, #620	; (adr r3, 8004140 <__ieee754_rem_pio2+0x2f8>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	4606      	mov	r6, r0
 8003eda:	460f      	mov	r7, r1
 8003edc:	f7fc f9dc 	bl	8000298 <__aeabi_dsub>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9c4 2300 	strd	r2, r3, [r4]
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	f7fc f9d4 	bl	8000298 <__aeabi_dsub>
 8003ef0:	a393      	add	r3, pc, #588	; (adr r3, 8004140 <__ieee754_rem_pio2+0x2f8>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	e7de      	b.n	8003eb6 <__ieee754_rem_pio2+0x6e>
 8003ef8:	f7fc f9d0 	bl	800029c <__adddf3>
 8003efc:	45a8      	cmp	r8, r5
 8003efe:	4606      	mov	r6, r0
 8003f00:	460f      	mov	r7, r1
 8003f02:	d016      	beq.n	8003f32 <__ieee754_rem_pio2+0xea>
 8003f04:	a38a      	add	r3, pc, #552	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2e8>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc f9c7 	bl	800029c <__adddf3>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	e9c4 2300 	strd	r2, r3, [r4]
 8003f16:	4630      	mov	r0, r6
 8003f18:	4639      	mov	r1, r7
 8003f1a:	f7fc f9bd 	bl	8000298 <__aeabi_dsub>
 8003f1e:	a384      	add	r3, pc, #528	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2e8>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc f9ba 	bl	800029c <__adddf3>
 8003f28:	f04f 35ff 	mov.w	r5, #4294967295
 8003f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f30:	e7c6      	b.n	8003ec0 <__ieee754_rem_pio2+0x78>
 8003f32:	a381      	add	r3, pc, #516	; (adr r3, 8004138 <__ieee754_rem_pio2+0x2f0>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc f9b0 	bl	800029c <__adddf3>
 8003f3c:	a380      	add	r3, pc, #512	; (adr r3, 8004140 <__ieee754_rem_pio2+0x2f8>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4606      	mov	r6, r0
 8003f44:	460f      	mov	r7, r1
 8003f46:	f7fc f9a9 	bl	800029c <__adddf3>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	e9c4 2300 	strd	r2, r3, [r4]
 8003f52:	4630      	mov	r0, r6
 8003f54:	4639      	mov	r1, r7
 8003f56:	f7fc f99f 	bl	8000298 <__aeabi_dsub>
 8003f5a:	a379      	add	r3, pc, #484	; (adr r3, 8004140 <__ieee754_rem_pio2+0x2f8>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	e7e0      	b.n	8003f24 <__ieee754_rem_pio2+0xdc>
 8003f62:	4b82      	ldr	r3, [pc, #520]	; (800416c <__ieee754_rem_pio2+0x324>)
 8003f64:	4598      	cmp	r8, r3
 8003f66:	f300 80d0 	bgt.w	800410a <__ieee754_rem_pio2+0x2c2>
 8003f6a:	f000 fed3 	bl	8004d14 <fabs>
 8003f6e:	ec57 6b10 	vmov	r6, r7, d0
 8003f72:	ee10 0a10 	vmov	r0, s0
 8003f76:	a374      	add	r3, pc, #464	; (adr r3, 8004148 <__ieee754_rem_pio2+0x300>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fb43 	bl	8000608 <__aeabi_dmul>
 8003f82:	2200      	movs	r2, #0
 8003f84:	4b7a      	ldr	r3, [pc, #488]	; (8004170 <__ieee754_rem_pio2+0x328>)
 8003f86:	f7fc f989 	bl	800029c <__adddf3>
 8003f8a:	f7fc fded 	bl	8000b68 <__aeabi_d2iz>
 8003f8e:	4605      	mov	r5, r0
 8003f90:	f7fc fad0 	bl	8000534 <__aeabi_i2d>
 8003f94:	a364      	add	r3, pc, #400	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2e0>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f9e:	f7fc fb33 	bl	8000608 <__aeabi_dmul>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	4639      	mov	r1, r7
 8003faa:	f7fc f975 	bl	8000298 <__aeabi_dsub>
 8003fae:	a360      	add	r3, pc, #384	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2e8>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	4682      	mov	sl, r0
 8003fb6:	468b      	mov	fp, r1
 8003fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fbc:	f7fc fb24 	bl	8000608 <__aeabi_dmul>
 8003fc0:	2d1f      	cmp	r5, #31
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	460f      	mov	r7, r1
 8003fc6:	dc0c      	bgt.n	8003fe2 <__ieee754_rem_pio2+0x19a>
 8003fc8:	1e6a      	subs	r2, r5, #1
 8003fca:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <__ieee754_rem_pio2+0x32c>)
 8003fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd0:	4543      	cmp	r3, r8
 8003fd2:	d006      	beq.n	8003fe2 <__ieee754_rem_pio2+0x19a>
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4650      	mov	r0, sl
 8003fda:	4659      	mov	r1, fp
 8003fdc:	f7fc f95c 	bl	8000298 <__aeabi_dsub>
 8003fe0:	e00e      	b.n	8004000 <__ieee754_rem_pio2+0x1b8>
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	463b      	mov	r3, r7
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	4659      	mov	r1, fp
 8003fea:	f7fc f955 	bl	8000298 <__aeabi_dsub>
 8003fee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003ff2:	9305      	str	r3, [sp, #20]
 8003ff4:	9a05      	ldr	r2, [sp, #20]
 8003ff6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	dc02      	bgt.n	8004006 <__ieee754_rem_pio2+0x1be>
 8004000:	e9c4 0100 	strd	r0, r1, [r4]
 8004004:	e039      	b.n	800407a <__ieee754_rem_pio2+0x232>
 8004006:	a34c      	add	r3, pc, #304	; (adr r3, 8004138 <__ieee754_rem_pio2+0x2f0>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004010:	f7fc fafa 	bl	8000608 <__aeabi_dmul>
 8004014:	4606      	mov	r6, r0
 8004016:	460f      	mov	r7, r1
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4650      	mov	r0, sl
 800401e:	4659      	mov	r1, fp
 8004020:	f7fc f93a 	bl	8000298 <__aeabi_dsub>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4680      	mov	r8, r0
 800402a:	4689      	mov	r9, r1
 800402c:	4650      	mov	r0, sl
 800402e:	4659      	mov	r1, fp
 8004030:	f7fc f932 	bl	8000298 <__aeabi_dsub>
 8004034:	4632      	mov	r2, r6
 8004036:	463b      	mov	r3, r7
 8004038:	f7fc f92e 	bl	8000298 <__aeabi_dsub>
 800403c:	a340      	add	r3, pc, #256	; (adr r3, 8004140 <__ieee754_rem_pio2+0x2f8>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	4606      	mov	r6, r0
 8004044:	460f      	mov	r7, r1
 8004046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800404a:	f7fc fadd 	bl	8000608 <__aeabi_dmul>
 800404e:	4632      	mov	r2, r6
 8004050:	463b      	mov	r3, r7
 8004052:	f7fc f921 	bl	8000298 <__aeabi_dsub>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4606      	mov	r6, r0
 800405c:	460f      	mov	r7, r1
 800405e:	4640      	mov	r0, r8
 8004060:	4649      	mov	r1, r9
 8004062:	f7fc f919 	bl	8000298 <__aeabi_dsub>
 8004066:	9a05      	ldr	r2, [sp, #20]
 8004068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b31      	cmp	r3, #49	; 0x31
 8004070:	dc20      	bgt.n	80040b4 <__ieee754_rem_pio2+0x26c>
 8004072:	e9c4 0100 	strd	r0, r1, [r4]
 8004076:	46c2      	mov	sl, r8
 8004078:	46cb      	mov	fp, r9
 800407a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800407e:	4650      	mov	r0, sl
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	4659      	mov	r1, fp
 8004086:	f7fc f907 	bl	8000298 <__aeabi_dsub>
 800408a:	463b      	mov	r3, r7
 800408c:	4632      	mov	r2, r6
 800408e:	f7fc f903 	bl	8000298 <__aeabi_dsub>
 8004092:	9b04      	ldr	r3, [sp, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800409a:	f6bf af11 	bge.w	8003ec0 <__ieee754_rem_pio2+0x78>
 800409e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80040a2:	6063      	str	r3, [r4, #4]
 80040a4:	f8c4 8000 	str.w	r8, [r4]
 80040a8:	60a0      	str	r0, [r4, #8]
 80040aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040ae:	60e3      	str	r3, [r4, #12]
 80040b0:	426d      	negs	r5, r5
 80040b2:	e705      	b.n	8003ec0 <__ieee754_rem_pio2+0x78>
 80040b4:	a326      	add	r3, pc, #152	; (adr r3, 8004150 <__ieee754_rem_pio2+0x308>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	f7fc faa3 	bl	8000608 <__aeabi_dmul>
 80040c2:	4606      	mov	r6, r0
 80040c4:	460f      	mov	r7, r1
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4640      	mov	r0, r8
 80040cc:	4649      	mov	r1, r9
 80040ce:	f7fc f8e3 	bl	8000298 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4682      	mov	sl, r0
 80040d8:	468b      	mov	fp, r1
 80040da:	4640      	mov	r0, r8
 80040dc:	4649      	mov	r1, r9
 80040de:	f7fc f8db 	bl	8000298 <__aeabi_dsub>
 80040e2:	4632      	mov	r2, r6
 80040e4:	463b      	mov	r3, r7
 80040e6:	f7fc f8d7 	bl	8000298 <__aeabi_dsub>
 80040ea:	a31b      	add	r3, pc, #108	; (adr r3, 8004158 <__ieee754_rem_pio2+0x310>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	4606      	mov	r6, r0
 80040f2:	460f      	mov	r7, r1
 80040f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f8:	f7fc fa86 	bl	8000608 <__aeabi_dmul>
 80040fc:	4632      	mov	r2, r6
 80040fe:	463b      	mov	r3, r7
 8004100:	f7fc f8ca 	bl	8000298 <__aeabi_dsub>
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	e764      	b.n	8003fd4 <__ieee754_rem_pio2+0x18c>
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <__ieee754_rem_pio2+0x330>)
 800410c:	4598      	cmp	r8, r3
 800410e:	dd35      	ble.n	800417c <__ieee754_rem_pio2+0x334>
 8004110:	ee10 2a10 	vmov	r2, s0
 8004114:	463b      	mov	r3, r7
 8004116:	4630      	mov	r0, r6
 8004118:	4639      	mov	r1, r7
 800411a:	f7fc f8bd 	bl	8000298 <__aeabi_dsub>
 800411e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004122:	e9c4 0100 	strd	r0, r1, [r4]
 8004126:	e6a1      	b.n	8003e6c <__ieee754_rem_pio2+0x24>
 8004128:	54400000 	.word	0x54400000
 800412c:	3ff921fb 	.word	0x3ff921fb
 8004130:	1a626331 	.word	0x1a626331
 8004134:	3dd0b461 	.word	0x3dd0b461
 8004138:	1a600000 	.word	0x1a600000
 800413c:	3dd0b461 	.word	0x3dd0b461
 8004140:	2e037073 	.word	0x2e037073
 8004144:	3ba3198a 	.word	0x3ba3198a
 8004148:	6dc9c883 	.word	0x6dc9c883
 800414c:	3fe45f30 	.word	0x3fe45f30
 8004150:	2e000000 	.word	0x2e000000
 8004154:	3ba3198a 	.word	0x3ba3198a
 8004158:	252049c1 	.word	0x252049c1
 800415c:	397b839a 	.word	0x397b839a
 8004160:	3fe921fb 	.word	0x3fe921fb
 8004164:	4002d97b 	.word	0x4002d97b
 8004168:	3ff921fb 	.word	0x3ff921fb
 800416c:	413921fb 	.word	0x413921fb
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	08007070 	.word	0x08007070
 8004178:	7fefffff 	.word	0x7fefffff
 800417c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004180:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004184:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004188:	4630      	mov	r0, r6
 800418a:	460f      	mov	r7, r1
 800418c:	f7fc fcec 	bl	8000b68 <__aeabi_d2iz>
 8004190:	f7fc f9d0 	bl	8000534 <__aeabi_i2d>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4630      	mov	r0, r6
 800419a:	4639      	mov	r1, r7
 800419c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041a0:	f7fc f87a 	bl	8000298 <__aeabi_dsub>
 80041a4:	2200      	movs	r2, #0
 80041a6:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <__ieee754_rem_pio2+0x3dc>)
 80041a8:	f7fc fa2e 	bl	8000608 <__aeabi_dmul>
 80041ac:	460f      	mov	r7, r1
 80041ae:	4606      	mov	r6, r0
 80041b0:	f7fc fcda 	bl	8000b68 <__aeabi_d2iz>
 80041b4:	f7fc f9be 	bl	8000534 <__aeabi_i2d>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4630      	mov	r0, r6
 80041be:	4639      	mov	r1, r7
 80041c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041c4:	f7fc f868 	bl	8000298 <__aeabi_dsub>
 80041c8:	2200      	movs	r2, #0
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <__ieee754_rem_pio2+0x3dc>)
 80041cc:	f7fc fa1c 	bl	8000608 <__aeabi_dmul>
 80041d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80041d8:	f04f 0803 	mov.w	r8, #3
 80041dc:	2600      	movs	r6, #0
 80041de:	2700      	movs	r7, #0
 80041e0:	4632      	mov	r2, r6
 80041e2:	463b      	mov	r3, r7
 80041e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80041e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80041ec:	f7fc fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80041f0:	b9b0      	cbnz	r0, 8004220 <__ieee754_rem_pio2+0x3d8>
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <__ieee754_rem_pio2+0x3e0>)
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2302      	movs	r3, #2
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	462a      	mov	r2, r5
 80041fc:	4643      	mov	r3, r8
 80041fe:	4621      	mov	r1, r4
 8004200:	a806      	add	r0, sp, #24
 8004202:	f000 f98d 	bl	8004520 <__kernel_rem_pio2>
 8004206:	9b04      	ldr	r3, [sp, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	4605      	mov	r5, r0
 800420c:	f6bf ae58 	bge.w	8003ec0 <__ieee754_rem_pio2+0x78>
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800421e:	e746      	b.n	80040ae <__ieee754_rem_pio2+0x266>
 8004220:	46d0      	mov	r8, sl
 8004222:	e7dd      	b.n	80041e0 <__ieee754_rem_pio2+0x398>
 8004224:	41700000 	.word	0x41700000
 8004228:	080070f0 	.word	0x080070f0

0800422c <__ieee754_sqrt>:
 800422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	4955      	ldr	r1, [pc, #340]	; (8004388 <__ieee754_sqrt+0x15c>)
 8004232:	ec55 4b10 	vmov	r4, r5, d0
 8004236:	43a9      	bics	r1, r5
 8004238:	462b      	mov	r3, r5
 800423a:	462a      	mov	r2, r5
 800423c:	d112      	bne.n	8004264 <__ieee754_sqrt+0x38>
 800423e:	ee10 2a10 	vmov	r2, s0
 8004242:	ee10 0a10 	vmov	r0, s0
 8004246:	4629      	mov	r1, r5
 8004248:	f7fc f9de 	bl	8000608 <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fc f822 	bl	800029c <__adddf3>
 8004258:	4604      	mov	r4, r0
 800425a:	460d      	mov	r5, r1
 800425c:	ec45 4b10 	vmov	d0, r4, r5
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004264:	2d00      	cmp	r5, #0
 8004266:	ee10 0a10 	vmov	r0, s0
 800426a:	4621      	mov	r1, r4
 800426c:	dc0f      	bgt.n	800428e <__ieee754_sqrt+0x62>
 800426e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004272:	4330      	orrs	r0, r6
 8004274:	d0f2      	beq.n	800425c <__ieee754_sqrt+0x30>
 8004276:	b155      	cbz	r5, 800428e <__ieee754_sqrt+0x62>
 8004278:	ee10 2a10 	vmov	r2, s0
 800427c:	4620      	mov	r0, r4
 800427e:	4629      	mov	r1, r5
 8004280:	f7fc f80a 	bl	8000298 <__aeabi_dsub>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	f7fc fae8 	bl	800085c <__aeabi_ddiv>
 800428c:	e7e4      	b.n	8004258 <__ieee754_sqrt+0x2c>
 800428e:	151b      	asrs	r3, r3, #20
 8004290:	d073      	beq.n	800437a <__ieee754_sqrt+0x14e>
 8004292:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004296:	07dd      	lsls	r5, r3, #31
 8004298:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800429c:	bf48      	it	mi
 800429e:	0fc8      	lsrmi	r0, r1, #31
 80042a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80042a4:	bf44      	itt	mi
 80042a6:	0049      	lslmi	r1, r1, #1
 80042a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80042ac:	2500      	movs	r5, #0
 80042ae:	1058      	asrs	r0, r3, #1
 80042b0:	0fcb      	lsrs	r3, r1, #31
 80042b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80042b6:	0049      	lsls	r1, r1, #1
 80042b8:	2316      	movs	r3, #22
 80042ba:	462c      	mov	r4, r5
 80042bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80042c0:	19a7      	adds	r7, r4, r6
 80042c2:	4297      	cmp	r7, r2
 80042c4:	bfde      	ittt	le
 80042c6:	19bc      	addle	r4, r7, r6
 80042c8:	1bd2      	suble	r2, r2, r7
 80042ca:	19ad      	addle	r5, r5, r6
 80042cc:	0fcf      	lsrs	r7, r1, #31
 80042ce:	3b01      	subs	r3, #1
 80042d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80042d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80042d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80042dc:	d1f0      	bne.n	80042c0 <__ieee754_sqrt+0x94>
 80042de:	f04f 0c20 	mov.w	ip, #32
 80042e2:	469e      	mov	lr, r3
 80042e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80042e8:	42a2      	cmp	r2, r4
 80042ea:	eb06 070e 	add.w	r7, r6, lr
 80042ee:	dc02      	bgt.n	80042f6 <__ieee754_sqrt+0xca>
 80042f0:	d112      	bne.n	8004318 <__ieee754_sqrt+0xec>
 80042f2:	428f      	cmp	r7, r1
 80042f4:	d810      	bhi.n	8004318 <__ieee754_sqrt+0xec>
 80042f6:	2f00      	cmp	r7, #0
 80042f8:	eb07 0e06 	add.w	lr, r7, r6
 80042fc:	da42      	bge.n	8004384 <__ieee754_sqrt+0x158>
 80042fe:	f1be 0f00 	cmp.w	lr, #0
 8004302:	db3f      	blt.n	8004384 <__ieee754_sqrt+0x158>
 8004304:	f104 0801 	add.w	r8, r4, #1
 8004308:	1b12      	subs	r2, r2, r4
 800430a:	428f      	cmp	r7, r1
 800430c:	bf88      	it	hi
 800430e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004312:	1bc9      	subs	r1, r1, r7
 8004314:	4433      	add	r3, r6
 8004316:	4644      	mov	r4, r8
 8004318:	0052      	lsls	r2, r2, #1
 800431a:	f1bc 0c01 	subs.w	ip, ip, #1
 800431e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004322:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004326:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800432a:	d1dd      	bne.n	80042e8 <__ieee754_sqrt+0xbc>
 800432c:	430a      	orrs	r2, r1
 800432e:	d006      	beq.n	800433e <__ieee754_sqrt+0x112>
 8004330:	1c5c      	adds	r4, r3, #1
 8004332:	bf13      	iteet	ne
 8004334:	3301      	addne	r3, #1
 8004336:	3501      	addeq	r5, #1
 8004338:	4663      	moveq	r3, ip
 800433a:	f023 0301 	bicne.w	r3, r3, #1
 800433e:	106a      	asrs	r2, r5, #1
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	07e9      	lsls	r1, r5, #31
 8004344:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004348:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800434c:	bf48      	it	mi
 800434e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004352:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004356:	461c      	mov	r4, r3
 8004358:	e780      	b.n	800425c <__ieee754_sqrt+0x30>
 800435a:	0aca      	lsrs	r2, r1, #11
 800435c:	3815      	subs	r0, #21
 800435e:	0549      	lsls	r1, r1, #21
 8004360:	2a00      	cmp	r2, #0
 8004362:	d0fa      	beq.n	800435a <__ieee754_sqrt+0x12e>
 8004364:	02d6      	lsls	r6, r2, #11
 8004366:	d50a      	bpl.n	800437e <__ieee754_sqrt+0x152>
 8004368:	f1c3 0420 	rsb	r4, r3, #32
 800436c:	fa21 f404 	lsr.w	r4, r1, r4
 8004370:	1e5d      	subs	r5, r3, #1
 8004372:	4099      	lsls	r1, r3
 8004374:	4322      	orrs	r2, r4
 8004376:	1b43      	subs	r3, r0, r5
 8004378:	e78b      	b.n	8004292 <__ieee754_sqrt+0x66>
 800437a:	4618      	mov	r0, r3
 800437c:	e7f0      	b.n	8004360 <__ieee754_sqrt+0x134>
 800437e:	0052      	lsls	r2, r2, #1
 8004380:	3301      	adds	r3, #1
 8004382:	e7ef      	b.n	8004364 <__ieee754_sqrt+0x138>
 8004384:	46a0      	mov	r8, r4
 8004386:	e7bf      	b.n	8004308 <__ieee754_sqrt+0xdc>
 8004388:	7ff00000 	.word	0x7ff00000
 800438c:	00000000 	.word	0x00000000

08004390 <__kernel_cos>:
 8004390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	ec59 8b10 	vmov	r8, r9, d0
 8004398:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800439c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80043a0:	ed2d 8b02 	vpush	{d8}
 80043a4:	eeb0 8a41 	vmov.f32	s16, s2
 80043a8:	eef0 8a61 	vmov.f32	s17, s3
 80043ac:	da07      	bge.n	80043be <__kernel_cos+0x2e>
 80043ae:	ee10 0a10 	vmov	r0, s0
 80043b2:	4649      	mov	r1, r9
 80043b4:	f7fc fbd8 	bl	8000b68 <__aeabi_d2iz>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	f000 8089 	beq.w	80044d0 <__kernel_cos+0x140>
 80043be:	4642      	mov	r2, r8
 80043c0:	464b      	mov	r3, r9
 80043c2:	4640      	mov	r0, r8
 80043c4:	4649      	mov	r1, r9
 80043c6:	f7fc f91f 	bl	8000608 <__aeabi_dmul>
 80043ca:	2200      	movs	r2, #0
 80043cc:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <__kernel_cos+0x178>)
 80043ce:	4604      	mov	r4, r0
 80043d0:	460d      	mov	r5, r1
 80043d2:	f7fc f919 	bl	8000608 <__aeabi_dmul>
 80043d6:	a340      	add	r3, pc, #256	; (adr r3, 80044d8 <__kernel_cos+0x148>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	4682      	mov	sl, r0
 80043de:	468b      	mov	fp, r1
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fc f910 	bl	8000608 <__aeabi_dmul>
 80043e8:	a33d      	add	r3, pc, #244	; (adr r3, 80044e0 <__kernel_cos+0x150>)
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f7fb ff55 	bl	800029c <__adddf3>
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	f7fc f907 	bl	8000608 <__aeabi_dmul>
 80043fa:	a33b      	add	r3, pc, #236	; (adr r3, 80044e8 <__kernel_cos+0x158>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fb ff4a 	bl	8000298 <__aeabi_dsub>
 8004404:	4622      	mov	r2, r4
 8004406:	462b      	mov	r3, r5
 8004408:	f7fc f8fe 	bl	8000608 <__aeabi_dmul>
 800440c:	a338      	add	r3, pc, #224	; (adr r3, 80044f0 <__kernel_cos+0x160>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fb ff43 	bl	800029c <__adddf3>
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	f7fc f8f5 	bl	8000608 <__aeabi_dmul>
 800441e:	a336      	add	r3, pc, #216	; (adr r3, 80044f8 <__kernel_cos+0x168>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fb ff38 	bl	8000298 <__aeabi_dsub>
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	f7fc f8ec 	bl	8000608 <__aeabi_dmul>
 8004430:	a333      	add	r3, pc, #204	; (adr r3, 8004500 <__kernel_cos+0x170>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fb ff31 	bl	800029c <__adddf3>
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	f7fc f8e3 	bl	8000608 <__aeabi_dmul>
 8004442:	4622      	mov	r2, r4
 8004444:	462b      	mov	r3, r5
 8004446:	f7fc f8df 	bl	8000608 <__aeabi_dmul>
 800444a:	ec53 2b18 	vmov	r2, r3, d8
 800444e:	4604      	mov	r4, r0
 8004450:	460d      	mov	r5, r1
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	f7fc f8d7 	bl	8000608 <__aeabi_dmul>
 800445a:	460b      	mov	r3, r1
 800445c:	4602      	mov	r2, r0
 800445e:	4629      	mov	r1, r5
 8004460:	4620      	mov	r0, r4
 8004462:	f7fb ff19 	bl	8000298 <__aeabi_dsub>
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <__kernel_cos+0x17c>)
 8004468:	429e      	cmp	r6, r3
 800446a:	4680      	mov	r8, r0
 800446c:	4689      	mov	r9, r1
 800446e:	dc11      	bgt.n	8004494 <__kernel_cos+0x104>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4650      	mov	r0, sl
 8004476:	4659      	mov	r1, fp
 8004478:	f7fb ff0e 	bl	8000298 <__aeabi_dsub>
 800447c:	460b      	mov	r3, r1
 800447e:	4924      	ldr	r1, [pc, #144]	; (8004510 <__kernel_cos+0x180>)
 8004480:	4602      	mov	r2, r0
 8004482:	2000      	movs	r0, #0
 8004484:	f7fb ff08 	bl	8000298 <__aeabi_dsub>
 8004488:	ecbd 8b02 	vpop	{d8}
 800448c:	ec41 0b10 	vmov	d0, r0, r1
 8004490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <__kernel_cos+0x184>)
 8004496:	491e      	ldr	r1, [pc, #120]	; (8004510 <__kernel_cos+0x180>)
 8004498:	429e      	cmp	r6, r3
 800449a:	bfcc      	ite	gt
 800449c:	4d1e      	ldrgt	r5, [pc, #120]	; (8004518 <__kernel_cos+0x188>)
 800449e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80044a2:	2400      	movs	r4, #0
 80044a4:	4622      	mov	r2, r4
 80044a6:	462b      	mov	r3, r5
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7fb fef5 	bl	8000298 <__aeabi_dsub>
 80044ae:	4622      	mov	r2, r4
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	462b      	mov	r3, r5
 80044b6:	4650      	mov	r0, sl
 80044b8:	4659      	mov	r1, fp
 80044ba:	f7fb feed 	bl	8000298 <__aeabi_dsub>
 80044be:	4642      	mov	r2, r8
 80044c0:	464b      	mov	r3, r9
 80044c2:	f7fb fee9 	bl	8000298 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4630      	mov	r0, r6
 80044cc:	4639      	mov	r1, r7
 80044ce:	e7d9      	b.n	8004484 <__kernel_cos+0xf4>
 80044d0:	2000      	movs	r0, #0
 80044d2:	490f      	ldr	r1, [pc, #60]	; (8004510 <__kernel_cos+0x180>)
 80044d4:	e7d8      	b.n	8004488 <__kernel_cos+0xf8>
 80044d6:	bf00      	nop
 80044d8:	be8838d4 	.word	0xbe8838d4
 80044dc:	bda8fae9 	.word	0xbda8fae9
 80044e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80044e4:	3e21ee9e 	.word	0x3e21ee9e
 80044e8:	809c52ad 	.word	0x809c52ad
 80044ec:	3e927e4f 	.word	0x3e927e4f
 80044f0:	19cb1590 	.word	0x19cb1590
 80044f4:	3efa01a0 	.word	0x3efa01a0
 80044f8:	16c15177 	.word	0x16c15177
 80044fc:	3f56c16c 	.word	0x3f56c16c
 8004500:	5555554c 	.word	0x5555554c
 8004504:	3fa55555 	.word	0x3fa55555
 8004508:	3fe00000 	.word	0x3fe00000
 800450c:	3fd33332 	.word	0x3fd33332
 8004510:	3ff00000 	.word	0x3ff00000
 8004514:	3fe90000 	.word	0x3fe90000
 8004518:	3fd20000 	.word	0x3fd20000
 800451c:	00000000 	.word	0x00000000

08004520 <__kernel_rem_pio2>:
 8004520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	ed2d 8b02 	vpush	{d8}
 8004528:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800452c:	1ed4      	subs	r4, r2, #3
 800452e:	9308      	str	r3, [sp, #32]
 8004530:	9101      	str	r1, [sp, #4]
 8004532:	4bc5      	ldr	r3, [pc, #788]	; (8004848 <__kernel_rem_pio2+0x328>)
 8004534:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004536:	9009      	str	r0, [sp, #36]	; 0x24
 8004538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	9b08      	ldr	r3, [sp, #32]
 8004540:	3b01      	subs	r3, #1
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	2318      	movs	r3, #24
 8004546:	fb94 f4f3 	sdiv	r4, r4, r3
 800454a:	f06f 0317 	mvn.w	r3, #23
 800454e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004552:	fb04 3303 	mla	r3, r4, r3, r3
 8004556:	eb03 0a02 	add.w	sl, r3, r2
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	9a07      	ldr	r2, [sp, #28]
 800455e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004838 <__kernel_rem_pio2+0x318>
 8004562:	eb03 0802 	add.w	r8, r3, r2
 8004566:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004568:	1aa7      	subs	r7, r4, r2
 800456a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800456e:	ae22      	add	r6, sp, #136	; 0x88
 8004570:	2500      	movs	r5, #0
 8004572:	4545      	cmp	r5, r8
 8004574:	dd13      	ble.n	800459e <__kernel_rem_pio2+0x7e>
 8004576:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004838 <__kernel_rem_pio2+0x318>
 800457a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800457e:	2600      	movs	r6, #0
 8004580:	9b04      	ldr	r3, [sp, #16]
 8004582:	429e      	cmp	r6, r3
 8004584:	dc32      	bgt.n	80045ec <__kernel_rem_pio2+0xcc>
 8004586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004588:	9302      	str	r3, [sp, #8]
 800458a:	9b08      	ldr	r3, [sp, #32]
 800458c:	199d      	adds	r5, r3, r6
 800458e:	ab22      	add	r3, sp, #136	; 0x88
 8004590:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004594:	9306      	str	r3, [sp, #24]
 8004596:	ec59 8b18 	vmov	r8, r9, d8
 800459a:	2700      	movs	r7, #0
 800459c:	e01f      	b.n	80045de <__kernel_rem_pio2+0xbe>
 800459e:	42ef      	cmn	r7, r5
 80045a0:	d407      	bmi.n	80045b2 <__kernel_rem_pio2+0x92>
 80045a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80045a6:	f7fb ffc5 	bl	8000534 <__aeabi_i2d>
 80045aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80045ae:	3501      	adds	r5, #1
 80045b0:	e7df      	b.n	8004572 <__kernel_rem_pio2+0x52>
 80045b2:	ec51 0b18 	vmov	r0, r1, d8
 80045b6:	e7f8      	b.n	80045aa <__kernel_rem_pio2+0x8a>
 80045b8:	9906      	ldr	r1, [sp, #24]
 80045ba:	9d02      	ldr	r5, [sp, #8]
 80045bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80045c0:	9106      	str	r1, [sp, #24]
 80045c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80045c6:	9502      	str	r5, [sp, #8]
 80045c8:	f7fc f81e 	bl	8000608 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4640      	mov	r0, r8
 80045d2:	4649      	mov	r1, r9
 80045d4:	f7fb fe62 	bl	800029c <__adddf3>
 80045d8:	3701      	adds	r7, #1
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	9b07      	ldr	r3, [sp, #28]
 80045e0:	429f      	cmp	r7, r3
 80045e2:	dde9      	ble.n	80045b8 <__kernel_rem_pio2+0x98>
 80045e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7c9      	b.n	8004580 <__kernel_rem_pio2+0x60>
 80045ec:	9b04      	ldr	r3, [sp, #16]
 80045ee:	aa0e      	add	r2, sp, #56	; 0x38
 80045f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80045f4:	930c      	str	r3, [sp, #48]	; 0x30
 80045f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80045f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80045fc:	9c04      	ldr	r4, [sp, #16]
 80045fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004600:	ab9a      	add	r3, sp, #616	; 0x268
 8004602:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004606:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800460a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800460e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004612:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004616:	ab9a      	add	r3, sp, #616	; 0x268
 8004618:	445b      	add	r3, fp
 800461a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800461e:	2500      	movs	r5, #0
 8004620:	1b63      	subs	r3, r4, r5
 8004622:	2b00      	cmp	r3, #0
 8004624:	dc78      	bgt.n	8004718 <__kernel_rem_pio2+0x1f8>
 8004626:	4650      	mov	r0, sl
 8004628:	ec49 8b10 	vmov	d0, r8, r9
 800462c:	f000 fc04 	bl	8004e38 <scalbn>
 8004630:	ec57 6b10 	vmov	r6, r7, d0
 8004634:	2200      	movs	r2, #0
 8004636:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800463a:	ee10 0a10 	vmov	r0, s0
 800463e:	4639      	mov	r1, r7
 8004640:	f7fb ffe2 	bl	8000608 <__aeabi_dmul>
 8004644:	ec41 0b10 	vmov	d0, r0, r1
 8004648:	f000 fb6e 	bl	8004d28 <floor>
 800464c:	2200      	movs	r2, #0
 800464e:	ec51 0b10 	vmov	r0, r1, d0
 8004652:	4b7e      	ldr	r3, [pc, #504]	; (800484c <__kernel_rem_pio2+0x32c>)
 8004654:	f7fb ffd8 	bl	8000608 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4630      	mov	r0, r6
 800465e:	4639      	mov	r1, r7
 8004660:	f7fb fe1a 	bl	8000298 <__aeabi_dsub>
 8004664:	460f      	mov	r7, r1
 8004666:	4606      	mov	r6, r0
 8004668:	f7fc fa7e 	bl	8000b68 <__aeabi_d2iz>
 800466c:	9006      	str	r0, [sp, #24]
 800466e:	f7fb ff61 	bl	8000534 <__aeabi_i2d>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fb fe0d 	bl	8000298 <__aeabi_dsub>
 800467e:	f1ba 0f00 	cmp.w	sl, #0
 8004682:	4606      	mov	r6, r0
 8004684:	460f      	mov	r7, r1
 8004686:	dd6c      	ble.n	8004762 <__kernel_rem_pio2+0x242>
 8004688:	1e62      	subs	r2, r4, #1
 800468a:	ab0e      	add	r3, sp, #56	; 0x38
 800468c:	f1ca 0118 	rsb	r1, sl, #24
 8004690:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004694:	9d06      	ldr	r5, [sp, #24]
 8004696:	fa40 f301 	asr.w	r3, r0, r1
 800469a:	441d      	add	r5, r3
 800469c:	408b      	lsls	r3, r1
 800469e:	1ac0      	subs	r0, r0, r3
 80046a0:	ab0e      	add	r3, sp, #56	; 0x38
 80046a2:	9506      	str	r5, [sp, #24]
 80046a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80046a8:	f1ca 0317 	rsb	r3, sl, #23
 80046ac:	fa40 f303 	asr.w	r3, r0, r3
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	9b02      	ldr	r3, [sp, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	dd62      	ble.n	800477e <__kernel_rem_pio2+0x25e>
 80046b8:	9b06      	ldr	r3, [sp, #24]
 80046ba:	2200      	movs	r2, #0
 80046bc:	3301      	adds	r3, #1
 80046be:	9306      	str	r3, [sp, #24]
 80046c0:	4615      	mov	r5, r2
 80046c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80046c6:	4294      	cmp	r4, r2
 80046c8:	f300 8095 	bgt.w	80047f6 <__kernel_rem_pio2+0x2d6>
 80046cc:	f1ba 0f00 	cmp.w	sl, #0
 80046d0:	dd07      	ble.n	80046e2 <__kernel_rem_pio2+0x1c2>
 80046d2:	f1ba 0f01 	cmp.w	sl, #1
 80046d6:	f000 80a2 	beq.w	800481e <__kernel_rem_pio2+0x2fe>
 80046da:	f1ba 0f02 	cmp.w	sl, #2
 80046de:	f000 80c1 	beq.w	8004864 <__kernel_rem_pio2+0x344>
 80046e2:	9b02      	ldr	r3, [sp, #8]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d14a      	bne.n	800477e <__kernel_rem_pio2+0x25e>
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	2000      	movs	r0, #0
 80046ee:	4958      	ldr	r1, [pc, #352]	; (8004850 <__kernel_rem_pio2+0x330>)
 80046f0:	f7fb fdd2 	bl	8000298 <__aeabi_dsub>
 80046f4:	4606      	mov	r6, r0
 80046f6:	460f      	mov	r7, r1
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	d040      	beq.n	800477e <__kernel_rem_pio2+0x25e>
 80046fc:	4650      	mov	r0, sl
 80046fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004840 <__kernel_rem_pio2+0x320>
 8004702:	f000 fb99 	bl	8004e38 <scalbn>
 8004706:	4630      	mov	r0, r6
 8004708:	4639      	mov	r1, r7
 800470a:	ec53 2b10 	vmov	r2, r3, d0
 800470e:	f7fb fdc3 	bl	8000298 <__aeabi_dsub>
 8004712:	4606      	mov	r6, r0
 8004714:	460f      	mov	r7, r1
 8004716:	e032      	b.n	800477e <__kernel_rem_pio2+0x25e>
 8004718:	2200      	movs	r2, #0
 800471a:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <__kernel_rem_pio2+0x334>)
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fb ff72 	bl	8000608 <__aeabi_dmul>
 8004724:	f7fc fa20 	bl	8000b68 <__aeabi_d2iz>
 8004728:	f7fb ff04 	bl	8000534 <__aeabi_i2d>
 800472c:	2200      	movs	r2, #0
 800472e:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <__kernel_rem_pio2+0x338>)
 8004730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004734:	f7fb ff68 	bl	8000608 <__aeabi_dmul>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f7fb fdaa 	bl	8000298 <__aeabi_dsub>
 8004744:	f7fc fa10 	bl	8000b68 <__aeabi_d2iz>
 8004748:	ab0e      	add	r3, sp, #56	; 0x38
 800474a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800474e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004756:	f7fb fda1 	bl	800029c <__adddf3>
 800475a:	3501      	adds	r5, #1
 800475c:	4680      	mov	r8, r0
 800475e:	4689      	mov	r9, r1
 8004760:	e75e      	b.n	8004620 <__kernel_rem_pio2+0x100>
 8004762:	d105      	bne.n	8004770 <__kernel_rem_pio2+0x250>
 8004764:	1e63      	subs	r3, r4, #1
 8004766:	aa0e      	add	r2, sp, #56	; 0x38
 8004768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800476c:	15c3      	asrs	r3, r0, #23
 800476e:	e79f      	b.n	80046b0 <__kernel_rem_pio2+0x190>
 8004770:	2200      	movs	r2, #0
 8004772:	4b3a      	ldr	r3, [pc, #232]	; (800485c <__kernel_rem_pio2+0x33c>)
 8004774:	f7fc f9ce 	bl	8000b14 <__aeabi_dcmpge>
 8004778:	2800      	cmp	r0, #0
 800477a:	d139      	bne.n	80047f0 <__kernel_rem_pio2+0x2d0>
 800477c:	9002      	str	r0, [sp, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	2300      	movs	r3, #0
 8004782:	4630      	mov	r0, r6
 8004784:	4639      	mov	r1, r7
 8004786:	f7fc f9a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800478a:	2800      	cmp	r0, #0
 800478c:	f000 80c7 	beq.w	800491e <__kernel_rem_pio2+0x3fe>
 8004790:	1e65      	subs	r5, r4, #1
 8004792:	462b      	mov	r3, r5
 8004794:	2200      	movs	r2, #0
 8004796:	9904      	ldr	r1, [sp, #16]
 8004798:	428b      	cmp	r3, r1
 800479a:	da6a      	bge.n	8004872 <__kernel_rem_pio2+0x352>
 800479c:	2a00      	cmp	r2, #0
 800479e:	f000 8088 	beq.w	80048b2 <__kernel_rem_pio2+0x392>
 80047a2:	ab0e      	add	r3, sp, #56	; 0x38
 80047a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80047a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80b4 	beq.w	800491a <__kernel_rem_pio2+0x3fa>
 80047b2:	4650      	mov	r0, sl
 80047b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004840 <__kernel_rem_pio2+0x320>
 80047b8:	f000 fb3e 	bl	8004e38 <scalbn>
 80047bc:	00ec      	lsls	r4, r5, #3
 80047be:	ab72      	add	r3, sp, #456	; 0x1c8
 80047c0:	191e      	adds	r6, r3, r4
 80047c2:	ec59 8b10 	vmov	r8, r9, d0
 80047c6:	f106 0a08 	add.w	sl, r6, #8
 80047ca:	462f      	mov	r7, r5
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	f280 80df 	bge.w	8004990 <__kernel_rem_pio2+0x470>
 80047d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004838 <__kernel_rem_pio2+0x318>
 80047d6:	f04f 0a00 	mov.w	sl, #0
 80047da:	eba5 030a 	sub.w	r3, r5, sl
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f2c0 810a 	blt.w	80049f8 <__kernel_rem_pio2+0x4d8>
 80047e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004860 <__kernel_rem_pio2+0x340>
 80047e8:	ec59 8b18 	vmov	r8, r9, d8
 80047ec:	2700      	movs	r7, #0
 80047ee:	e0f5      	b.n	80049dc <__kernel_rem_pio2+0x4bc>
 80047f0:	2302      	movs	r3, #2
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	e760      	b.n	80046b8 <__kernel_rem_pio2+0x198>
 80047f6:	ab0e      	add	r3, sp, #56	; 0x38
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	b94d      	cbnz	r5, 8004812 <__kernel_rem_pio2+0x2f2>
 80047fe:	b12b      	cbz	r3, 800480c <__kernel_rem_pio2+0x2ec>
 8004800:	a80e      	add	r0, sp, #56	; 0x38
 8004802:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004806:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800480a:	2301      	movs	r3, #1
 800480c:	3201      	adds	r2, #1
 800480e:	461d      	mov	r5, r3
 8004810:	e759      	b.n	80046c6 <__kernel_rem_pio2+0x1a6>
 8004812:	a80e      	add	r0, sp, #56	; 0x38
 8004814:	1acb      	subs	r3, r1, r3
 8004816:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800481a:	462b      	mov	r3, r5
 800481c:	e7f6      	b.n	800480c <__kernel_rem_pio2+0x2ec>
 800481e:	1e62      	subs	r2, r4, #1
 8004820:	ab0e      	add	r3, sp, #56	; 0x38
 8004822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004826:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800482a:	a90e      	add	r1, sp, #56	; 0x38
 800482c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004830:	e757      	b.n	80046e2 <__kernel_rem_pio2+0x1c2>
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
	...
 8004844:	3ff00000 	.word	0x3ff00000
 8004848:	08007238 	.word	0x08007238
 800484c:	40200000 	.word	0x40200000
 8004850:	3ff00000 	.word	0x3ff00000
 8004854:	3e700000 	.word	0x3e700000
 8004858:	41700000 	.word	0x41700000
 800485c:	3fe00000 	.word	0x3fe00000
 8004860:	080071f8 	.word	0x080071f8
 8004864:	1e62      	subs	r2, r4, #1
 8004866:	ab0e      	add	r3, sp, #56	; 0x38
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004870:	e7db      	b.n	800482a <__kernel_rem_pio2+0x30a>
 8004872:	a90e      	add	r1, sp, #56	; 0x38
 8004874:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004878:	3b01      	subs	r3, #1
 800487a:	430a      	orrs	r2, r1
 800487c:	e78b      	b.n	8004796 <__kernel_rem_pio2+0x276>
 800487e:	3301      	adds	r3, #1
 8004880:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004884:	2900      	cmp	r1, #0
 8004886:	d0fa      	beq.n	800487e <__kernel_rem_pio2+0x35e>
 8004888:	9a08      	ldr	r2, [sp, #32]
 800488a:	4422      	add	r2, r4
 800488c:	00d2      	lsls	r2, r2, #3
 800488e:	a922      	add	r1, sp, #136	; 0x88
 8004890:	18e3      	adds	r3, r4, r3
 8004892:	9206      	str	r2, [sp, #24]
 8004894:	440a      	add	r2, r1
 8004896:	9302      	str	r3, [sp, #8]
 8004898:	f10b 0108 	add.w	r1, fp, #8
 800489c:	f102 0308 	add.w	r3, r2, #8
 80048a0:	1c66      	adds	r6, r4, #1
 80048a2:	910a      	str	r1, [sp, #40]	; 0x28
 80048a4:	2500      	movs	r5, #0
 80048a6:	930d      	str	r3, [sp, #52]	; 0x34
 80048a8:	9b02      	ldr	r3, [sp, #8]
 80048aa:	42b3      	cmp	r3, r6
 80048ac:	da04      	bge.n	80048b8 <__kernel_rem_pio2+0x398>
 80048ae:	461c      	mov	r4, r3
 80048b0:	e6a6      	b.n	8004600 <__kernel_rem_pio2+0xe0>
 80048b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048b4:	2301      	movs	r3, #1
 80048b6:	e7e3      	b.n	8004880 <__kernel_rem_pio2+0x360>
 80048b8:	9b06      	ldr	r3, [sp, #24]
 80048ba:	18ef      	adds	r7, r5, r3
 80048bc:	ab22      	add	r3, sp, #136	; 0x88
 80048be:	441f      	add	r7, r3
 80048c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048c6:	f7fb fe35 	bl	8000534 <__aeabi_i2d>
 80048ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048cc:	461c      	mov	r4, r3
 80048ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048d0:	e9c7 0100 	strd	r0, r1, [r7]
 80048d4:	eb03 0b05 	add.w	fp, r3, r5
 80048d8:	2700      	movs	r7, #0
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f04f 0900 	mov.w	r9, #0
 80048e2:	9b07      	ldr	r3, [sp, #28]
 80048e4:	429f      	cmp	r7, r3
 80048e6:	dd08      	ble.n	80048fa <__kernel_rem_pio2+0x3da>
 80048e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ea:	aa72      	add	r2, sp, #456	; 0x1c8
 80048ec:	18eb      	adds	r3, r5, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80048f4:	3601      	adds	r6, #1
 80048f6:	3508      	adds	r5, #8
 80048f8:	e7d6      	b.n	80048a8 <__kernel_rem_pio2+0x388>
 80048fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80048fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004902:	f7fb fe81 	bl	8000608 <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fb fcc5 	bl	800029c <__adddf3>
 8004912:	3701      	adds	r7, #1
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
 8004918:	e7e3      	b.n	80048e2 <__kernel_rem_pio2+0x3c2>
 800491a:	3d01      	subs	r5, #1
 800491c:	e741      	b.n	80047a2 <__kernel_rem_pio2+0x282>
 800491e:	f1ca 0000 	rsb	r0, sl, #0
 8004922:	ec47 6b10 	vmov	d0, r6, r7
 8004926:	f000 fa87 	bl	8004e38 <scalbn>
 800492a:	ec57 6b10 	vmov	r6, r7, d0
 800492e:	2200      	movs	r2, #0
 8004930:	4b99      	ldr	r3, [pc, #612]	; (8004b98 <__kernel_rem_pio2+0x678>)
 8004932:	ee10 0a10 	vmov	r0, s0
 8004936:	4639      	mov	r1, r7
 8004938:	f7fc f8ec 	bl	8000b14 <__aeabi_dcmpge>
 800493c:	b1f8      	cbz	r0, 800497e <__kernel_rem_pio2+0x45e>
 800493e:	2200      	movs	r2, #0
 8004940:	4b96      	ldr	r3, [pc, #600]	; (8004b9c <__kernel_rem_pio2+0x67c>)
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fb fe5f 	bl	8000608 <__aeabi_dmul>
 800494a:	f7fc f90d 	bl	8000b68 <__aeabi_d2iz>
 800494e:	4680      	mov	r8, r0
 8004950:	f7fb fdf0 	bl	8000534 <__aeabi_i2d>
 8004954:	2200      	movs	r2, #0
 8004956:	4b90      	ldr	r3, [pc, #576]	; (8004b98 <__kernel_rem_pio2+0x678>)
 8004958:	f7fb fe56 	bl	8000608 <__aeabi_dmul>
 800495c:	460b      	mov	r3, r1
 800495e:	4602      	mov	r2, r0
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	f7fb fc98 	bl	8000298 <__aeabi_dsub>
 8004968:	f7fc f8fe 	bl	8000b68 <__aeabi_d2iz>
 800496c:	1c65      	adds	r5, r4, #1
 800496e:	ab0e      	add	r3, sp, #56	; 0x38
 8004970:	f10a 0a18 	add.w	sl, sl, #24
 8004974:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004978:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800497c:	e719      	b.n	80047b2 <__kernel_rem_pio2+0x292>
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	f7fc f8f1 	bl	8000b68 <__aeabi_d2iz>
 8004986:	ab0e      	add	r3, sp, #56	; 0x38
 8004988:	4625      	mov	r5, r4
 800498a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800498e:	e710      	b.n	80047b2 <__kernel_rem_pio2+0x292>
 8004990:	ab0e      	add	r3, sp, #56	; 0x38
 8004992:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004996:	f7fb fdcd 	bl	8000534 <__aeabi_i2d>
 800499a:	4642      	mov	r2, r8
 800499c:	464b      	mov	r3, r9
 800499e:	f7fb fe33 	bl	8000608 <__aeabi_dmul>
 80049a2:	2200      	movs	r2, #0
 80049a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80049a8:	4b7c      	ldr	r3, [pc, #496]	; (8004b9c <__kernel_rem_pio2+0x67c>)
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fb fe2b 	bl	8000608 <__aeabi_dmul>
 80049b2:	3f01      	subs	r7, #1
 80049b4:	4680      	mov	r8, r0
 80049b6:	4689      	mov	r9, r1
 80049b8:	e708      	b.n	80047cc <__kernel_rem_pio2+0x2ac>
 80049ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80049c6:	f7fb fe1f 	bl	8000608 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4640      	mov	r0, r8
 80049d0:	4649      	mov	r1, r9
 80049d2:	f7fb fc63 	bl	800029c <__adddf3>
 80049d6:	3701      	adds	r7, #1
 80049d8:	4680      	mov	r8, r0
 80049da:	4689      	mov	r9, r1
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	429f      	cmp	r7, r3
 80049e0:	dc01      	bgt.n	80049e6 <__kernel_rem_pio2+0x4c6>
 80049e2:	45ba      	cmp	sl, r7
 80049e4:	dae9      	bge.n	80049ba <__kernel_rem_pio2+0x49a>
 80049e6:	ab4a      	add	r3, sp, #296	; 0x128
 80049e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049ec:	e9c3 8900 	strd	r8, r9, [r3]
 80049f0:	f10a 0a01 	add.w	sl, sl, #1
 80049f4:	3e08      	subs	r6, #8
 80049f6:	e6f0      	b.n	80047da <__kernel_rem_pio2+0x2ba>
 80049f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d85b      	bhi.n	8004ab6 <__kernel_rem_pio2+0x596>
 80049fe:	e8df f003 	tbb	[pc, r3]
 8004a02:	264a      	.short	0x264a
 8004a04:	0226      	.short	0x0226
 8004a06:	ab9a      	add	r3, sp, #616	; 0x268
 8004a08:	441c      	add	r4, r3
 8004a0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004a0e:	46a2      	mov	sl, r4
 8004a10:	46ab      	mov	fp, r5
 8004a12:	f1bb 0f00 	cmp.w	fp, #0
 8004a16:	dc6c      	bgt.n	8004af2 <__kernel_rem_pio2+0x5d2>
 8004a18:	46a2      	mov	sl, r4
 8004a1a:	46ab      	mov	fp, r5
 8004a1c:	f1bb 0f01 	cmp.w	fp, #1
 8004a20:	f300 8086 	bgt.w	8004b30 <__kernel_rem_pio2+0x610>
 8004a24:	2000      	movs	r0, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	2d01      	cmp	r5, #1
 8004a2a:	f300 80a0 	bgt.w	8004b6e <__kernel_rem_pio2+0x64e>
 8004a2e:	9b02      	ldr	r3, [sp, #8]
 8004a30:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004a34:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 809e 	bne.w	8004b7a <__kernel_rem_pio2+0x65a>
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	e9c3 7800 	strd	r7, r8, [r3]
 8004a44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004a48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a4c:	e033      	b.n	8004ab6 <__kernel_rem_pio2+0x596>
 8004a4e:	3408      	adds	r4, #8
 8004a50:	ab4a      	add	r3, sp, #296	; 0x128
 8004a52:	441c      	add	r4, r3
 8004a54:	462e      	mov	r6, r5
 8004a56:	2000      	movs	r0, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	da3a      	bge.n	8004ad4 <__kernel_rem_pio2+0x5b4>
 8004a5e:	9b02      	ldr	r3, [sp, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03d      	beq.n	8004ae0 <__kernel_rem_pio2+0x5c0>
 8004a64:	4602      	mov	r2, r0
 8004a66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a6a:	9c01      	ldr	r4, [sp, #4]
 8004a6c:	e9c4 2300 	strd	r2, r3, [r4]
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004a78:	f7fb fc0e 	bl	8000298 <__aeabi_dsub>
 8004a7c:	ae4c      	add	r6, sp, #304	; 0x130
 8004a7e:	2401      	movs	r4, #1
 8004a80:	42a5      	cmp	r5, r4
 8004a82:	da30      	bge.n	8004ae6 <__kernel_rem_pio2+0x5c6>
 8004a84:	9b02      	ldr	r3, [sp, #8]
 8004a86:	b113      	cbz	r3, 8004a8e <__kernel_rem_pio2+0x56e>
 8004a88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a94:	e00f      	b.n	8004ab6 <__kernel_rem_pio2+0x596>
 8004a96:	ab9a      	add	r3, sp, #616	; 0x268
 8004a98:	441c      	add	r4, r3
 8004a9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2d00      	cmp	r5, #0
 8004aa4:	da10      	bge.n	8004ac8 <__kernel_rem_pio2+0x5a8>
 8004aa6:	9b02      	ldr	r3, [sp, #8]
 8004aa8:	b113      	cbz	r3, 8004ab0 <__kernel_rem_pio2+0x590>
 8004aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aae:	4619      	mov	r1, r3
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	e9c3 0100 	strd	r0, r1, [r3]
 8004ab6:	9b06      	ldr	r3, [sp, #24]
 8004ab8:	f003 0007 	and.w	r0, r3, #7
 8004abc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004ac0:	ecbd 8b02 	vpop	{d8}
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004acc:	f7fb fbe6 	bl	800029c <__adddf3>
 8004ad0:	3d01      	subs	r5, #1
 8004ad2:	e7e6      	b.n	8004aa2 <__kernel_rem_pio2+0x582>
 8004ad4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ad8:	f7fb fbe0 	bl	800029c <__adddf3>
 8004adc:	3e01      	subs	r6, #1
 8004ade:	e7bc      	b.n	8004a5a <__kernel_rem_pio2+0x53a>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	e7c1      	b.n	8004a6a <__kernel_rem_pio2+0x54a>
 8004ae6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004aea:	f7fb fbd7 	bl	800029c <__adddf3>
 8004aee:	3401      	adds	r4, #1
 8004af0:	e7c6      	b.n	8004a80 <__kernel_rem_pio2+0x560>
 8004af2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8004af6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004afa:	4640      	mov	r0, r8
 8004afc:	ec53 2b17 	vmov	r2, r3, d7
 8004b00:	4649      	mov	r1, r9
 8004b02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b06:	f7fb fbc9 	bl	800029c <__adddf3>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460f      	mov	r7, r1
 8004b12:	4640      	mov	r0, r8
 8004b14:	4649      	mov	r1, r9
 8004b16:	f7fb fbbf 	bl	8000298 <__aeabi_dsub>
 8004b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b1e:	f7fb fbbd 	bl	800029c <__adddf3>
 8004b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b26:	e9ca 0100 	strd	r0, r1, [sl]
 8004b2a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8004b2e:	e770      	b.n	8004a12 <__kernel_rem_pio2+0x4f2>
 8004b30:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8004b34:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004b38:	4630      	mov	r0, r6
 8004b3a:	ec53 2b17 	vmov	r2, r3, d7
 8004b3e:	4639      	mov	r1, r7
 8004b40:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b44:	f7fb fbaa 	bl	800029c <__adddf3>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	4689      	mov	r9, r1
 8004b50:	4630      	mov	r0, r6
 8004b52:	4639      	mov	r1, r7
 8004b54:	f7fb fba0 	bl	8000298 <__aeabi_dsub>
 8004b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b5c:	f7fb fb9e 	bl	800029c <__adddf3>
 8004b60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b64:	e9ca 0100 	strd	r0, r1, [sl]
 8004b68:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8004b6c:	e756      	b.n	8004a1c <__kernel_rem_pio2+0x4fc>
 8004b6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b72:	f7fb fb93 	bl	800029c <__adddf3>
 8004b76:	3d01      	subs	r5, #1
 8004b78:	e756      	b.n	8004a28 <__kernel_rem_pio2+0x508>
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	9a01      	ldr	r2, [sp, #4]
 8004b7e:	601f      	str	r7, [r3, #0]
 8004b80:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004b84:	605c      	str	r4, [r3, #4]
 8004b86:	609d      	str	r5, [r3, #8]
 8004b88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b8c:	60d3      	str	r3, [r2, #12]
 8004b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b92:	6110      	str	r0, [r2, #16]
 8004b94:	6153      	str	r3, [r2, #20]
 8004b96:	e78e      	b.n	8004ab6 <__kernel_rem_pio2+0x596>
 8004b98:	41700000 	.word	0x41700000
 8004b9c:	3e700000 	.word	0x3e700000

08004ba0 <__kernel_sin>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	ec55 4b10 	vmov	r4, r5, d0
 8004ba8:	b085      	sub	sp, #20
 8004baa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004bae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004bb2:	ed8d 1b00 	vstr	d1, [sp]
 8004bb6:	9002      	str	r0, [sp, #8]
 8004bb8:	da06      	bge.n	8004bc8 <__kernel_sin+0x28>
 8004bba:	ee10 0a10 	vmov	r0, s0
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb ffd2 	bl	8000b68 <__aeabi_d2iz>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d051      	beq.n	8004c6c <__kernel_sin+0xcc>
 8004bc8:	4622      	mov	r2, r4
 8004bca:	462b      	mov	r3, r5
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb fd1a 	bl	8000608 <__aeabi_dmul>
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	468b      	mov	fp, r1
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb fd12 	bl	8000608 <__aeabi_dmul>
 8004be4:	a341      	add	r3, pc, #260	; (adr r3, 8004cec <__kernel_sin+0x14c>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	4680      	mov	r8, r0
 8004bec:	4689      	mov	r9, r1
 8004bee:	4650      	mov	r0, sl
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	f7fb fd09 	bl	8000608 <__aeabi_dmul>
 8004bf6:	a33f      	add	r3, pc, #252	; (adr r3, 8004cf4 <__kernel_sin+0x154>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fb4c 	bl	8000298 <__aeabi_dsub>
 8004c00:	4652      	mov	r2, sl
 8004c02:	465b      	mov	r3, fp
 8004c04:	f7fb fd00 	bl	8000608 <__aeabi_dmul>
 8004c08:	a33c      	add	r3, pc, #240	; (adr r3, 8004cfc <__kernel_sin+0x15c>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fb45 	bl	800029c <__adddf3>
 8004c12:	4652      	mov	r2, sl
 8004c14:	465b      	mov	r3, fp
 8004c16:	f7fb fcf7 	bl	8000608 <__aeabi_dmul>
 8004c1a:	a33a      	add	r3, pc, #232	; (adr r3, 8004d04 <__kernel_sin+0x164>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fb3a 	bl	8000298 <__aeabi_dsub>
 8004c24:	4652      	mov	r2, sl
 8004c26:	465b      	mov	r3, fp
 8004c28:	f7fb fcee 	bl	8000608 <__aeabi_dmul>
 8004c2c:	a337      	add	r3, pc, #220	; (adr r3, 8004d0c <__kernel_sin+0x16c>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fb33 	bl	800029c <__adddf3>
 8004c36:	9b02      	ldr	r3, [sp, #8]
 8004c38:	4606      	mov	r6, r0
 8004c3a:	460f      	mov	r7, r1
 8004c3c:	b9db      	cbnz	r3, 8004c76 <__kernel_sin+0xd6>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4650      	mov	r0, sl
 8004c44:	4659      	mov	r1, fp
 8004c46:	f7fb fcdf 	bl	8000608 <__aeabi_dmul>
 8004c4a:	a325      	add	r3, pc, #148	; (adr r3, 8004ce0 <__kernel_sin+0x140>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f7fb fb22 	bl	8000298 <__aeabi_dsub>
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	f7fb fcd6 	bl	8000608 <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4620      	mov	r0, r4
 8004c62:	4629      	mov	r1, r5
 8004c64:	f7fb fb1a 	bl	800029c <__adddf3>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	ec45 4b10 	vmov	d0, r4, r5
 8004c70:	b005      	add	sp, #20
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	2200      	movs	r2, #0
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <__kernel_sin+0x148>)
 8004c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c7e:	f7fb fcc3 	bl	8000608 <__aeabi_dmul>
 8004c82:	4632      	mov	r2, r6
 8004c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c88:	463b      	mov	r3, r7
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fb fcbb 	bl	8000608 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c9a:	f7fb fafd 	bl	8000298 <__aeabi_dsub>
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	465b      	mov	r3, fp
 8004ca2:	f7fb fcb1 	bl	8000608 <__aeabi_dmul>
 8004ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004caa:	f7fb faf5 	bl	8000298 <__aeabi_dsub>
 8004cae:	a30c      	add	r3, pc, #48	; (adr r3, 8004ce0 <__kernel_sin+0x140>)
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	4640      	mov	r0, r8
 8004cba:	4649      	mov	r1, r9
 8004cbc:	f7fb fca4 	bl	8000608 <__aeabi_dmul>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	f7fb fae8 	bl	800029c <__adddf3>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7fb fae0 	bl	8000298 <__aeabi_dsub>
 8004cd8:	e7c6      	b.n	8004c68 <__kernel_sin+0xc8>
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	55555549 	.word	0x55555549
 8004ce4:	3fc55555 	.word	0x3fc55555
 8004ce8:	3fe00000 	.word	0x3fe00000
 8004cec:	5acfd57c 	.word	0x5acfd57c
 8004cf0:	3de5d93a 	.word	0x3de5d93a
 8004cf4:	8a2b9ceb 	.word	0x8a2b9ceb
 8004cf8:	3e5ae5e6 	.word	0x3e5ae5e6
 8004cfc:	57b1fe7d 	.word	0x57b1fe7d
 8004d00:	3ec71de3 	.word	0x3ec71de3
 8004d04:	19c161d5 	.word	0x19c161d5
 8004d08:	3f2a01a0 	.word	0x3f2a01a0
 8004d0c:	1110f8a6 	.word	0x1110f8a6
 8004d10:	3f811111 	.word	0x3f811111

08004d14 <fabs>:
 8004d14:	ec51 0b10 	vmov	r0, r1, d0
 8004d18:	ee10 2a10 	vmov	r2, s0
 8004d1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d20:	ec43 2b10 	vmov	d0, r2, r3
 8004d24:	4770      	bx	lr
	...

08004d28 <floor>:
 8004d28:	ec51 0b10 	vmov	r0, r1, d0
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004d34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004d38:	2e13      	cmp	r6, #19
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	ee10 5a10 	vmov	r5, s0
 8004d40:	4680      	mov	r8, r0
 8004d42:	dc34      	bgt.n	8004dae <floor+0x86>
 8004d44:	2e00      	cmp	r6, #0
 8004d46:	da16      	bge.n	8004d76 <floor+0x4e>
 8004d48:	a335      	add	r3, pc, #212	; (adr r3, 8004e20 <floor+0xf8>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb faa5 	bl	800029c <__adddf3>
 8004d52:	2200      	movs	r2, #0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f7fb fee7 	bl	8000b28 <__aeabi_dcmpgt>
 8004d5a:	b148      	cbz	r0, 8004d70 <floor+0x48>
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	da59      	bge.n	8004e14 <floor+0xec>
 8004d60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <floor+0x100>)
 8004d66:	432b      	orrs	r3, r5
 8004d68:	2500      	movs	r5, #0
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	bf18      	it	ne
 8004d6e:	4614      	movne	r4, r2
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	e025      	b.n	8004dc2 <floor+0x9a>
 8004d76:	4f2d      	ldr	r7, [pc, #180]	; (8004e2c <floor+0x104>)
 8004d78:	4137      	asrs	r7, r6
 8004d7a:	ea01 0307 	and.w	r3, r1, r7
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	d01f      	beq.n	8004dc2 <floor+0x9a>
 8004d82:	a327      	add	r3, pc, #156	; (adr r3, 8004e20 <floor+0xf8>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa88 	bl	800029c <__adddf3>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f7fb feca 	bl	8000b28 <__aeabi_dcmpgt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d0eb      	beq.n	8004d70 <floor+0x48>
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	bfbe      	ittt	lt
 8004d9c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004da0:	fa43 f606 	asrlt.w	r6, r3, r6
 8004da4:	19a4      	addlt	r4, r4, r6
 8004da6:	ea24 0407 	bic.w	r4, r4, r7
 8004daa:	2500      	movs	r5, #0
 8004dac:	e7e0      	b.n	8004d70 <floor+0x48>
 8004dae:	2e33      	cmp	r6, #51	; 0x33
 8004db0:	dd0b      	ble.n	8004dca <floor+0xa2>
 8004db2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004db6:	d104      	bne.n	8004dc2 <floor+0x9a>
 8004db8:	ee10 2a10 	vmov	r2, s0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	f7fb fa6d 	bl	800029c <__adddf3>
 8004dc2:	ec41 0b10 	vmov	d0, r0, r1
 8004dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	fa23 f707 	lsr.w	r7, r3, r7
 8004dd6:	4207      	tst	r7, r0
 8004dd8:	d0f3      	beq.n	8004dc2 <floor+0x9a>
 8004dda:	a311      	add	r3, pc, #68	; (adr r3, 8004e20 <floor+0xf8>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fa5c 	bl	800029c <__adddf3>
 8004de4:	2200      	movs	r2, #0
 8004de6:	2300      	movs	r3, #0
 8004de8:	f7fb fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d0bf      	beq.n	8004d70 <floor+0x48>
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	da02      	bge.n	8004dfa <floor+0xd2>
 8004df4:	2e14      	cmp	r6, #20
 8004df6:	d103      	bne.n	8004e00 <floor+0xd8>
 8004df8:	3401      	adds	r4, #1
 8004dfa:	ea25 0507 	bic.w	r5, r5, r7
 8004dfe:	e7b7      	b.n	8004d70 <floor+0x48>
 8004e00:	2301      	movs	r3, #1
 8004e02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004e06:	fa03 f606 	lsl.w	r6, r3, r6
 8004e0a:	4435      	add	r5, r6
 8004e0c:	4545      	cmp	r5, r8
 8004e0e:	bf38      	it	cc
 8004e10:	18e4      	addcc	r4, r4, r3
 8004e12:	e7f2      	b.n	8004dfa <floor+0xd2>
 8004e14:	2500      	movs	r5, #0
 8004e16:	462c      	mov	r4, r5
 8004e18:	e7aa      	b.n	8004d70 <floor+0x48>
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w
 8004e20:	8800759c 	.word	0x8800759c
 8004e24:	7e37e43c 	.word	0x7e37e43c
 8004e28:	bff00000 	.word	0xbff00000
 8004e2c:	000fffff 	.word	0x000fffff

08004e30 <matherr>:
 8004e30:	2000      	movs	r0, #0
 8004e32:	4770      	bx	lr
 8004e34:	0000      	movs	r0, r0
	...

08004e38 <scalbn>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	ec55 4b10 	vmov	r4, r5, d0
 8004e3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004e42:	4606      	mov	r6, r0
 8004e44:	462b      	mov	r3, r5
 8004e46:	b9aa      	cbnz	r2, 8004e74 <scalbn+0x3c>
 8004e48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e4c:	4323      	orrs	r3, r4
 8004e4e:	d03b      	beq.n	8004ec8 <scalbn+0x90>
 8004e50:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <scalbn+0xe0>)
 8004e52:	4629      	mov	r1, r5
 8004e54:	2200      	movs	r2, #0
 8004e56:	ee10 0a10 	vmov	r0, s0
 8004e5a:	f7fb fbd5 	bl	8000608 <__aeabi_dmul>
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <scalbn+0xe4>)
 8004e60:	429e      	cmp	r6, r3
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	da12      	bge.n	8004e8e <scalbn+0x56>
 8004e68:	a327      	add	r3, pc, #156	; (adr r3, 8004f08 <scalbn+0xd0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fbcb 	bl	8000608 <__aeabi_dmul>
 8004e72:	e009      	b.n	8004e88 <scalbn+0x50>
 8004e74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004e78:	428a      	cmp	r2, r1
 8004e7a:	d10c      	bne.n	8004e96 <scalbn+0x5e>
 8004e7c:	ee10 2a10 	vmov	r2, s0
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fa0a 	bl	800029c <__adddf3>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	e01c      	b.n	8004ec8 <scalbn+0x90>
 8004e8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e92:	460b      	mov	r3, r1
 8004e94:	3a36      	subs	r2, #54	; 0x36
 8004e96:	4432      	add	r2, r6
 8004e98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004e9c:	428a      	cmp	r2, r1
 8004e9e:	dd0b      	ble.n	8004eb8 <scalbn+0x80>
 8004ea0:	ec45 4b11 	vmov	d1, r4, r5
 8004ea4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004f10 <scalbn+0xd8>
 8004ea8:	f000 f83c 	bl	8004f24 <copysign>
 8004eac:	a318      	add	r3, pc, #96	; (adr r3, 8004f10 <scalbn+0xd8>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	ec51 0b10 	vmov	r0, r1, d0
 8004eb6:	e7da      	b.n	8004e6e <scalbn+0x36>
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	dd08      	ble.n	8004ece <scalbn+0x96>
 8004ebc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ec0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ec4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ec8:	ec45 4b10 	vmov	d0, r4, r5
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004ed2:	da0d      	bge.n	8004ef0 <scalbn+0xb8>
 8004ed4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ed8:	429e      	cmp	r6, r3
 8004eda:	ec45 4b11 	vmov	d1, r4, r5
 8004ede:	dce1      	bgt.n	8004ea4 <scalbn+0x6c>
 8004ee0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004f08 <scalbn+0xd0>
 8004ee4:	f000 f81e 	bl	8004f24 <copysign>
 8004ee8:	a307      	add	r3, pc, #28	; (adr r3, 8004f08 <scalbn+0xd0>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	e7e0      	b.n	8004eb2 <scalbn+0x7a>
 8004ef0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ef4:	3236      	adds	r2, #54	; 0x36
 8004ef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004efa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	2200      	movs	r2, #0
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <scalbn+0xe8>)
 8004f06:	e7b2      	b.n	8004e6e <scalbn+0x36>
 8004f08:	c2f8f359 	.word	0xc2f8f359
 8004f0c:	01a56e1f 	.word	0x01a56e1f
 8004f10:	8800759c 	.word	0x8800759c
 8004f14:	7e37e43c 	.word	0x7e37e43c
 8004f18:	43500000 	.word	0x43500000
 8004f1c:	ffff3cb0 	.word	0xffff3cb0
 8004f20:	3c900000 	.word	0x3c900000

08004f24 <copysign>:
 8004f24:	ec51 0b10 	vmov	r0, r1, d0
 8004f28:	ee11 0a90 	vmov	r0, s3
 8004f2c:	ee10 2a10 	vmov	r2, s0
 8004f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004f38:	ea41 0300 	orr.w	r3, r1, r0
 8004f3c:	ec43 2b10 	vmov	d0, r2, r3
 8004f40:	4770      	bx	lr
	...

08004f44 <__errno>:
 8004f44:	4b01      	ldr	r3, [pc, #4]	; (8004f4c <__errno+0x8>)
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4e0d      	ldr	r6, [pc, #52]	; (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	; (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1ba4      	subs	r4, r4, r6
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	42a5      	cmp	r5, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4e0b      	ldr	r6, [pc, #44]	; (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x44>)
 8004f64:	f002 f85c 	bl	8007020 <_init>
 8004f68:	1ba4      	subs	r4, r4, r6
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	42a5      	cmp	r5, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f78:	4798      	blx	r3
 8004f7a:	3501      	adds	r5, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f82:	4798      	blx	r3
 8004f84:	3501      	adds	r5, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	080074b0 	.word	0x080074b0
 8004f8c:	080074b0 	.word	0x080074b0
 8004f90:	080074b0 	.word	0x080074b0
 8004f94:	080074b8 	.word	0x080074b8

08004f98 <memset>:
 8004f98:	4402      	add	r2, r0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d100      	bne.n	8004fa2 <memset+0xa>
 8004fa0:	4770      	bx	lr
 8004fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa6:	e7f9      	b.n	8004f9c <memset+0x4>

08004fa8 <__cvt>:
 8004fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	ec55 4b10 	vmov	r4, r5, d0
 8004fb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004fb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	460e      	mov	r6, r1
 8004fba:	4691      	mov	r9, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	bfb8      	it	lt
 8004fc0:	4622      	movlt	r2, r4
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	f027 0720 	bic.w	r7, r7, #32
 8004fc8:	bfbb      	ittet	lt
 8004fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fce:	461d      	movlt	r5, r3
 8004fd0:	2300      	movge	r3, #0
 8004fd2:	232d      	movlt	r3, #45	; 0x2d
 8004fd4:	bfb8      	it	lt
 8004fd6:	4614      	movlt	r4, r2
 8004fd8:	2f46      	cmp	r7, #70	; 0x46
 8004fda:	700b      	strb	r3, [r1, #0]
 8004fdc:	d004      	beq.n	8004fe8 <__cvt+0x40>
 8004fde:	2f45      	cmp	r7, #69	; 0x45
 8004fe0:	d100      	bne.n	8004fe4 <__cvt+0x3c>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	e000      	b.n	8004fea <__cvt+0x42>
 8004fe8:	2103      	movs	r1, #3
 8004fea:	ab03      	add	r3, sp, #12
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	ab02      	add	r3, sp, #8
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	4653      	mov	r3, sl
 8004ff6:	ec45 4b10 	vmov	d0, r4, r5
 8004ffa:	f000 fcdd 	bl	80059b8 <_dtoa_r>
 8004ffe:	2f47      	cmp	r7, #71	; 0x47
 8005000:	4680      	mov	r8, r0
 8005002:	d102      	bne.n	800500a <__cvt+0x62>
 8005004:	f019 0f01 	tst.w	r9, #1
 8005008:	d026      	beq.n	8005058 <__cvt+0xb0>
 800500a:	2f46      	cmp	r7, #70	; 0x46
 800500c:	eb08 0906 	add.w	r9, r8, r6
 8005010:	d111      	bne.n	8005036 <__cvt+0x8e>
 8005012:	f898 3000 	ldrb.w	r3, [r8]
 8005016:	2b30      	cmp	r3, #48	; 0x30
 8005018:	d10a      	bne.n	8005030 <__cvt+0x88>
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 8005026:	b918      	cbnz	r0, 8005030 <__cvt+0x88>
 8005028:	f1c6 0601 	rsb	r6, r6, #1
 800502c:	f8ca 6000 	str.w	r6, [sl]
 8005030:	f8da 3000 	ldr.w	r3, [sl]
 8005034:	4499      	add	r9, r3
 8005036:	2200      	movs	r2, #0
 8005038:	2300      	movs	r3, #0
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005042:	b938      	cbnz	r0, 8005054 <__cvt+0xac>
 8005044:	2230      	movs	r2, #48	; 0x30
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	454b      	cmp	r3, r9
 800504a:	d205      	bcs.n	8005058 <__cvt+0xb0>
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	9103      	str	r1, [sp, #12]
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e7f8      	b.n	8005046 <__cvt+0x9e>
 8005054:	f8cd 900c 	str.w	r9, [sp, #12]
 8005058:	9b03      	ldr	r3, [sp, #12]
 800505a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800505c:	eba3 0308 	sub.w	r3, r3, r8
 8005060:	4640      	mov	r0, r8
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	b004      	add	sp, #16
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800506a <__exponent>:
 800506a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506c:	2900      	cmp	r1, #0
 800506e:	4604      	mov	r4, r0
 8005070:	bfba      	itte	lt
 8005072:	4249      	neglt	r1, r1
 8005074:	232d      	movlt	r3, #45	; 0x2d
 8005076:	232b      	movge	r3, #43	; 0x2b
 8005078:	2909      	cmp	r1, #9
 800507a:	f804 2b02 	strb.w	r2, [r4], #2
 800507e:	7043      	strb	r3, [r0, #1]
 8005080:	dd20      	ble.n	80050c4 <__exponent+0x5a>
 8005082:	f10d 0307 	add.w	r3, sp, #7
 8005086:	461f      	mov	r7, r3
 8005088:	260a      	movs	r6, #10
 800508a:	fb91 f5f6 	sdiv	r5, r1, r6
 800508e:	fb06 1115 	mls	r1, r6, r5, r1
 8005092:	3130      	adds	r1, #48	; 0x30
 8005094:	2d09      	cmp	r5, #9
 8005096:	f803 1c01 	strb.w	r1, [r3, #-1]
 800509a:	f103 32ff 	add.w	r2, r3, #4294967295
 800509e:	4629      	mov	r1, r5
 80050a0:	dc09      	bgt.n	80050b6 <__exponent+0x4c>
 80050a2:	3130      	adds	r1, #48	; 0x30
 80050a4:	3b02      	subs	r3, #2
 80050a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050aa:	42bb      	cmp	r3, r7
 80050ac:	4622      	mov	r2, r4
 80050ae:	d304      	bcc.n	80050ba <__exponent+0x50>
 80050b0:	1a10      	subs	r0, r2, r0
 80050b2:	b003      	add	sp, #12
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	4613      	mov	r3, r2
 80050b8:	e7e7      	b.n	800508a <__exponent+0x20>
 80050ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050be:	f804 2b01 	strb.w	r2, [r4], #1
 80050c2:	e7f2      	b.n	80050aa <__exponent+0x40>
 80050c4:	2330      	movs	r3, #48	; 0x30
 80050c6:	4419      	add	r1, r3
 80050c8:	7083      	strb	r3, [r0, #2]
 80050ca:	1d02      	adds	r2, r0, #4
 80050cc:	70c1      	strb	r1, [r0, #3]
 80050ce:	e7ef      	b.n	80050b0 <__exponent+0x46>

080050d0 <_printf_float>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	b08d      	sub	sp, #52	; 0x34
 80050d6:	460c      	mov	r4, r1
 80050d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80050dc:	4616      	mov	r6, r2
 80050de:	461f      	mov	r7, r3
 80050e0:	4605      	mov	r5, r0
 80050e2:	f001 fa21 	bl	8006528 <_localeconv_r>
 80050e6:	6803      	ldr	r3, [r0, #0]
 80050e8:	9304      	str	r3, [sp, #16]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fb f878 	bl	80001e0 <strlen>
 80050f0:	2300      	movs	r3, #0
 80050f2:	930a      	str	r3, [sp, #40]	; 0x28
 80050f4:	f8d8 3000 	ldr.w	r3, [r8]
 80050f8:	9005      	str	r0, [sp, #20]
 80050fa:	3307      	adds	r3, #7
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005108:	f8d4 b000 	ldr.w	fp, [r4]
 800510c:	f8c8 2000 	str.w	r2, [r8]
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005118:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800511c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005120:	9307      	str	r3, [sp, #28]
 8005122:	f8cd 8018 	str.w	r8, [sp, #24]
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	4ba7      	ldr	r3, [pc, #668]	; (80053c8 <_printf_float+0x2f8>)
 800512c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005130:	f7fb fd04 	bl	8000b3c <__aeabi_dcmpun>
 8005134:	bb70      	cbnz	r0, 8005194 <_printf_float+0xc4>
 8005136:	f04f 32ff 	mov.w	r2, #4294967295
 800513a:	4ba3      	ldr	r3, [pc, #652]	; (80053c8 <_printf_float+0x2f8>)
 800513c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005140:	f7fb fcde 	bl	8000b00 <__aeabi_dcmple>
 8005144:	bb30      	cbnz	r0, 8005194 <_printf_float+0xc4>
 8005146:	2200      	movs	r2, #0
 8005148:	2300      	movs	r3, #0
 800514a:	4640      	mov	r0, r8
 800514c:	4649      	mov	r1, r9
 800514e:	f7fb fccd 	bl	8000aec <__aeabi_dcmplt>
 8005152:	b110      	cbz	r0, 800515a <_printf_float+0x8a>
 8005154:	232d      	movs	r3, #45	; 0x2d
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515a:	4a9c      	ldr	r2, [pc, #624]	; (80053cc <_printf_float+0x2fc>)
 800515c:	4b9c      	ldr	r3, [pc, #624]	; (80053d0 <_printf_float+0x300>)
 800515e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005162:	bf8c      	ite	hi
 8005164:	4690      	movhi	r8, r2
 8005166:	4698      	movls	r8, r3
 8005168:	2303      	movs	r3, #3
 800516a:	f02b 0204 	bic.w	r2, fp, #4
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	f04f 0900 	mov.w	r9, #0
 8005176:	9700      	str	r7, [sp, #0]
 8005178:	4633      	mov	r3, r6
 800517a:	aa0b      	add	r2, sp, #44	; 0x2c
 800517c:	4621      	mov	r1, r4
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f9e6 	bl	8005550 <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	f040 808d 	bne.w	80052a4 <_printf_float+0x1d4>
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	b00d      	add	sp, #52	; 0x34
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb fcce 	bl	8000b3c <__aeabi_dcmpun>
 80051a0:	b110      	cbz	r0, 80051a8 <_printf_float+0xd8>
 80051a2:	4a8c      	ldr	r2, [pc, #560]	; (80053d4 <_printf_float+0x304>)
 80051a4:	4b8c      	ldr	r3, [pc, #560]	; (80053d8 <_printf_float+0x308>)
 80051a6:	e7da      	b.n	800515e <_printf_float+0x8e>
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	1c4b      	adds	r3, r1, #1
 80051ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80051b0:	a80a      	add	r0, sp, #40	; 0x28
 80051b2:	d13e      	bne.n	8005232 <_printf_float+0x162>
 80051b4:	2306      	movs	r3, #6
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	2300      	movs	r3, #0
 80051ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80051be:	ab09      	add	r3, sp, #36	; 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	ec49 8b10 	vmov	d0, r8, r9
 80051c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	f8cd a004 	str.w	sl, [sp, #4]
 80051d0:	6861      	ldr	r1, [r4, #4]
 80051d2:	4628      	mov	r0, r5
 80051d4:	f7ff fee8 	bl	8004fa8 <__cvt>
 80051d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80051dc:	2b47      	cmp	r3, #71	; 0x47
 80051de:	4680      	mov	r8, r0
 80051e0:	d109      	bne.n	80051f6 <_printf_float+0x126>
 80051e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e4:	1cd8      	adds	r0, r3, #3
 80051e6:	db02      	blt.n	80051ee <_printf_float+0x11e>
 80051e8:	6862      	ldr	r2, [r4, #4]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	dd47      	ble.n	800527e <_printf_float+0x1ae>
 80051ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80051f2:	fa5f fa8a 	uxtb.w	sl, sl
 80051f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80051fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051fc:	d824      	bhi.n	8005248 <_printf_float+0x178>
 80051fe:	3901      	subs	r1, #1
 8005200:	4652      	mov	r2, sl
 8005202:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005206:	9109      	str	r1, [sp, #36]	; 0x24
 8005208:	f7ff ff2f 	bl	800506a <__exponent>
 800520c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520e:	1813      	adds	r3, r2, r0
 8005210:	2a01      	cmp	r2, #1
 8005212:	4681      	mov	r9, r0
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	dc02      	bgt.n	800521e <_printf_float+0x14e>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	07d1      	lsls	r1, r2, #31
 800521c:	d501      	bpl.n	8005222 <_printf_float+0x152>
 800521e:	3301      	adds	r3, #1
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0a5      	beq.n	8005176 <_printf_float+0xa6>
 800522a:	232d      	movs	r3, #45	; 0x2d
 800522c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005230:	e7a1      	b.n	8005176 <_printf_float+0xa6>
 8005232:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005236:	f000 8177 	beq.w	8005528 <_printf_float+0x458>
 800523a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800523e:	d1bb      	bne.n	80051b8 <_printf_float+0xe8>
 8005240:	2900      	cmp	r1, #0
 8005242:	d1b9      	bne.n	80051b8 <_printf_float+0xe8>
 8005244:	2301      	movs	r3, #1
 8005246:	e7b6      	b.n	80051b6 <_printf_float+0xe6>
 8005248:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800524c:	d119      	bne.n	8005282 <_printf_float+0x1b2>
 800524e:	2900      	cmp	r1, #0
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	dd0c      	ble.n	800526e <_printf_float+0x19e>
 8005254:	6121      	str	r1, [r4, #16]
 8005256:	b913      	cbnz	r3, 800525e <_printf_float+0x18e>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	07d2      	lsls	r2, r2, #31
 800525c:	d502      	bpl.n	8005264 <_printf_float+0x194>
 800525e:	3301      	adds	r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005266:	65a3      	str	r3, [r4, #88]	; 0x58
 8005268:	f04f 0900 	mov.w	r9, #0
 800526c:	e7d9      	b.n	8005222 <_printf_float+0x152>
 800526e:	b913      	cbnz	r3, 8005276 <_printf_float+0x1a6>
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	07d0      	lsls	r0, r2, #31
 8005274:	d501      	bpl.n	800527a <_printf_float+0x1aa>
 8005276:	3302      	adds	r3, #2
 8005278:	e7f3      	b.n	8005262 <_printf_float+0x192>
 800527a:	2301      	movs	r3, #1
 800527c:	e7f1      	b.n	8005262 <_printf_float+0x192>
 800527e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005282:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005286:	4293      	cmp	r3, r2
 8005288:	db05      	blt.n	8005296 <_printf_float+0x1c6>
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	07d1      	lsls	r1, r2, #31
 8005290:	d5e8      	bpl.n	8005264 <_printf_float+0x194>
 8005292:	3301      	adds	r3, #1
 8005294:	e7e5      	b.n	8005262 <_printf_float+0x192>
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfd4      	ite	le
 800529a:	f1c3 0302 	rsble	r3, r3, #2
 800529e:	2301      	movgt	r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	e7de      	b.n	8005262 <_printf_float+0x192>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	055a      	lsls	r2, r3, #21
 80052a8:	d407      	bmi.n	80052ba <_printf_float+0x1ea>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	4642      	mov	r2, r8
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	d12b      	bne.n	8005310 <_printf_float+0x240>
 80052b8:	e767      	b.n	800518a <_printf_float+0xba>
 80052ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80052be:	f240 80dc 	bls.w	800547a <_printf_float+0x3aa>
 80052c2:	2200      	movs	r2, #0
 80052c4:	2300      	movs	r3, #0
 80052c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052ca:	f7fb fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d033      	beq.n	800533a <_printf_float+0x26a>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4a41      	ldr	r2, [pc, #260]	; (80053dc <_printf_float+0x30c>)
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	f43f af54 	beq.w	800518a <_printf_float+0xba>
 80052e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e6:	429a      	cmp	r2, r3
 80052e8:	db02      	blt.n	80052f0 <_printf_float+0x220>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	07d8      	lsls	r0, r3, #31
 80052ee:	d50f      	bpl.n	8005310 <_printf_float+0x240>
 80052f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af45 	beq.w	800518a <_printf_float+0xba>
 8005300:	f04f 0800 	mov.w	r8, #0
 8005304:	f104 091a 	add.w	r9, r4, #26
 8005308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	4543      	cmp	r3, r8
 800530e:	dc09      	bgt.n	8005324 <_printf_float+0x254>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	079b      	lsls	r3, r3, #30
 8005314:	f100 8103 	bmi.w	800551e <_printf_float+0x44e>
 8005318:	68e0      	ldr	r0, [r4, #12]
 800531a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531c:	4298      	cmp	r0, r3
 800531e:	bfb8      	it	lt
 8005320:	4618      	movlt	r0, r3
 8005322:	e734      	b.n	800518e <_printf_float+0xbe>
 8005324:	2301      	movs	r3, #1
 8005326:	464a      	mov	r2, r9
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	f43f af2b 	beq.w	800518a <_printf_float+0xba>
 8005334:	f108 0801 	add.w	r8, r8, #1
 8005338:	e7e6      	b.n	8005308 <_printf_float+0x238>
 800533a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	dc2b      	bgt.n	8005398 <_printf_float+0x2c8>
 8005340:	2301      	movs	r3, #1
 8005342:	4a26      	ldr	r2, [pc, #152]	; (80053dc <_printf_float+0x30c>)
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f af1d 	beq.w	800518a <_printf_float+0xba>
 8005350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005352:	b923      	cbnz	r3, 800535e <_printf_float+0x28e>
 8005354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005356:	b913      	cbnz	r3, 800535e <_printf_float+0x28e>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	07d9      	lsls	r1, r3, #31
 800535c:	d5d8      	bpl.n	8005310 <_printf_float+0x240>
 800535e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f af0e 	beq.w	800518a <_printf_float+0xba>
 800536e:	f04f 0900 	mov.w	r9, #0
 8005372:	f104 0a1a 	add.w	sl, r4, #26
 8005376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005378:	425b      	negs	r3, r3
 800537a:	454b      	cmp	r3, r9
 800537c:	dc01      	bgt.n	8005382 <_printf_float+0x2b2>
 800537e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005380:	e794      	b.n	80052ac <_printf_float+0x1dc>
 8005382:	2301      	movs	r3, #1
 8005384:	4652      	mov	r2, sl
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f aefc 	beq.w	800518a <_printf_float+0xba>
 8005392:	f109 0901 	add.w	r9, r9, #1
 8005396:	e7ee      	b.n	8005376 <_printf_float+0x2a6>
 8005398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800539a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800539c:	429a      	cmp	r2, r3
 800539e:	bfa8      	it	ge
 80053a0:	461a      	movge	r2, r3
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	4691      	mov	r9, r2
 80053a6:	dd07      	ble.n	80053b8 <_printf_float+0x2e8>
 80053a8:	4613      	mov	r3, r2
 80053aa:	4631      	mov	r1, r6
 80053ac:	4642      	mov	r2, r8
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f aee9 	beq.w	800518a <_printf_float+0xba>
 80053b8:	f104 031a 	add.w	r3, r4, #26
 80053bc:	f04f 0b00 	mov.w	fp, #0
 80053c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053c4:	9306      	str	r3, [sp, #24]
 80053c6:	e015      	b.n	80053f4 <_printf_float+0x324>
 80053c8:	7fefffff 	.word	0x7fefffff
 80053cc:	0800724c 	.word	0x0800724c
 80053d0:	08007248 	.word	0x08007248
 80053d4:	08007254 	.word	0x08007254
 80053d8:	08007250 	.word	0x08007250
 80053dc:	08007258 	.word	0x08007258
 80053e0:	2301      	movs	r3, #1
 80053e2:	9a06      	ldr	r2, [sp, #24]
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f aecd 	beq.w	800518a <_printf_float+0xba>
 80053f0:	f10b 0b01 	add.w	fp, fp, #1
 80053f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80053f8:	ebaa 0309 	sub.w	r3, sl, r9
 80053fc:	455b      	cmp	r3, fp
 80053fe:	dcef      	bgt.n	80053e0 <_printf_float+0x310>
 8005400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005404:	429a      	cmp	r2, r3
 8005406:	44d0      	add	r8, sl
 8005408:	db15      	blt.n	8005436 <_printf_float+0x366>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	07da      	lsls	r2, r3, #31
 800540e:	d412      	bmi.n	8005436 <_printf_float+0x366>
 8005410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005414:	eba3 020a 	sub.w	r2, r3, sl
 8005418:	eba3 0a01 	sub.w	sl, r3, r1
 800541c:	4592      	cmp	sl, r2
 800541e:	bfa8      	it	ge
 8005420:	4692      	movge	sl, r2
 8005422:	f1ba 0f00 	cmp.w	sl, #0
 8005426:	dc0e      	bgt.n	8005446 <_printf_float+0x376>
 8005428:	f04f 0800 	mov.w	r8, #0
 800542c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005430:	f104 091a 	add.w	r9, r4, #26
 8005434:	e019      	b.n	800546a <_printf_float+0x39a>
 8005436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	d1e5      	bne.n	8005410 <_printf_float+0x340>
 8005444:	e6a1      	b.n	800518a <_printf_float+0xba>
 8005446:	4653      	mov	r3, sl
 8005448:	4642      	mov	r2, r8
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	d1e9      	bne.n	8005428 <_printf_float+0x358>
 8005454:	e699      	b.n	800518a <_printf_float+0xba>
 8005456:	2301      	movs	r3, #1
 8005458:	464a      	mov	r2, r9
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	47b8      	blx	r7
 8005460:	3001      	adds	r0, #1
 8005462:	f43f ae92 	beq.w	800518a <_printf_float+0xba>
 8005466:	f108 0801 	add.w	r8, r8, #1
 800546a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	eba3 030a 	sub.w	r3, r3, sl
 8005474:	4543      	cmp	r3, r8
 8005476:	dcee      	bgt.n	8005456 <_printf_float+0x386>
 8005478:	e74a      	b.n	8005310 <_printf_float+0x240>
 800547a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800547c:	2a01      	cmp	r2, #1
 800547e:	dc01      	bgt.n	8005484 <_printf_float+0x3b4>
 8005480:	07db      	lsls	r3, r3, #31
 8005482:	d53a      	bpl.n	80054fa <_printf_float+0x42a>
 8005484:	2301      	movs	r3, #1
 8005486:	4642      	mov	r2, r8
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f ae7b 	beq.w	800518a <_printf_float+0xba>
 8005494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f108 0801 	add.w	r8, r8, #1
 80054a4:	f43f ae71 	beq.w	800518a <_printf_float+0xba>
 80054a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054aa:	2200      	movs	r2, #0
 80054ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80054b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b4:	2300      	movs	r3, #0
 80054b6:	f7fb fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ba:	b9c8      	cbnz	r0, 80054f0 <_printf_float+0x420>
 80054bc:	4653      	mov	r3, sl
 80054be:	4642      	mov	r2, r8
 80054c0:	4631      	mov	r1, r6
 80054c2:	4628      	mov	r0, r5
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	d10e      	bne.n	80054e8 <_printf_float+0x418>
 80054ca:	e65e      	b.n	800518a <_printf_float+0xba>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4652      	mov	r2, sl
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f ae57 	beq.w	800518a <_printf_float+0xba>
 80054dc:	f108 0801 	add.w	r8, r8, #1
 80054e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	4543      	cmp	r3, r8
 80054e6:	dcf1      	bgt.n	80054cc <_printf_float+0x3fc>
 80054e8:	464b      	mov	r3, r9
 80054ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054ee:	e6de      	b.n	80052ae <_printf_float+0x1de>
 80054f0:	f04f 0800 	mov.w	r8, #0
 80054f4:	f104 0a1a 	add.w	sl, r4, #26
 80054f8:	e7f2      	b.n	80054e0 <_printf_float+0x410>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7df      	b.n	80054be <_printf_float+0x3ee>
 80054fe:	2301      	movs	r3, #1
 8005500:	464a      	mov	r2, r9
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f ae3e 	beq.w	800518a <_printf_float+0xba>
 800550e:	f108 0801 	add.w	r8, r8, #1
 8005512:	68e3      	ldr	r3, [r4, #12]
 8005514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	4543      	cmp	r3, r8
 800551a:	dcf0      	bgt.n	80054fe <_printf_float+0x42e>
 800551c:	e6fc      	b.n	8005318 <_printf_float+0x248>
 800551e:	f04f 0800 	mov.w	r8, #0
 8005522:	f104 0919 	add.w	r9, r4, #25
 8005526:	e7f4      	b.n	8005512 <_printf_float+0x442>
 8005528:	2900      	cmp	r1, #0
 800552a:	f43f ae8b 	beq.w	8005244 <_printf_float+0x174>
 800552e:	2300      	movs	r3, #0
 8005530:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005534:	ab09      	add	r3, sp, #36	; 0x24
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	ec49 8b10 	vmov	d0, r8, r9
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	f8cd a004 	str.w	sl, [sp, #4]
 8005542:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005546:	4628      	mov	r0, r5
 8005548:	f7ff fd2e 	bl	8004fa8 <__cvt>
 800554c:	4680      	mov	r8, r0
 800554e:	e648      	b.n	80051e2 <_printf_float+0x112>

08005550 <_printf_common>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	4691      	mov	r9, r2
 8005556:	461f      	mov	r7, r3
 8005558:	688a      	ldr	r2, [r1, #8]
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005560:	4293      	cmp	r3, r2
 8005562:	bfb8      	it	lt
 8005564:	4613      	movlt	r3, r2
 8005566:	f8c9 3000 	str.w	r3, [r9]
 800556a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800556e:	4606      	mov	r6, r0
 8005570:	460c      	mov	r4, r1
 8005572:	b112      	cbz	r2, 800557a <_printf_common+0x2a>
 8005574:	3301      	adds	r3, #1
 8005576:	f8c9 3000 	str.w	r3, [r9]
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	0699      	lsls	r1, r3, #26
 800557e:	bf42      	ittt	mi
 8005580:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005584:	3302      	addmi	r3, #2
 8005586:	f8c9 3000 	strmi.w	r3, [r9]
 800558a:	6825      	ldr	r5, [r4, #0]
 800558c:	f015 0506 	ands.w	r5, r5, #6
 8005590:	d107      	bne.n	80055a2 <_printf_common+0x52>
 8005592:	f104 0a19 	add.w	sl, r4, #25
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	f8d9 2000 	ldr.w	r2, [r9]
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	42ab      	cmp	r3, r5
 80055a0:	dc28      	bgt.n	80055f4 <_printf_common+0xa4>
 80055a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	3300      	adds	r3, #0
 80055aa:	bf18      	it	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	0692      	lsls	r2, r2, #26
 80055b0:	d42d      	bmi.n	800560e <_printf_common+0xbe>
 80055b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055b6:	4639      	mov	r1, r7
 80055b8:	4630      	mov	r0, r6
 80055ba:	47c0      	blx	r8
 80055bc:	3001      	adds	r0, #1
 80055be:	d020      	beq.n	8005602 <_printf_common+0xb2>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	68e5      	ldr	r5, [r4, #12]
 80055c4:	f8d9 2000 	ldr.w	r2, [r9]
 80055c8:	f003 0306 	and.w	r3, r3, #6
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	bf08      	it	eq
 80055d0:	1aad      	subeq	r5, r5, r2
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	bf0c      	ite	eq
 80055d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055dc:	2500      	movne	r5, #0
 80055de:	4293      	cmp	r3, r2
 80055e0:	bfc4      	itt	gt
 80055e2:	1a9b      	subgt	r3, r3, r2
 80055e4:	18ed      	addgt	r5, r5, r3
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	341a      	adds	r4, #26
 80055ec:	454d      	cmp	r5, r9
 80055ee:	d11a      	bne.n	8005626 <_printf_common+0xd6>
 80055f0:	2000      	movs	r0, #0
 80055f2:	e008      	b.n	8005606 <_printf_common+0xb6>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4652      	mov	r2, sl
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d103      	bne.n	800560a <_printf_common+0xba>
 8005602:	f04f 30ff 	mov.w	r0, #4294967295
 8005606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560a:	3501      	adds	r5, #1
 800560c:	e7c3      	b.n	8005596 <_printf_common+0x46>
 800560e:	18e1      	adds	r1, r4, r3
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	2030      	movs	r0, #48	; 0x30
 8005614:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005618:	4422      	add	r2, r4
 800561a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800561e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005622:	3302      	adds	r3, #2
 8005624:	e7c5      	b.n	80055b2 <_printf_common+0x62>
 8005626:	2301      	movs	r3, #1
 8005628:	4622      	mov	r2, r4
 800562a:	4639      	mov	r1, r7
 800562c:	4630      	mov	r0, r6
 800562e:	47c0      	blx	r8
 8005630:	3001      	adds	r0, #1
 8005632:	d0e6      	beq.n	8005602 <_printf_common+0xb2>
 8005634:	f109 0901 	add.w	r9, r9, #1
 8005638:	e7d8      	b.n	80055ec <_printf_common+0x9c>
	...

0800563c <_printf_i>:
 800563c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005640:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005644:	460c      	mov	r4, r1
 8005646:	7e09      	ldrb	r1, [r1, #24]
 8005648:	b085      	sub	sp, #20
 800564a:	296e      	cmp	r1, #110	; 0x6e
 800564c:	4617      	mov	r7, r2
 800564e:	4606      	mov	r6, r0
 8005650:	4698      	mov	r8, r3
 8005652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005654:	f000 80b3 	beq.w	80057be <_printf_i+0x182>
 8005658:	d822      	bhi.n	80056a0 <_printf_i+0x64>
 800565a:	2963      	cmp	r1, #99	; 0x63
 800565c:	d036      	beq.n	80056cc <_printf_i+0x90>
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x3a>
 8005660:	2900      	cmp	r1, #0
 8005662:	f000 80b9 	beq.w	80057d8 <_printf_i+0x19c>
 8005666:	2958      	cmp	r1, #88	; 0x58
 8005668:	f000 8083 	beq.w	8005772 <_printf_i+0x136>
 800566c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005670:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005674:	e032      	b.n	80056dc <_printf_i+0xa0>
 8005676:	2964      	cmp	r1, #100	; 0x64
 8005678:	d001      	beq.n	800567e <_printf_i+0x42>
 800567a:	2969      	cmp	r1, #105	; 0x69
 800567c:	d1f6      	bne.n	800566c <_printf_i+0x30>
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	6813      	ldr	r3, [r2, #0]
 8005682:	0605      	lsls	r5, r0, #24
 8005684:	f103 0104 	add.w	r1, r3, #4
 8005688:	d52a      	bpl.n	80056e0 <_printf_i+0xa4>
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da03      	bge.n	800569a <_printf_i+0x5e>
 8005692:	222d      	movs	r2, #45	; 0x2d
 8005694:	425b      	negs	r3, r3
 8005696:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800569a:	486f      	ldr	r0, [pc, #444]	; (8005858 <_printf_i+0x21c>)
 800569c:	220a      	movs	r2, #10
 800569e:	e039      	b.n	8005714 <_printf_i+0xd8>
 80056a0:	2973      	cmp	r1, #115	; 0x73
 80056a2:	f000 809d 	beq.w	80057e0 <_printf_i+0x1a4>
 80056a6:	d808      	bhi.n	80056ba <_printf_i+0x7e>
 80056a8:	296f      	cmp	r1, #111	; 0x6f
 80056aa:	d020      	beq.n	80056ee <_printf_i+0xb2>
 80056ac:	2970      	cmp	r1, #112	; 0x70
 80056ae:	d1dd      	bne.n	800566c <_printf_i+0x30>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	f043 0320 	orr.w	r3, r3, #32
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	e003      	b.n	80056c2 <_printf_i+0x86>
 80056ba:	2975      	cmp	r1, #117	; 0x75
 80056bc:	d017      	beq.n	80056ee <_printf_i+0xb2>
 80056be:	2978      	cmp	r1, #120	; 0x78
 80056c0:	d1d4      	bne.n	800566c <_printf_i+0x30>
 80056c2:	2378      	movs	r3, #120	; 0x78
 80056c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056c8:	4864      	ldr	r0, [pc, #400]	; (800585c <_printf_i+0x220>)
 80056ca:	e055      	b.n	8005778 <_printf_i+0x13c>
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	1d19      	adds	r1, r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6011      	str	r1, [r2, #0]
 80056d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056dc:	2301      	movs	r3, #1
 80056de:	e08c      	b.n	80057fa <_printf_i+0x1be>
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6011      	str	r1, [r2, #0]
 80056e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056e8:	bf18      	it	ne
 80056ea:	b21b      	sxthne	r3, r3
 80056ec:	e7cf      	b.n	800568e <_printf_i+0x52>
 80056ee:	6813      	ldr	r3, [r2, #0]
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	1d18      	adds	r0, r3, #4
 80056f4:	6010      	str	r0, [r2, #0]
 80056f6:	0628      	lsls	r0, r5, #24
 80056f8:	d501      	bpl.n	80056fe <_printf_i+0xc2>
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	e002      	b.n	8005704 <_printf_i+0xc8>
 80056fe:	0668      	lsls	r0, r5, #25
 8005700:	d5fb      	bpl.n	80056fa <_printf_i+0xbe>
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	4854      	ldr	r0, [pc, #336]	; (8005858 <_printf_i+0x21c>)
 8005706:	296f      	cmp	r1, #111	; 0x6f
 8005708:	bf14      	ite	ne
 800570a:	220a      	movne	r2, #10
 800570c:	2208      	moveq	r2, #8
 800570e:	2100      	movs	r1, #0
 8005710:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005714:	6865      	ldr	r5, [r4, #4]
 8005716:	60a5      	str	r5, [r4, #8]
 8005718:	2d00      	cmp	r5, #0
 800571a:	f2c0 8095 	blt.w	8005848 <_printf_i+0x20c>
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	f021 0104 	bic.w	r1, r1, #4
 8005724:	6021      	str	r1, [r4, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d13d      	bne.n	80057a6 <_printf_i+0x16a>
 800572a:	2d00      	cmp	r5, #0
 800572c:	f040 808e 	bne.w	800584c <_printf_i+0x210>
 8005730:	4665      	mov	r5, ip
 8005732:	2a08      	cmp	r2, #8
 8005734:	d10b      	bne.n	800574e <_printf_i+0x112>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d508      	bpl.n	800574e <_printf_i+0x112>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	bfde      	ittt	le
 8005744:	2330      	movle	r3, #48	; 0x30
 8005746:	f805 3c01 	strble.w	r3, [r5, #-1]
 800574a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800574e:	ebac 0305 	sub.w	r3, ip, r5
 8005752:	6123      	str	r3, [r4, #16]
 8005754:	f8cd 8000 	str.w	r8, [sp]
 8005758:	463b      	mov	r3, r7
 800575a:	aa03      	add	r2, sp, #12
 800575c:	4621      	mov	r1, r4
 800575e:	4630      	mov	r0, r6
 8005760:	f7ff fef6 	bl	8005550 <_printf_common>
 8005764:	3001      	adds	r0, #1
 8005766:	d14d      	bne.n	8005804 <_printf_i+0x1c8>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	b005      	add	sp, #20
 800576e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005772:	4839      	ldr	r0, [pc, #228]	; (8005858 <_printf_i+0x21c>)
 8005774:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	1d1d      	adds	r5, r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6015      	str	r5, [r2, #0]
 8005782:	060a      	lsls	r2, r1, #24
 8005784:	d50b      	bpl.n	800579e <_printf_i+0x162>
 8005786:	07ca      	lsls	r2, r1, #31
 8005788:	bf44      	itt	mi
 800578a:	f041 0120 	orrmi.w	r1, r1, #32
 800578e:	6021      	strmi	r1, [r4, #0]
 8005790:	b91b      	cbnz	r3, 800579a <_printf_i+0x15e>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	f022 0220 	bic.w	r2, r2, #32
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	2210      	movs	r2, #16
 800579c:	e7b7      	b.n	800570e <_printf_i+0xd2>
 800579e:	064d      	lsls	r5, r1, #25
 80057a0:	bf48      	it	mi
 80057a2:	b29b      	uxthmi	r3, r3
 80057a4:	e7ef      	b.n	8005786 <_printf_i+0x14a>
 80057a6:	4665      	mov	r5, ip
 80057a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ac:	fb02 3311 	mls	r3, r2, r1, r3
 80057b0:	5cc3      	ldrb	r3, [r0, r3]
 80057b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80057b6:	460b      	mov	r3, r1
 80057b8:	2900      	cmp	r1, #0
 80057ba:	d1f5      	bne.n	80057a8 <_printf_i+0x16c>
 80057bc:	e7b9      	b.n	8005732 <_printf_i+0xf6>
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	6961      	ldr	r1, [r4, #20]
 80057c4:	1d18      	adds	r0, r3, #4
 80057c6:	6010      	str	r0, [r2, #0]
 80057c8:	0628      	lsls	r0, r5, #24
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	d501      	bpl.n	80057d2 <_printf_i+0x196>
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	e002      	b.n	80057d8 <_printf_i+0x19c>
 80057d2:	066a      	lsls	r2, r5, #25
 80057d4:	d5fb      	bpl.n	80057ce <_printf_i+0x192>
 80057d6:	8019      	strh	r1, [r3, #0]
 80057d8:	2300      	movs	r3, #0
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	4665      	mov	r5, ip
 80057de:	e7b9      	b.n	8005754 <_printf_i+0x118>
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	1d19      	adds	r1, r3, #4
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	681d      	ldr	r5, [r3, #0]
 80057e8:	6862      	ldr	r2, [r4, #4]
 80057ea:	2100      	movs	r1, #0
 80057ec:	4628      	mov	r0, r5
 80057ee:	f7fa fcff 	bl	80001f0 <memchr>
 80057f2:	b108      	cbz	r0, 80057f8 <_printf_i+0x1bc>
 80057f4:	1b40      	subs	r0, r0, r5
 80057f6:	6060      	str	r0, [r4, #4]
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	6123      	str	r3, [r4, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005802:	e7a7      	b.n	8005754 <_printf_i+0x118>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	462a      	mov	r2, r5
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d0aa      	beq.n	8005768 <_printf_i+0x12c>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	079b      	lsls	r3, r3, #30
 8005816:	d413      	bmi.n	8005840 <_printf_i+0x204>
 8005818:	68e0      	ldr	r0, [r4, #12]
 800581a:	9b03      	ldr	r3, [sp, #12]
 800581c:	4298      	cmp	r0, r3
 800581e:	bfb8      	it	lt
 8005820:	4618      	movlt	r0, r3
 8005822:	e7a3      	b.n	800576c <_printf_i+0x130>
 8005824:	2301      	movs	r3, #1
 8005826:	464a      	mov	r2, r9
 8005828:	4639      	mov	r1, r7
 800582a:	4630      	mov	r0, r6
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d09a      	beq.n	8005768 <_printf_i+0x12c>
 8005832:	3501      	adds	r5, #1
 8005834:	68e3      	ldr	r3, [r4, #12]
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	42ab      	cmp	r3, r5
 800583c:	dcf2      	bgt.n	8005824 <_printf_i+0x1e8>
 800583e:	e7eb      	b.n	8005818 <_printf_i+0x1dc>
 8005840:	2500      	movs	r5, #0
 8005842:	f104 0919 	add.w	r9, r4, #25
 8005846:	e7f5      	b.n	8005834 <_printf_i+0x1f8>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ac      	bne.n	80057a6 <_printf_i+0x16a>
 800584c:	7803      	ldrb	r3, [r0, #0]
 800584e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005852:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005856:	e76c      	b.n	8005732 <_printf_i+0xf6>
 8005858:	0800725a 	.word	0x0800725a
 800585c:	0800726b 	.word	0x0800726b

08005860 <siprintf>:
 8005860:	b40e      	push	{r1, r2, r3}
 8005862:	b500      	push	{lr}
 8005864:	b09c      	sub	sp, #112	; 0x70
 8005866:	ab1d      	add	r3, sp, #116	; 0x74
 8005868:	9002      	str	r0, [sp, #8]
 800586a:	9006      	str	r0, [sp, #24]
 800586c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005870:	4809      	ldr	r0, [pc, #36]	; (8005898 <siprintf+0x38>)
 8005872:	9107      	str	r1, [sp, #28]
 8005874:	9104      	str	r1, [sp, #16]
 8005876:	4909      	ldr	r1, [pc, #36]	; (800589c <siprintf+0x3c>)
 8005878:	f853 2b04 	ldr.w	r2, [r3], #4
 800587c:	9105      	str	r1, [sp, #20]
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	a902      	add	r1, sp, #8
 8005884:	f001 fa5c 	bl	8006d40 <_svfiprintf_r>
 8005888:	9b02      	ldr	r3, [sp, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	b01c      	add	sp, #112	; 0x70
 8005890:	f85d eb04 	ldr.w	lr, [sp], #4
 8005894:	b003      	add	sp, #12
 8005896:	4770      	bx	lr
 8005898:	2000000c 	.word	0x2000000c
 800589c:	ffff0208 	.word	0xffff0208

080058a0 <quorem>:
 80058a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	6903      	ldr	r3, [r0, #16]
 80058a6:	690c      	ldr	r4, [r1, #16]
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	4680      	mov	r8, r0
 80058ac:	f2c0 8082 	blt.w	80059b4 <quorem+0x114>
 80058b0:	3c01      	subs	r4, #1
 80058b2:	f101 0714 	add.w	r7, r1, #20
 80058b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80058ba:	f100 0614 	add.w	r6, r0, #20
 80058be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058c6:	eb06 030c 	add.w	r3, r6, ip
 80058ca:	3501      	adds	r5, #1
 80058cc:	eb07 090c 	add.w	r9, r7, ip
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80058d6:	b395      	cbz	r5, 800593e <quorem+0x9e>
 80058d8:	f04f 0a00 	mov.w	sl, #0
 80058dc:	4638      	mov	r0, r7
 80058de:	46b6      	mov	lr, r6
 80058e0:	46d3      	mov	fp, sl
 80058e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80058e6:	b293      	uxth	r3, r2
 80058e8:	fb05 a303 	mla	r3, r5, r3, sl
 80058ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ebab 0303 	sub.w	r3, fp, r3
 80058f6:	0c12      	lsrs	r2, r2, #16
 80058f8:	f8de b000 	ldr.w	fp, [lr]
 80058fc:	fb05 a202 	mla	r2, r5, r2, sl
 8005900:	fa13 f38b 	uxtah	r3, r3, fp
 8005904:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005908:	fa1f fb82 	uxth.w	fp, r2
 800590c:	f8de 2000 	ldr.w	r2, [lr]
 8005910:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591e:	4581      	cmp	r9, r0
 8005920:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005924:	f84e 3b04 	str.w	r3, [lr], #4
 8005928:	d2db      	bcs.n	80058e2 <quorem+0x42>
 800592a:	f856 300c 	ldr.w	r3, [r6, ip]
 800592e:	b933      	cbnz	r3, 800593e <quorem+0x9e>
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	3b04      	subs	r3, #4
 8005934:	429e      	cmp	r6, r3
 8005936:	461a      	mov	r2, r3
 8005938:	d330      	bcc.n	800599c <quorem+0xfc>
 800593a:	f8c8 4010 	str.w	r4, [r8, #16]
 800593e:	4640      	mov	r0, r8
 8005940:	f001 f828 	bl	8006994 <__mcmp>
 8005944:	2800      	cmp	r0, #0
 8005946:	db25      	blt.n	8005994 <quorem+0xf4>
 8005948:	3501      	adds	r5, #1
 800594a:	4630      	mov	r0, r6
 800594c:	f04f 0c00 	mov.w	ip, #0
 8005950:	f857 2b04 	ldr.w	r2, [r7], #4
 8005954:	f8d0 e000 	ldr.w	lr, [r0]
 8005958:	b293      	uxth	r3, r2
 800595a:	ebac 0303 	sub.w	r3, ip, r3
 800595e:	0c12      	lsrs	r2, r2, #16
 8005960:	fa13 f38e 	uxtah	r3, r3, lr
 8005964:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005972:	45b9      	cmp	r9, r7
 8005974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005978:	f840 3b04 	str.w	r3, [r0], #4
 800597c:	d2e8      	bcs.n	8005950 <quorem+0xb0>
 800597e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005982:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005986:	b92a      	cbnz	r2, 8005994 <quorem+0xf4>
 8005988:	3b04      	subs	r3, #4
 800598a:	429e      	cmp	r6, r3
 800598c:	461a      	mov	r2, r3
 800598e:	d30b      	bcc.n	80059a8 <quorem+0x108>
 8005990:	f8c8 4010 	str.w	r4, [r8, #16]
 8005994:	4628      	mov	r0, r5
 8005996:	b003      	add	sp, #12
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	3b04      	subs	r3, #4
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	d1ca      	bne.n	800593a <quorem+0x9a>
 80059a4:	3c01      	subs	r4, #1
 80059a6:	e7c5      	b.n	8005934 <quorem+0x94>
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	3b04      	subs	r3, #4
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	d1ef      	bne.n	8005990 <quorem+0xf0>
 80059b0:	3c01      	subs	r4, #1
 80059b2:	e7ea      	b.n	800598a <quorem+0xea>
 80059b4:	2000      	movs	r0, #0
 80059b6:	e7ee      	b.n	8005996 <quorem+0xf6>

080059b8 <_dtoa_r>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	ec57 6b10 	vmov	r6, r7, d0
 80059c0:	b097      	sub	sp, #92	; 0x5c
 80059c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059c4:	9106      	str	r1, [sp, #24]
 80059c6:	4604      	mov	r4, r0
 80059c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80059ca:	9312      	str	r3, [sp, #72]	; 0x48
 80059cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059d0:	e9cd 6700 	strd	r6, r7, [sp]
 80059d4:	b93d      	cbnz	r5, 80059e6 <_dtoa_r+0x2e>
 80059d6:	2010      	movs	r0, #16
 80059d8:	f000 fdb4 	bl	8006544 <malloc>
 80059dc:	6260      	str	r0, [r4, #36]	; 0x24
 80059de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059e2:	6005      	str	r5, [r0, #0]
 80059e4:	60c5      	str	r5, [r0, #12]
 80059e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	b151      	cbz	r1, 8005a02 <_dtoa_r+0x4a>
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	604a      	str	r2, [r1, #4]
 80059f0:	2301      	movs	r3, #1
 80059f2:	4093      	lsls	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fdeb 	bl	80065d2 <_Bfree>
 80059fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	1e3b      	subs	r3, r7, #0
 8005a04:	bfbb      	ittet	lt
 8005a06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a0a:	9301      	strlt	r3, [sp, #4]
 8005a0c:	2300      	movge	r3, #0
 8005a0e:	2201      	movlt	r2, #1
 8005a10:	bfac      	ite	ge
 8005a12:	f8c8 3000 	strge.w	r3, [r8]
 8005a16:	f8c8 2000 	strlt.w	r2, [r8]
 8005a1a:	4baf      	ldr	r3, [pc, #700]	; (8005cd8 <_dtoa_r+0x320>)
 8005a1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a20:	ea33 0308 	bics.w	r3, r3, r8
 8005a24:	d114      	bne.n	8005a50 <_dtoa_r+0x98>
 8005a26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	9b00      	ldr	r3, [sp, #0]
 8005a30:	b923      	cbnz	r3, 8005a3c <_dtoa_r+0x84>
 8005a32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f000 8542 	beq.w	80064c0 <_dtoa_r+0xb08>
 8005a3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005cec <_dtoa_r+0x334>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8544 	beq.w	80064d0 <_dtoa_r+0xb18>
 8005a48:	f10b 0303 	add.w	r3, fp, #3
 8005a4c:	f000 bd3e 	b.w	80064cc <_dtoa_r+0xb14>
 8005a50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2300      	movs	r3, #0
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fb f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a60:	4681      	mov	r9, r0
 8005a62:	b168      	cbz	r0, 8005a80 <_dtoa_r+0xc8>
 8005a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a66:	2301      	movs	r3, #1
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8524 	beq.w	80064ba <_dtoa_r+0xb02>
 8005a72:	4b9a      	ldr	r3, [pc, #616]	; (8005cdc <_dtoa_r+0x324>)
 8005a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a76:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	f000 bd28 	b.w	80064d0 <_dtoa_r+0xb18>
 8005a80:	aa14      	add	r2, sp, #80	; 0x50
 8005a82:	a915      	add	r1, sp, #84	; 0x54
 8005a84:	ec47 6b10 	vmov	d0, r6, r7
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fffa 	bl	8006a82 <__d2b>
 8005a8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a92:	9004      	str	r0, [sp, #16]
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	d07c      	beq.n	8005b92 <_dtoa_r+0x1da>
 8005a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005aa0:	46b2      	mov	sl, r6
 8005aa2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005aaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4b8b      	ldr	r3, [pc, #556]	; (8005ce0 <_dtoa_r+0x328>)
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	f7fa fbef 	bl	8000298 <__aeabi_dsub>
 8005aba:	a381      	add	r3, pc, #516	; (adr r3, 8005cc0 <_dtoa_r+0x308>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fda2 	bl	8000608 <__aeabi_dmul>
 8005ac4:	a380      	add	r3, pc, #512	; (adr r3, 8005cc8 <_dtoa_r+0x310>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fbe7 	bl	800029c <__adddf3>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	f7fa fd2e 	bl	8000534 <__aeabi_i2d>
 8005ad8:	a37d      	add	r3, pc, #500	; (adr r3, 8005cd0 <_dtoa_r+0x318>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f7fa fd93 	bl	8000608 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7fa fbd7 	bl	800029c <__adddf3>
 8005aee:	4606      	mov	r6, r0
 8005af0:	460f      	mov	r7, r1
 8005af2:	f7fb f839 	bl	8000b68 <__aeabi_d2iz>
 8005af6:	2200      	movs	r2, #0
 8005af8:	4682      	mov	sl, r0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fff4 	bl	8000aec <__aeabi_dcmplt>
 8005b04:	b148      	cbz	r0, 8005b1a <_dtoa_r+0x162>
 8005b06:	4650      	mov	r0, sl
 8005b08:	f7fa fd14 	bl	8000534 <__aeabi_i2d>
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	463b      	mov	r3, r7
 8005b10:	f7fa ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b14:	b908      	cbnz	r0, 8005b1a <_dtoa_r+0x162>
 8005b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b1a:	f1ba 0f16 	cmp.w	sl, #22
 8005b1e:	d859      	bhi.n	8005bd4 <_dtoa_r+0x21c>
 8005b20:	4970      	ldr	r1, [pc, #448]	; (8005ce4 <_dtoa_r+0x32c>)
 8005b22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2e:	f7fa fffb 	bl	8000b28 <__aeabi_dcmpgt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d050      	beq.n	8005bd8 <_dtoa_r+0x220>
 8005b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b40:	1b5d      	subs	r5, r3, r5
 8005b42:	f1b5 0801 	subs.w	r8, r5, #1
 8005b46:	bf49      	itett	mi
 8005b48:	f1c5 0301 	rsbmi	r3, r5, #1
 8005b4c:	2300      	movpl	r3, #0
 8005b4e:	9305      	strmi	r3, [sp, #20]
 8005b50:	f04f 0800 	movmi.w	r8, #0
 8005b54:	bf58      	it	pl
 8005b56:	9305      	strpl	r3, [sp, #20]
 8005b58:	f1ba 0f00 	cmp.w	sl, #0
 8005b5c:	db3e      	blt.n	8005bdc <_dtoa_r+0x224>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	44d0      	add	r8, sl
 8005b62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005b66:	9307      	str	r3, [sp, #28]
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	f200 8090 	bhi.w	8005c90 <_dtoa_r+0x2d8>
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	bfc4      	itt	gt
 8005b74:	3b04      	subgt	r3, #4
 8005b76:	9306      	strgt	r3, [sp, #24]
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8005b7e:	bfcc      	ite	gt
 8005b80:	2500      	movgt	r5, #0
 8005b82:	2501      	movle	r5, #1
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	f200 808f 	bhi.w	8005ca8 <_dtoa_r+0x2f0>
 8005b8a:	e8df f003 	tbb	[pc, r3]
 8005b8e:	7f7d      	.short	0x7f7d
 8005b90:	7131      	.short	0x7131
 8005b92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005b96:	441d      	add	r5, r3
 8005b98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005b9c:	2820      	cmp	r0, #32
 8005b9e:	dd13      	ble.n	8005bc8 <_dtoa_r+0x210>
 8005ba0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	fa08 f800 	lsl.w	r8, r8, r0
 8005baa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005bae:	fa23 f000 	lsr.w	r0, r3, r0
 8005bb2:	ea48 0000 	orr.w	r0, r8, r0
 8005bb6:	f7fa fcad 	bl	8000514 <__aeabi_ui2d>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4682      	mov	sl, r0
 8005bbe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005bc2:	3d01      	subs	r5, #1
 8005bc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bc6:	e772      	b.n	8005aae <_dtoa_r+0xf6>
 8005bc8:	9b00      	ldr	r3, [sp, #0]
 8005bca:	f1c0 0020 	rsb	r0, r0, #32
 8005bce:	fa03 f000 	lsl.w	r0, r3, r0
 8005bd2:	e7f0      	b.n	8005bb6 <_dtoa_r+0x1fe>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e7b1      	b.n	8005b3c <_dtoa_r+0x184>
 8005bd8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005bda:	e7b0      	b.n	8005b3e <_dtoa_r+0x186>
 8005bdc:	9b05      	ldr	r3, [sp, #20]
 8005bde:	eba3 030a 	sub.w	r3, r3, sl
 8005be2:	9305      	str	r3, [sp, #20]
 8005be4:	f1ca 0300 	rsb	r3, sl, #0
 8005be8:	9307      	str	r3, [sp, #28]
 8005bea:	2300      	movs	r3, #0
 8005bec:	930e      	str	r3, [sp, #56]	; 0x38
 8005bee:	e7bb      	b.n	8005b68 <_dtoa_r+0x1b0>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dd59      	ble.n	8005cae <_dtoa_r+0x2f6>
 8005bfa:	9302      	str	r3, [sp, #8]
 8005bfc:	4699      	mov	r9, r3
 8005bfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c00:	2200      	movs	r2, #0
 8005c02:	6072      	str	r2, [r6, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	f102 0014 	add.w	r0, r2, #20
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	6871      	ldr	r1, [r6, #4]
 8005c0e:	d953      	bls.n	8005cb8 <_dtoa_r+0x300>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fcaa 	bl	800656a <_Balloc>
 8005c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	f1b9 0f0e 	cmp.w	r9, #14
 8005c1e:	f8d3 b000 	ldr.w	fp, [r3]
 8005c22:	f200 80e6 	bhi.w	8005df2 <_dtoa_r+0x43a>
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	f000 80e3 	beq.w	8005df2 <_dtoa_r+0x43a>
 8005c2c:	ed9d 7b00 	vldr	d7, [sp]
 8005c30:	f1ba 0f00 	cmp.w	sl, #0
 8005c34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005c38:	dd74      	ble.n	8005d24 <_dtoa_r+0x36c>
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <_dtoa_r+0x32c>)
 8005c3c:	f00a 030f 	and.w	r3, sl, #15
 8005c40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c44:	ed93 7b00 	vldr	d7, [r3]
 8005c48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c4c:	06f0      	lsls	r0, r6, #27
 8005c4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005c52:	d565      	bpl.n	8005d20 <_dtoa_r+0x368>
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <_dtoa_r+0x330>)
 8005c56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c5e:	f7fa fdfd 	bl	800085c <__aeabi_ddiv>
 8005c62:	e9cd 0100 	strd	r0, r1, [sp]
 8005c66:	f006 060f 	and.w	r6, r6, #15
 8005c6a:	2503      	movs	r5, #3
 8005c6c:	4f1e      	ldr	r7, [pc, #120]	; (8005ce8 <_dtoa_r+0x330>)
 8005c6e:	e04c      	b.n	8005d0a <_dtoa_r+0x352>
 8005c70:	2301      	movs	r3, #1
 8005c72:	930a      	str	r3, [sp, #40]	; 0x28
 8005c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c76:	4453      	add	r3, sl
 8005c78:	f103 0901 	add.w	r9, r3, #1
 8005c7c:	9302      	str	r3, [sp, #8]
 8005c7e:	464b      	mov	r3, r9
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bfb8      	it	lt
 8005c84:	2301      	movlt	r3, #1
 8005c86:	e7ba      	b.n	8005bfe <_dtoa_r+0x246>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e7b2      	b.n	8005bf2 <_dtoa_r+0x23a>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7f0      	b.n	8005c72 <_dtoa_r+0x2ba>
 8005c90:	2501      	movs	r5, #1
 8005c92:	2300      	movs	r3, #0
 8005c94:	9306      	str	r3, [sp, #24]
 8005c96:	950a      	str	r5, [sp, #40]	; 0x28
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	9302      	str	r3, [sp, #8]
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2312      	movs	r3, #18
 8005ca4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ca6:	e7aa      	b.n	8005bfe <_dtoa_r+0x246>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	930a      	str	r3, [sp, #40]	; 0x28
 8005cac:	e7f4      	b.n	8005c98 <_dtoa_r+0x2e0>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9302      	str	r3, [sp, #8]
 8005cb2:	4699      	mov	r9, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	e7f5      	b.n	8005ca4 <_dtoa_r+0x2ec>
 8005cb8:	3101      	adds	r1, #1
 8005cba:	6071      	str	r1, [r6, #4]
 8005cbc:	0052      	lsls	r2, r2, #1
 8005cbe:	e7a2      	b.n	8005c06 <_dtoa_r+0x24e>
 8005cc0:	636f4361 	.word	0x636f4361
 8005cc4:	3fd287a7 	.word	0x3fd287a7
 8005cc8:	8b60c8b3 	.word	0x8b60c8b3
 8005ccc:	3fc68a28 	.word	0x3fc68a28
 8005cd0:	509f79fb 	.word	0x509f79fb
 8005cd4:	3fd34413 	.word	0x3fd34413
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	08007259 	.word	0x08007259
 8005ce0:	3ff80000 	.word	0x3ff80000
 8005ce4:	080072b8 	.word	0x080072b8
 8005ce8:	08007290 	.word	0x08007290
 8005cec:	08007285 	.word	0x08007285
 8005cf0:	07f1      	lsls	r1, r6, #31
 8005cf2:	d508      	bpl.n	8005d06 <_dtoa_r+0x34e>
 8005cf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfc:	f7fa fc84 	bl	8000608 <__aeabi_dmul>
 8005d00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d04:	3501      	adds	r5, #1
 8005d06:	1076      	asrs	r6, r6, #1
 8005d08:	3708      	adds	r7, #8
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <_dtoa_r+0x338>
 8005d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d16:	f7fa fda1 	bl	800085c <__aeabi_ddiv>
 8005d1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d1e:	e01a      	b.n	8005d56 <_dtoa_r+0x39e>
 8005d20:	2502      	movs	r5, #2
 8005d22:	e7a3      	b.n	8005c6c <_dtoa_r+0x2b4>
 8005d24:	f000 80a0 	beq.w	8005e68 <_dtoa_r+0x4b0>
 8005d28:	f1ca 0600 	rsb	r6, sl, #0
 8005d2c:	4b9f      	ldr	r3, [pc, #636]	; (8005fac <_dtoa_r+0x5f4>)
 8005d2e:	4fa0      	ldr	r7, [pc, #640]	; (8005fb0 <_dtoa_r+0x5f8>)
 8005d30:	f006 020f 	and.w	r2, r6, #15
 8005d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d40:	f7fa fc62 	bl	8000608 <__aeabi_dmul>
 8005d44:	e9cd 0100 	strd	r0, r1, [sp]
 8005d48:	1136      	asrs	r6, r6, #4
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2502      	movs	r5, #2
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d17f      	bne.n	8005e52 <_dtoa_r+0x49a>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e1      	bne.n	8005d1a <_dtoa_r+0x362>
 8005d56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8087 	beq.w	8005e6c <_dtoa_r+0x4b4>
 8005d5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b93      	ldr	r3, [pc, #588]	; (8005fb4 <_dtoa_r+0x5fc>)
 8005d66:	4630      	mov	r0, r6
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa febf 	bl	8000aec <__aeabi_dcmplt>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d07c      	beq.n	8005e6c <_dtoa_r+0x4b4>
 8005d72:	f1b9 0f00 	cmp.w	r9, #0
 8005d76:	d079      	beq.n	8005e6c <_dtoa_r+0x4b4>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dd35      	ble.n	8005dea <_dtoa_r+0x432>
 8005d7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d82:	9308      	str	r3, [sp, #32]
 8005d84:	4639      	mov	r1, r7
 8005d86:	2200      	movs	r2, #0
 8005d88:	4b8b      	ldr	r3, [pc, #556]	; (8005fb8 <_dtoa_r+0x600>)
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7fa fc3c 	bl	8000608 <__aeabi_dmul>
 8005d90:	e9cd 0100 	strd	r0, r1, [sp]
 8005d94:	9f02      	ldr	r7, [sp, #8]
 8005d96:	3501      	adds	r5, #1
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f7fa fbcb 	bl	8000534 <__aeabi_i2d>
 8005d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005da2:	f7fa fc31 	bl	8000608 <__aeabi_dmul>
 8005da6:	2200      	movs	r2, #0
 8005da8:	4b84      	ldr	r3, [pc, #528]	; (8005fbc <_dtoa_r+0x604>)
 8005daa:	f7fa fa77 	bl	800029c <__adddf3>
 8005dae:	4605      	mov	r5, r0
 8005db0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005db4:	2f00      	cmp	r7, #0
 8005db6:	d15d      	bne.n	8005e74 <_dtoa_r+0x4bc>
 8005db8:	2200      	movs	r2, #0
 8005dba:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <_dtoa_r+0x608>)
 8005dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc0:	f7fa fa6a 	bl	8000298 <__aeabi_dsub>
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4633      	mov	r3, r6
 8005dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005dcc:	f7fa feac 	bl	8000b28 <__aeabi_dcmpgt>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	f040 8288 	bne.w	80062e6 <_dtoa_r+0x92e>
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005de0:	f7fa fe84 	bl	8000aec <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 827c 	bne.w	80062e2 <_dtoa_r+0x92a>
 8005dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dee:	e9cd 2300 	strd	r2, r3, [sp]
 8005df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f2c0 8150 	blt.w	800609a <_dtoa_r+0x6e2>
 8005dfa:	f1ba 0f0e 	cmp.w	sl, #14
 8005dfe:	f300 814c 	bgt.w	800609a <_dtoa_r+0x6e2>
 8005e02:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <_dtoa_r+0x5f4>)
 8005e04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e08:	ed93 7b00 	vldr	d7, [r3]
 8005e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e14:	f280 80d8 	bge.w	8005fc8 <_dtoa_r+0x610>
 8005e18:	f1b9 0f00 	cmp.w	r9, #0
 8005e1c:	f300 80d4 	bgt.w	8005fc8 <_dtoa_r+0x610>
 8005e20:	f040 825e 	bne.w	80062e0 <_dtoa_r+0x928>
 8005e24:	2200      	movs	r2, #0
 8005e26:	4b66      	ldr	r3, [pc, #408]	; (8005fc0 <_dtoa_r+0x608>)
 8005e28:	ec51 0b17 	vmov	r0, r1, d7
 8005e2c:	f7fa fbec 	bl	8000608 <__aeabi_dmul>
 8005e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e34:	f7fa fe6e 	bl	8000b14 <__aeabi_dcmpge>
 8005e38:	464f      	mov	r7, r9
 8005e3a:	464e      	mov	r6, r9
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 8234 	bne.w	80062aa <_dtoa_r+0x8f2>
 8005e42:	2331      	movs	r3, #49	; 0x31
 8005e44:	f10b 0501 	add.w	r5, fp, #1
 8005e48:	f88b 3000 	strb.w	r3, [fp]
 8005e4c:	f10a 0a01 	add.w	sl, sl, #1
 8005e50:	e22f      	b.n	80062b2 <_dtoa_r+0x8fa>
 8005e52:	07f2      	lsls	r2, r6, #31
 8005e54:	d505      	bpl.n	8005e62 <_dtoa_r+0x4aa>
 8005e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5a:	f7fa fbd5 	bl	8000608 <__aeabi_dmul>
 8005e5e:	3501      	adds	r5, #1
 8005e60:	2301      	movs	r3, #1
 8005e62:	1076      	asrs	r6, r6, #1
 8005e64:	3708      	adds	r7, #8
 8005e66:	e772      	b.n	8005d4e <_dtoa_r+0x396>
 8005e68:	2502      	movs	r5, #2
 8005e6a:	e774      	b.n	8005d56 <_dtoa_r+0x39e>
 8005e6c:	f8cd a020 	str.w	sl, [sp, #32]
 8005e70:	464f      	mov	r7, r9
 8005e72:	e791      	b.n	8005d98 <_dtoa_r+0x3e0>
 8005e74:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <_dtoa_r+0x5f4>)
 8005e76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d047      	beq.n	8005f14 <_dtoa_r+0x55c>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	2000      	movs	r0, #0
 8005e8a:	494e      	ldr	r1, [pc, #312]	; (8005fc4 <_dtoa_r+0x60c>)
 8005e8c:	f7fa fce6 	bl	800085c <__aeabi_ddiv>
 8005e90:	462a      	mov	r2, r5
 8005e92:	4633      	mov	r3, r6
 8005e94:	f7fa fa00 	bl	8000298 <__aeabi_dsub>
 8005e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005e9c:	465d      	mov	r5, fp
 8005e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ea2:	f7fa fe61 	bl	8000b68 <__aeabi_d2iz>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	f7fa fb44 	bl	8000534 <__aeabi_i2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eb4:	f7fa f9f0 	bl	8000298 <__aeabi_dsub>
 8005eb8:	3630      	adds	r6, #48	; 0x30
 8005eba:	f805 6b01 	strb.w	r6, [r5], #1
 8005ebe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ec6:	f7fa fe11 	bl	8000aec <__aeabi_dcmplt>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d163      	bne.n	8005f96 <_dtoa_r+0x5de>
 8005ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	4937      	ldr	r1, [pc, #220]	; (8005fb4 <_dtoa_r+0x5fc>)
 8005ed6:	f7fa f9df 	bl	8000298 <__aeabi_dsub>
 8005eda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ede:	f7fa fe05 	bl	8000aec <__aeabi_dcmplt>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	f040 80b7 	bne.w	8006056 <_dtoa_r+0x69e>
 8005ee8:	eba5 030b 	sub.w	r3, r5, fp
 8005eec:	429f      	cmp	r7, r3
 8005eee:	f77f af7c 	ble.w	8005dea <_dtoa_r+0x432>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <_dtoa_r+0x600>)
 8005ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	2200      	movs	r2, #0
 8005f00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f04:	4b2c      	ldr	r3, [pc, #176]	; (8005fb8 <_dtoa_r+0x600>)
 8005f06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f0a:	f7fa fb7d 	bl	8000608 <__aeabi_dmul>
 8005f0e:	e9cd 0100 	strd	r0, r1, [sp]
 8005f12:	e7c4      	b.n	8005e9e <_dtoa_r+0x4e6>
 8005f14:	462a      	mov	r2, r5
 8005f16:	4633      	mov	r3, r6
 8005f18:	f7fa fb76 	bl	8000608 <__aeabi_dmul>
 8005f1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f20:	eb0b 0507 	add.w	r5, fp, r7
 8005f24:	465e      	mov	r6, fp
 8005f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f2a:	f7fa fe1d 	bl	8000b68 <__aeabi_d2iz>
 8005f2e:	4607      	mov	r7, r0
 8005f30:	f7fa fb00 	bl	8000534 <__aeabi_i2d>
 8005f34:	3730      	adds	r7, #48	; 0x30
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f3e:	f7fa f9ab 	bl	8000298 <__aeabi_dsub>
 8005f42:	f806 7b01 	strb.w	r7, [r6], #1
 8005f46:	42ae      	cmp	r6, r5
 8005f48:	e9cd 0100 	strd	r0, r1, [sp]
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	d126      	bne.n	8005fa0 <_dtoa_r+0x5e8>
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <_dtoa_r+0x60c>)
 8005f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f58:	f7fa f9a0 	bl	800029c <__adddf3>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f64:	f7fa fde0 	bl	8000b28 <__aeabi_dcmpgt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d174      	bne.n	8006056 <_dtoa_r+0x69e>
 8005f6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f70:	2000      	movs	r0, #0
 8005f72:	4914      	ldr	r1, [pc, #80]	; (8005fc4 <_dtoa_r+0x60c>)
 8005f74:	f7fa f990 	bl	8000298 <__aeabi_dsub>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f80:	f7fa fdb4 	bl	8000aec <__aeabi_dcmplt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f43f af30 	beq.w	8005dea <_dtoa_r+0x432>
 8005f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f8e:	2b30      	cmp	r3, #48	; 0x30
 8005f90:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f94:	d002      	beq.n	8005f9c <_dtoa_r+0x5e4>
 8005f96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005f9a:	e04a      	b.n	8006032 <_dtoa_r+0x67a>
 8005f9c:	4615      	mov	r5, r2
 8005f9e:	e7f4      	b.n	8005f8a <_dtoa_r+0x5d2>
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <_dtoa_r+0x600>)
 8005fa2:	f7fa fb31 	bl	8000608 <__aeabi_dmul>
 8005fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8005faa:	e7bc      	b.n	8005f26 <_dtoa_r+0x56e>
 8005fac:	080072b8 	.word	0x080072b8
 8005fb0:	08007290 	.word	0x08007290
 8005fb4:	3ff00000 	.word	0x3ff00000
 8005fb8:	40240000 	.word	0x40240000
 8005fbc:	401c0000 	.word	0x401c0000
 8005fc0:	40140000 	.word	0x40140000
 8005fc4:	3fe00000 	.word	0x3fe00000
 8005fc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fcc:	465d      	mov	r5, fp
 8005fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	f7fa fc41 	bl	800085c <__aeabi_ddiv>
 8005fda:	f7fa fdc5 	bl	8000b68 <__aeabi_d2iz>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	f7fa faa8 	bl	8000534 <__aeabi_i2d>
 8005fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fe8:	f7fa fb0e 	bl	8000608 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005ff8:	f7fa f94e 	bl	8000298 <__aeabi_dsub>
 8005ffc:	f805 6b01 	strb.w	r6, [r5], #1
 8006000:	eba5 060b 	sub.w	r6, r5, fp
 8006004:	45b1      	cmp	r9, r6
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	d139      	bne.n	8006080 <_dtoa_r+0x6c8>
 800600c:	f7fa f946 	bl	800029c <__adddf3>
 8006010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	f7fa fd86 	bl	8000b28 <__aeabi_dcmpgt>
 800601c:	b9c8      	cbnz	r0, 8006052 <_dtoa_r+0x69a>
 800601e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 800602a:	b110      	cbz	r0, 8006032 <_dtoa_r+0x67a>
 800602c:	f018 0f01 	tst.w	r8, #1
 8006030:	d10f      	bne.n	8006052 <_dtoa_r+0x69a>
 8006032:	9904      	ldr	r1, [sp, #16]
 8006034:	4620      	mov	r0, r4
 8006036:	f000 facc 	bl	80065d2 <_Bfree>
 800603a:	2300      	movs	r3, #0
 800603c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800603e:	702b      	strb	r3, [r5, #0]
 8006040:	f10a 0301 	add.w	r3, sl, #1
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8241 	beq.w	80064d0 <_dtoa_r+0xb18>
 800604e:	601d      	str	r5, [r3, #0]
 8006050:	e23e      	b.n	80064d0 <_dtoa_r+0xb18>
 8006052:	f8cd a020 	str.w	sl, [sp, #32]
 8006056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800605a:	2a39      	cmp	r2, #57	; 0x39
 800605c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006060:	d108      	bne.n	8006074 <_dtoa_r+0x6bc>
 8006062:	459b      	cmp	fp, r3
 8006064:	d10a      	bne.n	800607c <_dtoa_r+0x6c4>
 8006066:	9b08      	ldr	r3, [sp, #32]
 8006068:	3301      	adds	r3, #1
 800606a:	9308      	str	r3, [sp, #32]
 800606c:	2330      	movs	r3, #48	; 0x30
 800606e:	f88b 3000 	strb.w	r3, [fp]
 8006072:	465b      	mov	r3, fp
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	3201      	adds	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e78c      	b.n	8005f96 <_dtoa_r+0x5de>
 800607c:	461d      	mov	r5, r3
 800607e:	e7ea      	b.n	8006056 <_dtoa_r+0x69e>
 8006080:	2200      	movs	r2, #0
 8006082:	4b9b      	ldr	r3, [pc, #620]	; (80062f0 <_dtoa_r+0x938>)
 8006084:	f7fa fac0 	bl	8000608 <__aeabi_dmul>
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	f7fa fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006094:	2800      	cmp	r0, #0
 8006096:	d09a      	beq.n	8005fce <_dtoa_r+0x616>
 8006098:	e7cb      	b.n	8006032 <_dtoa_r+0x67a>
 800609a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800609c:	2a00      	cmp	r2, #0
 800609e:	f000 808b 	beq.w	80061b8 <_dtoa_r+0x800>
 80060a2:	9a06      	ldr	r2, [sp, #24]
 80060a4:	2a01      	cmp	r2, #1
 80060a6:	dc6e      	bgt.n	8006186 <_dtoa_r+0x7ce>
 80060a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d067      	beq.n	800617e <_dtoa_r+0x7c6>
 80060ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060b2:	9f07      	ldr	r7, [sp, #28]
 80060b4:	9d05      	ldr	r5, [sp, #20]
 80060b6:	9a05      	ldr	r2, [sp, #20]
 80060b8:	2101      	movs	r1, #1
 80060ba:	441a      	add	r2, r3
 80060bc:	4620      	mov	r0, r4
 80060be:	9205      	str	r2, [sp, #20]
 80060c0:	4498      	add	r8, r3
 80060c2:	f000 fb26 	bl	8006712 <__i2b>
 80060c6:	4606      	mov	r6, r0
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	dd0c      	ble.n	80060e6 <_dtoa_r+0x72e>
 80060cc:	f1b8 0f00 	cmp.w	r8, #0
 80060d0:	dd09      	ble.n	80060e6 <_dtoa_r+0x72e>
 80060d2:	4545      	cmp	r5, r8
 80060d4:	9a05      	ldr	r2, [sp, #20]
 80060d6:	462b      	mov	r3, r5
 80060d8:	bfa8      	it	ge
 80060da:	4643      	movge	r3, r8
 80060dc:	1ad2      	subs	r2, r2, r3
 80060de:	9205      	str	r2, [sp, #20]
 80060e0:	1aed      	subs	r5, r5, r3
 80060e2:	eba8 0803 	sub.w	r8, r8, r3
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	b1eb      	cbz	r3, 8006126 <_dtoa_r+0x76e>
 80060ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d067      	beq.n	80061c0 <_dtoa_r+0x808>
 80060f0:	b18f      	cbz	r7, 8006116 <_dtoa_r+0x75e>
 80060f2:	4631      	mov	r1, r6
 80060f4:	463a      	mov	r2, r7
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fbaa 	bl	8006850 <__pow5mult>
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	4601      	mov	r1, r0
 8006100:	4606      	mov	r6, r0
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fb0e 	bl	8006724 <__multiply>
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	9008      	str	r0, [sp, #32]
 800610c:	4620      	mov	r0, r4
 800610e:	f000 fa60 	bl	80065d2 <_Bfree>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9b07      	ldr	r3, [sp, #28]
 8006118:	1bda      	subs	r2, r3, r7
 800611a:	d004      	beq.n	8006126 <_dtoa_r+0x76e>
 800611c:	9904      	ldr	r1, [sp, #16]
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fb96 	bl	8006850 <__pow5mult>
 8006124:	9004      	str	r0, [sp, #16]
 8006126:	2101      	movs	r1, #1
 8006128:	4620      	mov	r0, r4
 800612a:	f000 faf2 	bl	8006712 <__i2b>
 800612e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006130:	4607      	mov	r7, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 81d0 	beq.w	80064d8 <_dtoa_r+0xb20>
 8006138:	461a      	mov	r2, r3
 800613a:	4601      	mov	r1, r0
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fb87 	bl	8006850 <__pow5mult>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b01      	cmp	r3, #1
 8006146:	4607      	mov	r7, r0
 8006148:	dc40      	bgt.n	80061cc <_dtoa_r+0x814>
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d139      	bne.n	80061c4 <_dtoa_r+0x80c>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006156:	2b00      	cmp	r3, #0
 8006158:	d136      	bne.n	80061c8 <_dtoa_r+0x810>
 800615a:	9b01      	ldr	r3, [sp, #4]
 800615c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006160:	0d1b      	lsrs	r3, r3, #20
 8006162:	051b      	lsls	r3, r3, #20
 8006164:	b12b      	cbz	r3, 8006172 <_dtoa_r+0x7ba>
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	f108 0801 	add.w	r8, r8, #1
 8006170:	2301      	movs	r3, #1
 8006172:	9307      	str	r3, [sp, #28]
 8006174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d12a      	bne.n	80061d0 <_dtoa_r+0x818>
 800617a:	2001      	movs	r0, #1
 800617c:	e030      	b.n	80061e0 <_dtoa_r+0x828>
 800617e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006180:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006184:	e795      	b.n	80060b2 <_dtoa_r+0x6fa>
 8006186:	9b07      	ldr	r3, [sp, #28]
 8006188:	f109 37ff 	add.w	r7, r9, #4294967295
 800618c:	42bb      	cmp	r3, r7
 800618e:	bfbf      	itttt	lt
 8006190:	9b07      	ldrlt	r3, [sp, #28]
 8006192:	9707      	strlt	r7, [sp, #28]
 8006194:	1afa      	sublt	r2, r7, r3
 8006196:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006198:	bfbb      	ittet	lt
 800619a:	189b      	addlt	r3, r3, r2
 800619c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800619e:	1bdf      	subge	r7, r3, r7
 80061a0:	2700      	movlt	r7, #0
 80061a2:	f1b9 0f00 	cmp.w	r9, #0
 80061a6:	bfb5      	itete	lt
 80061a8:	9b05      	ldrlt	r3, [sp, #20]
 80061aa:	9d05      	ldrge	r5, [sp, #20]
 80061ac:	eba3 0509 	sublt.w	r5, r3, r9
 80061b0:	464b      	movge	r3, r9
 80061b2:	bfb8      	it	lt
 80061b4:	2300      	movlt	r3, #0
 80061b6:	e77e      	b.n	80060b6 <_dtoa_r+0x6fe>
 80061b8:	9f07      	ldr	r7, [sp, #28]
 80061ba:	9d05      	ldr	r5, [sp, #20]
 80061bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80061be:	e783      	b.n	80060c8 <_dtoa_r+0x710>
 80061c0:	9a07      	ldr	r2, [sp, #28]
 80061c2:	e7ab      	b.n	800611c <_dtoa_r+0x764>
 80061c4:	2300      	movs	r3, #0
 80061c6:	e7d4      	b.n	8006172 <_dtoa_r+0x7ba>
 80061c8:	9b00      	ldr	r3, [sp, #0]
 80061ca:	e7d2      	b.n	8006172 <_dtoa_r+0x7ba>
 80061cc:	2300      	movs	r3, #0
 80061ce:	9307      	str	r3, [sp, #28]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80061d6:	6918      	ldr	r0, [r3, #16]
 80061d8:	f000 fa4d 	bl	8006676 <__hi0bits>
 80061dc:	f1c0 0020 	rsb	r0, r0, #32
 80061e0:	4440      	add	r0, r8
 80061e2:	f010 001f 	ands.w	r0, r0, #31
 80061e6:	d047      	beq.n	8006278 <_dtoa_r+0x8c0>
 80061e8:	f1c0 0320 	rsb	r3, r0, #32
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	dd3b      	ble.n	8006268 <_dtoa_r+0x8b0>
 80061f0:	9b05      	ldr	r3, [sp, #20]
 80061f2:	f1c0 001c 	rsb	r0, r0, #28
 80061f6:	4403      	add	r3, r0
 80061f8:	9305      	str	r3, [sp, #20]
 80061fa:	4405      	add	r5, r0
 80061fc:	4480      	add	r8, r0
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	dd05      	ble.n	8006210 <_dtoa_r+0x858>
 8006204:	461a      	mov	r2, r3
 8006206:	9904      	ldr	r1, [sp, #16]
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fb6f 	bl	80068ec <__lshift>
 800620e:	9004      	str	r0, [sp, #16]
 8006210:	f1b8 0f00 	cmp.w	r8, #0
 8006214:	dd05      	ble.n	8006222 <_dtoa_r+0x86a>
 8006216:	4639      	mov	r1, r7
 8006218:	4642      	mov	r2, r8
 800621a:	4620      	mov	r0, r4
 800621c:	f000 fb66 	bl	80068ec <__lshift>
 8006220:	4607      	mov	r7, r0
 8006222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006224:	b353      	cbz	r3, 800627c <_dtoa_r+0x8c4>
 8006226:	4639      	mov	r1, r7
 8006228:	9804      	ldr	r0, [sp, #16]
 800622a:	f000 fbb3 	bl	8006994 <__mcmp>
 800622e:	2800      	cmp	r0, #0
 8006230:	da24      	bge.n	800627c <_dtoa_r+0x8c4>
 8006232:	2300      	movs	r3, #0
 8006234:	220a      	movs	r2, #10
 8006236:	9904      	ldr	r1, [sp, #16]
 8006238:	4620      	mov	r0, r4
 800623a:	f000 f9e1 	bl	8006600 <__multadd>
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	9004      	str	r0, [sp, #16]
 8006242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 814d 	beq.w	80064e6 <_dtoa_r+0xb2e>
 800624c:	2300      	movs	r3, #0
 800624e:	4631      	mov	r1, r6
 8006250:	220a      	movs	r2, #10
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f9d4 	bl	8006600 <__multadd>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	4606      	mov	r6, r0
 800625e:	dc4f      	bgt.n	8006300 <_dtoa_r+0x948>
 8006260:	9b06      	ldr	r3, [sp, #24]
 8006262:	2b02      	cmp	r3, #2
 8006264:	dd4c      	ble.n	8006300 <_dtoa_r+0x948>
 8006266:	e011      	b.n	800628c <_dtoa_r+0x8d4>
 8006268:	d0c9      	beq.n	80061fe <_dtoa_r+0x846>
 800626a:	9a05      	ldr	r2, [sp, #20]
 800626c:	331c      	adds	r3, #28
 800626e:	441a      	add	r2, r3
 8006270:	9205      	str	r2, [sp, #20]
 8006272:	441d      	add	r5, r3
 8006274:	4498      	add	r8, r3
 8006276:	e7c2      	b.n	80061fe <_dtoa_r+0x846>
 8006278:	4603      	mov	r3, r0
 800627a:	e7f6      	b.n	800626a <_dtoa_r+0x8b2>
 800627c:	f1b9 0f00 	cmp.w	r9, #0
 8006280:	dc38      	bgt.n	80062f4 <_dtoa_r+0x93c>
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	2b02      	cmp	r3, #2
 8006286:	dd35      	ble.n	80062f4 <_dtoa_r+0x93c>
 8006288:	f8cd 9008 	str.w	r9, [sp, #8]
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	b963      	cbnz	r3, 80062aa <_dtoa_r+0x8f2>
 8006290:	4639      	mov	r1, r7
 8006292:	2205      	movs	r2, #5
 8006294:	4620      	mov	r0, r4
 8006296:	f000 f9b3 	bl	8006600 <__multadd>
 800629a:	4601      	mov	r1, r0
 800629c:	4607      	mov	r7, r0
 800629e:	9804      	ldr	r0, [sp, #16]
 80062a0:	f000 fb78 	bl	8006994 <__mcmp>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f73f adcc 	bgt.w	8005e42 <_dtoa_r+0x48a>
 80062aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ac:	465d      	mov	r5, fp
 80062ae:	ea6f 0a03 	mvn.w	sl, r3
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	4639      	mov	r1, r7
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f98a 	bl	80065d2 <_Bfree>
 80062be:	2e00      	cmp	r6, #0
 80062c0:	f43f aeb7 	beq.w	8006032 <_dtoa_r+0x67a>
 80062c4:	f1b9 0f00 	cmp.w	r9, #0
 80062c8:	d005      	beq.n	80062d6 <_dtoa_r+0x91e>
 80062ca:	45b1      	cmp	r9, r6
 80062cc:	d003      	beq.n	80062d6 <_dtoa_r+0x91e>
 80062ce:	4649      	mov	r1, r9
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f97e 	bl	80065d2 <_Bfree>
 80062d6:	4631      	mov	r1, r6
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 f97a 	bl	80065d2 <_Bfree>
 80062de:	e6a8      	b.n	8006032 <_dtoa_r+0x67a>
 80062e0:	2700      	movs	r7, #0
 80062e2:	463e      	mov	r6, r7
 80062e4:	e7e1      	b.n	80062aa <_dtoa_r+0x8f2>
 80062e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80062ea:	463e      	mov	r6, r7
 80062ec:	e5a9      	b.n	8005e42 <_dtoa_r+0x48a>
 80062ee:	bf00      	nop
 80062f0:	40240000 	.word	0x40240000
 80062f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80fa 	beq.w	80064f4 <_dtoa_r+0xb3c>
 8006300:	2d00      	cmp	r5, #0
 8006302:	dd05      	ble.n	8006310 <_dtoa_r+0x958>
 8006304:	4631      	mov	r1, r6
 8006306:	462a      	mov	r2, r5
 8006308:	4620      	mov	r0, r4
 800630a:	f000 faef 	bl	80068ec <__lshift>
 800630e:	4606      	mov	r6, r0
 8006310:	9b07      	ldr	r3, [sp, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04c      	beq.n	80063b0 <_dtoa_r+0x9f8>
 8006316:	6871      	ldr	r1, [r6, #4]
 8006318:	4620      	mov	r0, r4
 800631a:	f000 f926 	bl	800656a <_Balloc>
 800631e:	6932      	ldr	r2, [r6, #16]
 8006320:	3202      	adds	r2, #2
 8006322:	4605      	mov	r5, r0
 8006324:	0092      	lsls	r2, r2, #2
 8006326:	f106 010c 	add.w	r1, r6, #12
 800632a:	300c      	adds	r0, #12
 800632c:	f000 f912 	bl	8006554 <memcpy>
 8006330:	2201      	movs	r2, #1
 8006332:	4629      	mov	r1, r5
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fad9 	bl	80068ec <__lshift>
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	f8cd b014 	str.w	fp, [sp, #20]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	46b1      	mov	r9, r6
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	4606      	mov	r6, r0
 800634a:	4639      	mov	r1, r7
 800634c:	9804      	ldr	r0, [sp, #16]
 800634e:	f7ff faa7 	bl	80058a0 <quorem>
 8006352:	4649      	mov	r1, r9
 8006354:	4605      	mov	r5, r0
 8006356:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800635a:	9804      	ldr	r0, [sp, #16]
 800635c:	f000 fb1a 	bl	8006994 <__mcmp>
 8006360:	4632      	mov	r2, r6
 8006362:	9000      	str	r0, [sp, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4620      	mov	r0, r4
 8006368:	f000 fb2e 	bl	80069c8 <__mdiff>
 800636c:	68c3      	ldr	r3, [r0, #12]
 800636e:	4602      	mov	r2, r0
 8006370:	bb03      	cbnz	r3, 80063b4 <_dtoa_r+0x9fc>
 8006372:	4601      	mov	r1, r0
 8006374:	9008      	str	r0, [sp, #32]
 8006376:	9804      	ldr	r0, [sp, #16]
 8006378:	f000 fb0c 	bl	8006994 <__mcmp>
 800637c:	9a08      	ldr	r2, [sp, #32]
 800637e:	4603      	mov	r3, r0
 8006380:	4611      	mov	r1, r2
 8006382:	4620      	mov	r0, r4
 8006384:	9308      	str	r3, [sp, #32]
 8006386:	f000 f924 	bl	80065d2 <_Bfree>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	b9a3      	cbnz	r3, 80063b8 <_dtoa_r+0xa00>
 800638e:	9a06      	ldr	r2, [sp, #24]
 8006390:	b992      	cbnz	r2, 80063b8 <_dtoa_r+0xa00>
 8006392:	9a07      	ldr	r2, [sp, #28]
 8006394:	b982      	cbnz	r2, 80063b8 <_dtoa_r+0xa00>
 8006396:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800639a:	d029      	beq.n	80063f0 <_dtoa_r+0xa38>
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dd01      	ble.n	80063a6 <_dtoa_r+0x9ee>
 80063a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	1c5d      	adds	r5, r3, #1
 80063aa:	f883 8000 	strb.w	r8, [r3]
 80063ae:	e782      	b.n	80062b6 <_dtoa_r+0x8fe>
 80063b0:	4630      	mov	r0, r6
 80063b2:	e7c2      	b.n	800633a <_dtoa_r+0x982>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e7e3      	b.n	8006380 <_dtoa_r+0x9c8>
 80063b8:	9a00      	ldr	r2, [sp, #0]
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	db04      	blt.n	80063c8 <_dtoa_r+0xa10>
 80063be:	d125      	bne.n	800640c <_dtoa_r+0xa54>
 80063c0:	9a06      	ldr	r2, [sp, #24]
 80063c2:	bb1a      	cbnz	r2, 800640c <_dtoa_r+0xa54>
 80063c4:	9a07      	ldr	r2, [sp, #28]
 80063c6:	bb0a      	cbnz	r2, 800640c <_dtoa_r+0xa54>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	ddec      	ble.n	80063a6 <_dtoa_r+0x9ee>
 80063cc:	2201      	movs	r2, #1
 80063ce:	9904      	ldr	r1, [sp, #16]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fa8b 	bl	80068ec <__lshift>
 80063d6:	4639      	mov	r1, r7
 80063d8:	9004      	str	r0, [sp, #16]
 80063da:	f000 fadb 	bl	8006994 <__mcmp>
 80063de:	2800      	cmp	r0, #0
 80063e0:	dc03      	bgt.n	80063ea <_dtoa_r+0xa32>
 80063e2:	d1e0      	bne.n	80063a6 <_dtoa_r+0x9ee>
 80063e4:	f018 0f01 	tst.w	r8, #1
 80063e8:	d0dd      	beq.n	80063a6 <_dtoa_r+0x9ee>
 80063ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063ee:	d1d8      	bne.n	80063a2 <_dtoa_r+0x9ea>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	1c5d      	adds	r5, r3, #1
 80063f6:	2339      	movs	r3, #57	; 0x39
 80063f8:	7013      	strb	r3, [r2, #0]
 80063fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063fe:	2b39      	cmp	r3, #57	; 0x39
 8006400:	f105 32ff 	add.w	r2, r5, #4294967295
 8006404:	d04f      	beq.n	80064a6 <_dtoa_r+0xaee>
 8006406:	3301      	adds	r3, #1
 8006408:	7013      	strb	r3, [r2, #0]
 800640a:	e754      	b.n	80062b6 <_dtoa_r+0x8fe>
 800640c:	9a05      	ldr	r2, [sp, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f102 0501 	add.w	r5, r2, #1
 8006414:	dd06      	ble.n	8006424 <_dtoa_r+0xa6c>
 8006416:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800641a:	d0e9      	beq.n	80063f0 <_dtoa_r+0xa38>
 800641c:	f108 0801 	add.w	r8, r8, #1
 8006420:	9b05      	ldr	r3, [sp, #20]
 8006422:	e7c2      	b.n	80063aa <_dtoa_r+0x9f2>
 8006424:	9a02      	ldr	r2, [sp, #8]
 8006426:	f805 8c01 	strb.w	r8, [r5, #-1]
 800642a:	eba5 030b 	sub.w	r3, r5, fp
 800642e:	4293      	cmp	r3, r2
 8006430:	d021      	beq.n	8006476 <_dtoa_r+0xabe>
 8006432:	2300      	movs	r3, #0
 8006434:	220a      	movs	r2, #10
 8006436:	9904      	ldr	r1, [sp, #16]
 8006438:	4620      	mov	r0, r4
 800643a:	f000 f8e1 	bl	8006600 <__multadd>
 800643e:	45b1      	cmp	r9, r6
 8006440:	9004      	str	r0, [sp, #16]
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	f04f 020a 	mov.w	r2, #10
 800644a:	4649      	mov	r1, r9
 800644c:	4620      	mov	r0, r4
 800644e:	d105      	bne.n	800645c <_dtoa_r+0xaa4>
 8006450:	f000 f8d6 	bl	8006600 <__multadd>
 8006454:	4681      	mov	r9, r0
 8006456:	4606      	mov	r6, r0
 8006458:	9505      	str	r5, [sp, #20]
 800645a:	e776      	b.n	800634a <_dtoa_r+0x992>
 800645c:	f000 f8d0 	bl	8006600 <__multadd>
 8006460:	4631      	mov	r1, r6
 8006462:	4681      	mov	r9, r0
 8006464:	2300      	movs	r3, #0
 8006466:	220a      	movs	r2, #10
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f8c9 	bl	8006600 <__multadd>
 800646e:	4606      	mov	r6, r0
 8006470:	e7f2      	b.n	8006458 <_dtoa_r+0xaa0>
 8006472:	f04f 0900 	mov.w	r9, #0
 8006476:	2201      	movs	r2, #1
 8006478:	9904      	ldr	r1, [sp, #16]
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fa36 	bl	80068ec <__lshift>
 8006480:	4639      	mov	r1, r7
 8006482:	9004      	str	r0, [sp, #16]
 8006484:	f000 fa86 	bl	8006994 <__mcmp>
 8006488:	2800      	cmp	r0, #0
 800648a:	dcb6      	bgt.n	80063fa <_dtoa_r+0xa42>
 800648c:	d102      	bne.n	8006494 <_dtoa_r+0xadc>
 800648e:	f018 0f01 	tst.w	r8, #1
 8006492:	d1b2      	bne.n	80063fa <_dtoa_r+0xa42>
 8006494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006498:	2b30      	cmp	r3, #48	; 0x30
 800649a:	f105 32ff 	add.w	r2, r5, #4294967295
 800649e:	f47f af0a 	bne.w	80062b6 <_dtoa_r+0x8fe>
 80064a2:	4615      	mov	r5, r2
 80064a4:	e7f6      	b.n	8006494 <_dtoa_r+0xadc>
 80064a6:	4593      	cmp	fp, r2
 80064a8:	d105      	bne.n	80064b6 <_dtoa_r+0xafe>
 80064aa:	2331      	movs	r3, #49	; 0x31
 80064ac:	f10a 0a01 	add.w	sl, sl, #1
 80064b0:	f88b 3000 	strb.w	r3, [fp]
 80064b4:	e6ff      	b.n	80062b6 <_dtoa_r+0x8fe>
 80064b6:	4615      	mov	r5, r2
 80064b8:	e79f      	b.n	80063fa <_dtoa_r+0xa42>
 80064ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006520 <_dtoa_r+0xb68>
 80064be:	e007      	b.n	80064d0 <_dtoa_r+0xb18>
 80064c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006524 <_dtoa_r+0xb6c>
 80064c6:	b11b      	cbz	r3, 80064d0 <_dtoa_r+0xb18>
 80064c8:	f10b 0308 	add.w	r3, fp, #8
 80064cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4658      	mov	r0, fp
 80064d2:	b017      	add	sp, #92	; 0x5c
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f77f ae35 	ble.w	800614a <_dtoa_r+0x792>
 80064e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	e649      	b.n	800617a <_dtoa_r+0x7c2>
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dc03      	bgt.n	80064f4 <_dtoa_r+0xb3c>
 80064ec:	9b06      	ldr	r3, [sp, #24]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	f73f aecc 	bgt.w	800628c <_dtoa_r+0x8d4>
 80064f4:	465d      	mov	r5, fp
 80064f6:	4639      	mov	r1, r7
 80064f8:	9804      	ldr	r0, [sp, #16]
 80064fa:	f7ff f9d1 	bl	80058a0 <quorem>
 80064fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006502:	f805 8b01 	strb.w	r8, [r5], #1
 8006506:	9a02      	ldr	r2, [sp, #8]
 8006508:	eba5 030b 	sub.w	r3, r5, fp
 800650c:	429a      	cmp	r2, r3
 800650e:	ddb0      	ble.n	8006472 <_dtoa_r+0xaba>
 8006510:	2300      	movs	r3, #0
 8006512:	220a      	movs	r2, #10
 8006514:	9904      	ldr	r1, [sp, #16]
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f872 	bl	8006600 <__multadd>
 800651c:	9004      	str	r0, [sp, #16]
 800651e:	e7ea      	b.n	80064f6 <_dtoa_r+0xb3e>
 8006520:	08007258 	.word	0x08007258
 8006524:	0800727c 	.word	0x0800727c

08006528 <_localeconv_r>:
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <_localeconv_r+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a18      	ldr	r0, [r3, #32]
 800652e:	4b04      	ldr	r3, [pc, #16]	; (8006540 <_localeconv_r+0x18>)
 8006530:	2800      	cmp	r0, #0
 8006532:	bf08      	it	eq
 8006534:	4618      	moveq	r0, r3
 8006536:	30f0      	adds	r0, #240	; 0xf0
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	2000000c 	.word	0x2000000c
 8006540:	20000070 	.word	0x20000070

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 bb45 	b.w	8006bd8 <_malloc_r>
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c

08006554 <memcpy>:
 8006554:	b510      	push	{r4, lr}
 8006556:	1e43      	subs	r3, r0, #1
 8006558:	440a      	add	r2, r1
 800655a:	4291      	cmp	r1, r2
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	bd10      	pop	{r4, pc}
 8006560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006568:	e7f7      	b.n	800655a <memcpy+0x6>

0800656a <_Balloc>:
 800656a:	b570      	push	{r4, r5, r6, lr}
 800656c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800656e:	4604      	mov	r4, r0
 8006570:	460e      	mov	r6, r1
 8006572:	b93d      	cbnz	r5, 8006584 <_Balloc+0x1a>
 8006574:	2010      	movs	r0, #16
 8006576:	f7ff ffe5 	bl	8006544 <malloc>
 800657a:	6260      	str	r0, [r4, #36]	; 0x24
 800657c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006580:	6005      	str	r5, [r0, #0]
 8006582:	60c5      	str	r5, [r0, #12]
 8006584:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006586:	68eb      	ldr	r3, [r5, #12]
 8006588:	b183      	cbz	r3, 80065ac <_Balloc+0x42>
 800658a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006592:	b9b8      	cbnz	r0, 80065c4 <_Balloc+0x5a>
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f506 	lsl.w	r5, r1, r6
 800659a:	1d6a      	adds	r2, r5, #5
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fabe 	bl	8006b20 <_calloc_r>
 80065a4:	b160      	cbz	r0, 80065c0 <_Balloc+0x56>
 80065a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065aa:	e00e      	b.n	80065ca <_Balloc+0x60>
 80065ac:	2221      	movs	r2, #33	; 0x21
 80065ae:	2104      	movs	r1, #4
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fab5 	bl	8006b20 <_calloc_r>
 80065b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b8:	60e8      	str	r0, [r5, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e4      	bne.n	800658a <_Balloc+0x20>
 80065c0:	2000      	movs	r0, #0
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	6802      	ldr	r2, [r0, #0]
 80065c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065ca:	2300      	movs	r3, #0
 80065cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d0:	e7f7      	b.n	80065c2 <_Balloc+0x58>

080065d2 <_Bfree>:
 80065d2:	b570      	push	{r4, r5, r6, lr}
 80065d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065d6:	4606      	mov	r6, r0
 80065d8:	460d      	mov	r5, r1
 80065da:	b93c      	cbnz	r4, 80065ec <_Bfree+0x1a>
 80065dc:	2010      	movs	r0, #16
 80065de:	f7ff ffb1 	bl	8006544 <malloc>
 80065e2:	6270      	str	r0, [r6, #36]	; 0x24
 80065e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e8:	6004      	str	r4, [r0, #0]
 80065ea:	60c4      	str	r4, [r0, #12]
 80065ec:	b13d      	cbz	r5, 80065fe <_Bfree+0x2c>
 80065ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065f0:	686a      	ldr	r2, [r5, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f8:	6029      	str	r1, [r5, #0]
 80065fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065fe:	bd70      	pop	{r4, r5, r6, pc}

08006600 <__multadd>:
 8006600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006604:	690d      	ldr	r5, [r1, #16]
 8006606:	461f      	mov	r7, r3
 8006608:	4606      	mov	r6, r0
 800660a:	460c      	mov	r4, r1
 800660c:	f101 0c14 	add.w	ip, r1, #20
 8006610:	2300      	movs	r3, #0
 8006612:	f8dc 0000 	ldr.w	r0, [ip]
 8006616:	b281      	uxth	r1, r0
 8006618:	fb02 7101 	mla	r1, r2, r1, r7
 800661c:	0c0f      	lsrs	r7, r1, #16
 800661e:	0c00      	lsrs	r0, r0, #16
 8006620:	fb02 7000 	mla	r0, r2, r0, r7
 8006624:	b289      	uxth	r1, r1
 8006626:	3301      	adds	r3, #1
 8006628:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800662c:	429d      	cmp	r5, r3
 800662e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006632:	f84c 1b04 	str.w	r1, [ip], #4
 8006636:	dcec      	bgt.n	8006612 <__multadd+0x12>
 8006638:	b1d7      	cbz	r7, 8006670 <__multadd+0x70>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	42ab      	cmp	r3, r5
 800663e:	dc12      	bgt.n	8006666 <__multadd+0x66>
 8006640:	6861      	ldr	r1, [r4, #4]
 8006642:	4630      	mov	r0, r6
 8006644:	3101      	adds	r1, #1
 8006646:	f7ff ff90 	bl	800656a <_Balloc>
 800664a:	6922      	ldr	r2, [r4, #16]
 800664c:	3202      	adds	r2, #2
 800664e:	f104 010c 	add.w	r1, r4, #12
 8006652:	4680      	mov	r8, r0
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	300c      	adds	r0, #12
 8006658:	f7ff ff7c 	bl	8006554 <memcpy>
 800665c:	4621      	mov	r1, r4
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ffb7 	bl	80065d2 <_Bfree>
 8006664:	4644      	mov	r4, r8
 8006666:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800666a:	3501      	adds	r5, #1
 800666c:	615f      	str	r7, [r3, #20]
 800666e:	6125      	str	r5, [r4, #16]
 8006670:	4620      	mov	r0, r4
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006676 <__hi0bits>:
 8006676:	0c02      	lsrs	r2, r0, #16
 8006678:	0412      	lsls	r2, r2, #16
 800667a:	4603      	mov	r3, r0
 800667c:	b9b2      	cbnz	r2, 80066ac <__hi0bits+0x36>
 800667e:	0403      	lsls	r3, r0, #16
 8006680:	2010      	movs	r0, #16
 8006682:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006686:	bf04      	itt	eq
 8006688:	021b      	lsleq	r3, r3, #8
 800668a:	3008      	addeq	r0, #8
 800668c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006690:	bf04      	itt	eq
 8006692:	011b      	lsleq	r3, r3, #4
 8006694:	3004      	addeq	r0, #4
 8006696:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800669a:	bf04      	itt	eq
 800669c:	009b      	lsleq	r3, r3, #2
 800669e:	3002      	addeq	r0, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db06      	blt.n	80066b2 <__hi0bits+0x3c>
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	d503      	bpl.n	80066b0 <__hi0bits+0x3a>
 80066a8:	3001      	adds	r0, #1
 80066aa:	4770      	bx	lr
 80066ac:	2000      	movs	r0, #0
 80066ae:	e7e8      	b.n	8006682 <__hi0bits+0xc>
 80066b0:	2020      	movs	r0, #32
 80066b2:	4770      	bx	lr

080066b4 <__lo0bits>:
 80066b4:	6803      	ldr	r3, [r0, #0]
 80066b6:	f013 0207 	ands.w	r2, r3, #7
 80066ba:	4601      	mov	r1, r0
 80066bc:	d00b      	beq.n	80066d6 <__lo0bits+0x22>
 80066be:	07da      	lsls	r2, r3, #31
 80066c0:	d423      	bmi.n	800670a <__lo0bits+0x56>
 80066c2:	0798      	lsls	r0, r3, #30
 80066c4:	bf49      	itett	mi
 80066c6:	085b      	lsrmi	r3, r3, #1
 80066c8:	089b      	lsrpl	r3, r3, #2
 80066ca:	2001      	movmi	r0, #1
 80066cc:	600b      	strmi	r3, [r1, #0]
 80066ce:	bf5c      	itt	pl
 80066d0:	600b      	strpl	r3, [r1, #0]
 80066d2:	2002      	movpl	r0, #2
 80066d4:	4770      	bx	lr
 80066d6:	b298      	uxth	r0, r3
 80066d8:	b9a8      	cbnz	r0, 8006706 <__lo0bits+0x52>
 80066da:	0c1b      	lsrs	r3, r3, #16
 80066dc:	2010      	movs	r0, #16
 80066de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066e2:	bf04      	itt	eq
 80066e4:	0a1b      	lsreq	r3, r3, #8
 80066e6:	3008      	addeq	r0, #8
 80066e8:	071a      	lsls	r2, r3, #28
 80066ea:	bf04      	itt	eq
 80066ec:	091b      	lsreq	r3, r3, #4
 80066ee:	3004      	addeq	r0, #4
 80066f0:	079a      	lsls	r2, r3, #30
 80066f2:	bf04      	itt	eq
 80066f4:	089b      	lsreq	r3, r3, #2
 80066f6:	3002      	addeq	r0, #2
 80066f8:	07da      	lsls	r2, r3, #31
 80066fa:	d402      	bmi.n	8006702 <__lo0bits+0x4e>
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	d006      	beq.n	800670e <__lo0bits+0x5a>
 8006700:	3001      	adds	r0, #1
 8006702:	600b      	str	r3, [r1, #0]
 8006704:	4770      	bx	lr
 8006706:	4610      	mov	r0, r2
 8006708:	e7e9      	b.n	80066de <__lo0bits+0x2a>
 800670a:	2000      	movs	r0, #0
 800670c:	4770      	bx	lr
 800670e:	2020      	movs	r0, #32
 8006710:	4770      	bx	lr

08006712 <__i2b>:
 8006712:	b510      	push	{r4, lr}
 8006714:	460c      	mov	r4, r1
 8006716:	2101      	movs	r1, #1
 8006718:	f7ff ff27 	bl	800656a <_Balloc>
 800671c:	2201      	movs	r2, #1
 800671e:	6144      	str	r4, [r0, #20]
 8006720:	6102      	str	r2, [r0, #16]
 8006722:	bd10      	pop	{r4, pc}

08006724 <__multiply>:
 8006724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4614      	mov	r4, r2
 800672a:	690a      	ldr	r2, [r1, #16]
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	429a      	cmp	r2, r3
 8006730:	bfb8      	it	lt
 8006732:	460b      	movlt	r3, r1
 8006734:	4688      	mov	r8, r1
 8006736:	bfbc      	itt	lt
 8006738:	46a0      	movlt	r8, r4
 800673a:	461c      	movlt	r4, r3
 800673c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006740:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006744:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800674c:	eb07 0609 	add.w	r6, r7, r9
 8006750:	42b3      	cmp	r3, r6
 8006752:	bfb8      	it	lt
 8006754:	3101      	addlt	r1, #1
 8006756:	f7ff ff08 	bl	800656a <_Balloc>
 800675a:	f100 0514 	add.w	r5, r0, #20
 800675e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006762:	462b      	mov	r3, r5
 8006764:	2200      	movs	r2, #0
 8006766:	4573      	cmp	r3, lr
 8006768:	d316      	bcc.n	8006798 <__multiply+0x74>
 800676a:	f104 0214 	add.w	r2, r4, #20
 800676e:	f108 0114 	add.w	r1, r8, #20
 8006772:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006776:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	4293      	cmp	r3, r2
 8006782:	d80c      	bhi.n	800679e <__multiply+0x7a>
 8006784:	2e00      	cmp	r6, #0
 8006786:	dd03      	ble.n	8006790 <__multiply+0x6c>
 8006788:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05d      	beq.n	800684c <__multiply+0x128>
 8006790:	6106      	str	r6, [r0, #16]
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006798:	f843 2b04 	str.w	r2, [r3], #4
 800679c:	e7e3      	b.n	8006766 <__multiply+0x42>
 800679e:	f8b2 b000 	ldrh.w	fp, [r2]
 80067a2:	f1bb 0f00 	cmp.w	fp, #0
 80067a6:	d023      	beq.n	80067f0 <__multiply+0xcc>
 80067a8:	4689      	mov	r9, r1
 80067aa:	46ac      	mov	ip, r5
 80067ac:	f04f 0800 	mov.w	r8, #0
 80067b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80067b4:	f8dc a000 	ldr.w	sl, [ip]
 80067b8:	b2a3      	uxth	r3, r4
 80067ba:	fa1f fa8a 	uxth.w	sl, sl
 80067be:	fb0b a303 	mla	r3, fp, r3, sl
 80067c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067c6:	f8dc 4000 	ldr.w	r4, [ip]
 80067ca:	4443      	add	r3, r8
 80067cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067d0:	fb0b 840a 	mla	r4, fp, sl, r8
 80067d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067d8:	46e2      	mov	sl, ip
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067e0:	454f      	cmp	r7, r9
 80067e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067e6:	f84a 3b04 	str.w	r3, [sl], #4
 80067ea:	d82b      	bhi.n	8006844 <__multiply+0x120>
 80067ec:	f8cc 8004 	str.w	r8, [ip, #4]
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067f6:	3204      	adds	r2, #4
 80067f8:	f1ba 0f00 	cmp.w	sl, #0
 80067fc:	d020      	beq.n	8006840 <__multiply+0x11c>
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	4689      	mov	r9, r1
 8006802:	46a8      	mov	r8, r5
 8006804:	f04f 0b00 	mov.w	fp, #0
 8006808:	f8b9 c000 	ldrh.w	ip, [r9]
 800680c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006810:	fb0a 440c 	mla	r4, sl, ip, r4
 8006814:	445c      	add	r4, fp
 8006816:	46c4      	mov	ip, r8
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800681e:	f84c 3b04 	str.w	r3, [ip], #4
 8006822:	f859 3b04 	ldr.w	r3, [r9], #4
 8006826:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	fb0a b303 	mla	r3, sl, r3, fp
 8006830:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006834:	454f      	cmp	r7, r9
 8006836:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800683a:	d805      	bhi.n	8006848 <__multiply+0x124>
 800683c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006840:	3504      	adds	r5, #4
 8006842:	e79b      	b.n	800677c <__multiply+0x58>
 8006844:	46d4      	mov	ip, sl
 8006846:	e7b3      	b.n	80067b0 <__multiply+0x8c>
 8006848:	46e0      	mov	r8, ip
 800684a:	e7dd      	b.n	8006808 <__multiply+0xe4>
 800684c:	3e01      	subs	r6, #1
 800684e:	e799      	b.n	8006784 <__multiply+0x60>

08006850 <__pow5mult>:
 8006850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006854:	4615      	mov	r5, r2
 8006856:	f012 0203 	ands.w	r2, r2, #3
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	d007      	beq.n	8006870 <__pow5mult+0x20>
 8006860:	3a01      	subs	r2, #1
 8006862:	4c21      	ldr	r4, [pc, #132]	; (80068e8 <__pow5mult+0x98>)
 8006864:	2300      	movs	r3, #0
 8006866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800686a:	f7ff fec9 	bl	8006600 <__multadd>
 800686e:	4607      	mov	r7, r0
 8006870:	10ad      	asrs	r5, r5, #2
 8006872:	d035      	beq.n	80068e0 <__pow5mult+0x90>
 8006874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006876:	b93c      	cbnz	r4, 8006888 <__pow5mult+0x38>
 8006878:	2010      	movs	r0, #16
 800687a:	f7ff fe63 	bl	8006544 <malloc>
 800687e:	6270      	str	r0, [r6, #36]	; 0x24
 8006880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006884:	6004      	str	r4, [r0, #0]
 8006886:	60c4      	str	r4, [r0, #12]
 8006888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800688c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006890:	b94c      	cbnz	r4, 80068a6 <__pow5mult+0x56>
 8006892:	f240 2171 	movw	r1, #625	; 0x271
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff3b 	bl	8006712 <__i2b>
 800689c:	2300      	movs	r3, #0
 800689e:	f8c8 0008 	str.w	r0, [r8, #8]
 80068a2:	4604      	mov	r4, r0
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	07eb      	lsls	r3, r5, #31
 80068ac:	d50a      	bpl.n	80068c4 <__pow5mult+0x74>
 80068ae:	4639      	mov	r1, r7
 80068b0:	4622      	mov	r2, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff36 	bl	8006724 <__multiply>
 80068b8:	4639      	mov	r1, r7
 80068ba:	4681      	mov	r9, r0
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff fe88 	bl	80065d2 <_Bfree>
 80068c2:	464f      	mov	r7, r9
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	d00b      	beq.n	80068e0 <__pow5mult+0x90>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	b938      	cbnz	r0, 80068dc <__pow5mult+0x8c>
 80068cc:	4622      	mov	r2, r4
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ff27 	bl	8006724 <__multiply>
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f8c0 8000 	str.w	r8, [r0]
 80068dc:	4604      	mov	r4, r0
 80068de:	e7e4      	b.n	80068aa <__pow5mult+0x5a>
 80068e0:	4638      	mov	r0, r7
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	bf00      	nop
 80068e8:	08007380 	.word	0x08007380

080068ec <__lshift>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	6849      	ldr	r1, [r1, #4]
 80068fa:	eb0a 0903 	add.w	r9, sl, r3
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	4607      	mov	r7, r0
 8006902:	4616      	mov	r6, r2
 8006904:	f109 0501 	add.w	r5, r9, #1
 8006908:	42ab      	cmp	r3, r5
 800690a:	db32      	blt.n	8006972 <__lshift+0x86>
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff fe2c 	bl	800656a <_Balloc>
 8006912:	2300      	movs	r3, #0
 8006914:	4680      	mov	r8, r0
 8006916:	f100 0114 	add.w	r1, r0, #20
 800691a:	461a      	mov	r2, r3
 800691c:	4553      	cmp	r3, sl
 800691e:	db2b      	blt.n	8006978 <__lshift+0x8c>
 8006920:	6920      	ldr	r0, [r4, #16]
 8006922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006926:	f104 0314 	add.w	r3, r4, #20
 800692a:	f016 021f 	ands.w	r2, r6, #31
 800692e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006936:	d025      	beq.n	8006984 <__lshift+0x98>
 8006938:	f1c2 0e20 	rsb	lr, r2, #32
 800693c:	2000      	movs	r0, #0
 800693e:	681e      	ldr	r6, [r3, #0]
 8006940:	468a      	mov	sl, r1
 8006942:	4096      	lsls	r6, r2
 8006944:	4330      	orrs	r0, r6
 8006946:	f84a 0b04 	str.w	r0, [sl], #4
 800694a:	f853 0b04 	ldr.w	r0, [r3], #4
 800694e:	459c      	cmp	ip, r3
 8006950:	fa20 f00e 	lsr.w	r0, r0, lr
 8006954:	d814      	bhi.n	8006980 <__lshift+0x94>
 8006956:	6048      	str	r0, [r1, #4]
 8006958:	b108      	cbz	r0, 800695e <__lshift+0x72>
 800695a:	f109 0502 	add.w	r5, r9, #2
 800695e:	3d01      	subs	r5, #1
 8006960:	4638      	mov	r0, r7
 8006962:	f8c8 5010 	str.w	r5, [r8, #16]
 8006966:	4621      	mov	r1, r4
 8006968:	f7ff fe33 	bl	80065d2 <_Bfree>
 800696c:	4640      	mov	r0, r8
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	3101      	adds	r1, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	e7c7      	b.n	8006908 <__lshift+0x1c>
 8006978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800697c:	3301      	adds	r3, #1
 800697e:	e7cd      	b.n	800691c <__lshift+0x30>
 8006980:	4651      	mov	r1, sl
 8006982:	e7dc      	b.n	800693e <__lshift+0x52>
 8006984:	3904      	subs	r1, #4
 8006986:	f853 2b04 	ldr.w	r2, [r3], #4
 800698a:	f841 2f04 	str.w	r2, [r1, #4]!
 800698e:	459c      	cmp	ip, r3
 8006990:	d8f9      	bhi.n	8006986 <__lshift+0x9a>
 8006992:	e7e4      	b.n	800695e <__lshift+0x72>

08006994 <__mcmp>:
 8006994:	6903      	ldr	r3, [r0, #16]
 8006996:	690a      	ldr	r2, [r1, #16]
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	b530      	push	{r4, r5, lr}
 800699c:	d10c      	bne.n	80069b8 <__mcmp+0x24>
 800699e:	0092      	lsls	r2, r2, #2
 80069a0:	3014      	adds	r0, #20
 80069a2:	3114      	adds	r1, #20
 80069a4:	1884      	adds	r4, r0, r2
 80069a6:	4411      	add	r1, r2
 80069a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b0:	4295      	cmp	r5, r2
 80069b2:	d003      	beq.n	80069bc <__mcmp+0x28>
 80069b4:	d305      	bcc.n	80069c2 <__mcmp+0x2e>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	bd30      	pop	{r4, r5, pc}
 80069bc:	42a0      	cmp	r0, r4
 80069be:	d3f3      	bcc.n	80069a8 <__mcmp+0x14>
 80069c0:	e7fa      	b.n	80069b8 <__mcmp+0x24>
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	e7f7      	b.n	80069b8 <__mcmp+0x24>

080069c8 <__mdiff>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	460d      	mov	r5, r1
 80069ce:	4607      	mov	r7, r0
 80069d0:	4611      	mov	r1, r2
 80069d2:	4628      	mov	r0, r5
 80069d4:	4614      	mov	r4, r2
 80069d6:	f7ff ffdd 	bl	8006994 <__mcmp>
 80069da:	1e06      	subs	r6, r0, #0
 80069dc:	d108      	bne.n	80069f0 <__mdiff+0x28>
 80069de:	4631      	mov	r1, r6
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff fdc2 	bl	800656a <_Balloc>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	bfa4      	itt	ge
 80069f2:	4623      	movge	r3, r4
 80069f4:	462c      	movge	r4, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	bfa6      	itte	ge
 80069fc:	461d      	movge	r5, r3
 80069fe:	2600      	movge	r6, #0
 8006a00:	2601      	movlt	r6, #1
 8006a02:	f7ff fdb2 	bl	800656a <_Balloc>
 8006a06:	692b      	ldr	r3, [r5, #16]
 8006a08:	60c6      	str	r6, [r0, #12]
 8006a0a:	6926      	ldr	r6, [r4, #16]
 8006a0c:	f105 0914 	add.w	r9, r5, #20
 8006a10:	f104 0214 	add.w	r2, r4, #20
 8006a14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a1c:	f100 0514 	add.w	r5, r0, #20
 8006a20:	f04f 0e00 	mov.w	lr, #0
 8006a24:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a28:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a2c:	fa1e f18a 	uxtah	r1, lr, sl
 8006a30:	b2a3      	uxth	r3, r4
 8006a32:	1ac9      	subs	r1, r1, r3
 8006a34:	0c23      	lsrs	r3, r4, #16
 8006a36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006a3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a3e:	b289      	uxth	r1, r1
 8006a40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a44:	45c8      	cmp	r8, r9
 8006a46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a4a:	4694      	mov	ip, r2
 8006a4c:	f845 3b04 	str.w	r3, [r5], #4
 8006a50:	d8e8      	bhi.n	8006a24 <__mdiff+0x5c>
 8006a52:	45bc      	cmp	ip, r7
 8006a54:	d304      	bcc.n	8006a60 <__mdiff+0x98>
 8006a56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006a5a:	b183      	cbz	r3, 8006a7e <__mdiff+0xb6>
 8006a5c:	6106      	str	r6, [r0, #16]
 8006a5e:	e7c5      	b.n	80069ec <__mdiff+0x24>
 8006a60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a64:	fa1e f381 	uxtah	r3, lr, r1
 8006a68:	141a      	asrs	r2, r3, #16
 8006a6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006a78:	f845 3b04 	str.w	r3, [r5], #4
 8006a7c:	e7e9      	b.n	8006a52 <__mdiff+0x8a>
 8006a7e:	3e01      	subs	r6, #1
 8006a80:	e7e9      	b.n	8006a56 <__mdiff+0x8e>

08006a82 <__d2b>:
 8006a82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a86:	460e      	mov	r6, r1
 8006a88:	2101      	movs	r1, #1
 8006a8a:	ec59 8b10 	vmov	r8, r9, d0
 8006a8e:	4615      	mov	r5, r2
 8006a90:	f7ff fd6b 	bl	800656a <_Balloc>
 8006a94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a98:	4607      	mov	r7, r0
 8006a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a9e:	bb34      	cbnz	r4, 8006aee <__d2b+0x6c>
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa6:	d027      	beq.n	8006af8 <__d2b+0x76>
 8006aa8:	a802      	add	r0, sp, #8
 8006aaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006aae:	f7ff fe01 	bl	80066b4 <__lo0bits>
 8006ab2:	9900      	ldr	r1, [sp, #0]
 8006ab4:	b1f0      	cbz	r0, 8006af4 <__d2b+0x72>
 8006ab6:	9a01      	ldr	r2, [sp, #4]
 8006ab8:	f1c0 0320 	rsb	r3, r0, #32
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	40c2      	lsrs	r2, r0
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2102      	movne	r1, #2
 8006ad2:	2101      	moveq	r1, #1
 8006ad4:	6139      	str	r1, [r7, #16]
 8006ad6:	b1c4      	cbz	r4, 8006b0a <__d2b+0x88>
 8006ad8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006adc:	4404      	add	r4, r0
 8006ade:	6034      	str	r4, [r6, #0]
 8006ae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae4:	6028      	str	r0, [r5, #0]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	b003      	add	sp, #12
 8006aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af2:	e7d5      	b.n	8006aa0 <__d2b+0x1e>
 8006af4:	6179      	str	r1, [r7, #20]
 8006af6:	e7e7      	b.n	8006ac8 <__d2b+0x46>
 8006af8:	a801      	add	r0, sp, #4
 8006afa:	f7ff fddb 	bl	80066b4 <__lo0bits>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	2101      	movs	r1, #1
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	3020      	adds	r0, #32
 8006b08:	e7e5      	b.n	8006ad6 <__d2b+0x54>
 8006b0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b12:	6030      	str	r0, [r6, #0]
 8006b14:	6918      	ldr	r0, [r3, #16]
 8006b16:	f7ff fdae 	bl	8006676 <__hi0bits>
 8006b1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b1e:	e7e1      	b.n	8006ae4 <__d2b+0x62>

08006b20 <_calloc_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	fb02 f401 	mul.w	r4, r2, r1
 8006b26:	4621      	mov	r1, r4
 8006b28:	f000 f856 	bl	8006bd8 <_malloc_r>
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	b118      	cbz	r0, 8006b38 <_calloc_r+0x18>
 8006b30:	4622      	mov	r2, r4
 8006b32:	2100      	movs	r1, #0
 8006b34:	f7fe fa30 	bl	8004f98 <memset>
 8006b38:	4628      	mov	r0, r5
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}

08006b3c <_free_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4605      	mov	r5, r0
 8006b40:	2900      	cmp	r1, #0
 8006b42:	d045      	beq.n	8006bd0 <_free_r+0x94>
 8006b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b48:	1f0c      	subs	r4, r1, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfb8      	it	lt
 8006b4e:	18e4      	addlt	r4, r4, r3
 8006b50:	f000 fa29 	bl	8006fa6 <__malloc_lock>
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <_free_r+0x98>)
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	4610      	mov	r0, r2
 8006b5a:	b933      	cbnz	r3, 8006b6a <_free_r+0x2e>
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	6014      	str	r4, [r2, #0]
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b66:	f000 ba1f 	b.w	8006fa8 <__malloc_unlock>
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	d90c      	bls.n	8006b88 <_free_r+0x4c>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	1862      	adds	r2, r4, r1
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bf04      	itt	eq
 8006b76:	681a      	ldreq	r2, [r3, #0]
 8006b78:	685b      	ldreq	r3, [r3, #4]
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	bf04      	itt	eq
 8006b7e:	1852      	addeq	r2, r2, r1
 8006b80:	6022      	streq	r2, [r4, #0]
 8006b82:	6004      	str	r4, [r0, #0]
 8006b84:	e7ec      	b.n	8006b60 <_free_r+0x24>
 8006b86:	4613      	mov	r3, r2
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	b10a      	cbz	r2, 8006b90 <_free_r+0x54>
 8006b8c:	42a2      	cmp	r2, r4
 8006b8e:	d9fa      	bls.n	8006b86 <_free_r+0x4a>
 8006b90:	6819      	ldr	r1, [r3, #0]
 8006b92:	1858      	adds	r0, r3, r1
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d10b      	bne.n	8006bb0 <_free_r+0x74>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	1858      	adds	r0, r3, r1
 8006b9e:	4282      	cmp	r2, r0
 8006ba0:	6019      	str	r1, [r3, #0]
 8006ba2:	d1dd      	bne.n	8006b60 <_free_r+0x24>
 8006ba4:	6810      	ldr	r0, [r2, #0]
 8006ba6:	6852      	ldr	r2, [r2, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	4401      	add	r1, r0
 8006bac:	6019      	str	r1, [r3, #0]
 8006bae:	e7d7      	b.n	8006b60 <_free_r+0x24>
 8006bb0:	d902      	bls.n	8006bb8 <_free_r+0x7c>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	e7d3      	b.n	8006b60 <_free_r+0x24>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	1821      	adds	r1, r4, r0
 8006bbc:	428a      	cmp	r2, r1
 8006bbe:	bf04      	itt	eq
 8006bc0:	6811      	ldreq	r1, [r2, #0]
 8006bc2:	6852      	ldreq	r2, [r2, #4]
 8006bc4:	6062      	str	r2, [r4, #4]
 8006bc6:	bf04      	itt	eq
 8006bc8:	1809      	addeq	r1, r1, r0
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	605c      	str	r4, [r3, #4]
 8006bce:	e7c7      	b.n	8006b60 <_free_r+0x24>
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000a9c 	.word	0x20000a9c

08006bd8 <_malloc_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	1ccd      	adds	r5, r1, #3
 8006bdc:	f025 0503 	bic.w	r5, r5, #3
 8006be0:	3508      	adds	r5, #8
 8006be2:	2d0c      	cmp	r5, #12
 8006be4:	bf38      	it	cc
 8006be6:	250c      	movcc	r5, #12
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	db01      	blt.n	8006bf2 <_malloc_r+0x1a>
 8006bee:	42a9      	cmp	r1, r5
 8006bf0:	d903      	bls.n	8006bfa <_malloc_r+0x22>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	f000 f9d4 	bl	8006fa6 <__malloc_lock>
 8006bfe:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <_malloc_r+0xac>)
 8006c00:	6814      	ldr	r4, [r2, #0]
 8006c02:	4621      	mov	r1, r4
 8006c04:	b991      	cbnz	r1, 8006c2c <_malloc_r+0x54>
 8006c06:	4c20      	ldr	r4, [pc, #128]	; (8006c88 <_malloc_r+0xb0>)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b91b      	cbnz	r3, 8006c14 <_malloc_r+0x3c>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f000 f98f 	bl	8006f30 <_sbrk_r>
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f98a 	bl	8006f30 <_sbrk_r>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d124      	bne.n	8006c6a <_malloc_r+0x92>
 8006c20:	230c      	movs	r3, #12
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	4630      	mov	r0, r6
 8006c26:	f000 f9bf 	bl	8006fa8 <__malloc_unlock>
 8006c2a:	e7e4      	b.n	8006bf6 <_malloc_r+0x1e>
 8006c2c:	680b      	ldr	r3, [r1, #0]
 8006c2e:	1b5b      	subs	r3, r3, r5
 8006c30:	d418      	bmi.n	8006c64 <_malloc_r+0x8c>
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d90f      	bls.n	8006c56 <_malloc_r+0x7e>
 8006c36:	600b      	str	r3, [r1, #0]
 8006c38:	50cd      	str	r5, [r1, r3]
 8006c3a:	18cc      	adds	r4, r1, r3
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f9b3 	bl	8006fa8 <__malloc_unlock>
 8006c42:	f104 000b 	add.w	r0, r4, #11
 8006c46:	1d23      	adds	r3, r4, #4
 8006c48:	f020 0007 	bic.w	r0, r0, #7
 8006c4c:	1ac3      	subs	r3, r0, r3
 8006c4e:	d0d3      	beq.n	8006bf8 <_malloc_r+0x20>
 8006c50:	425a      	negs	r2, r3
 8006c52:	50e2      	str	r2, [r4, r3]
 8006c54:	e7d0      	b.n	8006bf8 <_malloc_r+0x20>
 8006c56:	428c      	cmp	r4, r1
 8006c58:	684b      	ldr	r3, [r1, #4]
 8006c5a:	bf16      	itet	ne
 8006c5c:	6063      	strne	r3, [r4, #4]
 8006c5e:	6013      	streq	r3, [r2, #0]
 8006c60:	460c      	movne	r4, r1
 8006c62:	e7eb      	b.n	8006c3c <_malloc_r+0x64>
 8006c64:	460c      	mov	r4, r1
 8006c66:	6849      	ldr	r1, [r1, #4]
 8006c68:	e7cc      	b.n	8006c04 <_malloc_r+0x2c>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d005      	beq.n	8006c80 <_malloc_r+0xa8>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4630      	mov	r0, r6
 8006c78:	f000 f95a 	bl	8006f30 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0cf      	beq.n	8006c20 <_malloc_r+0x48>
 8006c80:	6025      	str	r5, [r4, #0]
 8006c82:	e7db      	b.n	8006c3c <_malloc_r+0x64>
 8006c84:	20000a9c 	.word	0x20000a9c
 8006c88:	20000aa0 	.word	0x20000aa0

08006c8c <__ssputs_r>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	688e      	ldr	r6, [r1, #8]
 8006c92:	429e      	cmp	r6, r3
 8006c94:	4682      	mov	sl, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	4690      	mov	r8, r2
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	d837      	bhi.n	8006d0e <__ssputs_r+0x82>
 8006c9e:	898a      	ldrh	r2, [r1, #12]
 8006ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ca4:	d031      	beq.n	8006d0a <__ssputs_r+0x7e>
 8006ca6:	6825      	ldr	r5, [r4, #0]
 8006ca8:	6909      	ldr	r1, [r1, #16]
 8006caa:	1a6f      	subs	r7, r5, r1
 8006cac:	6965      	ldr	r5, [r4, #20]
 8006cae:	2302      	movs	r3, #2
 8006cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006cb8:	f109 0301 	add.w	r3, r9, #1
 8006cbc:	443b      	add	r3, r7
 8006cbe:	429d      	cmp	r5, r3
 8006cc0:	bf38      	it	cc
 8006cc2:	461d      	movcc	r5, r3
 8006cc4:	0553      	lsls	r3, r2, #21
 8006cc6:	d530      	bpl.n	8006d2a <__ssputs_r+0x9e>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7ff ff85 	bl	8006bd8 <_malloc_r>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	b950      	cbnz	r0, 8006ce8 <__ssputs_r+0x5c>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	f8ca 3000 	str.w	r3, [sl]
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	463a      	mov	r2, r7
 8006cea:	6921      	ldr	r1, [r4, #16]
 8006cec:	f7ff fc32 	bl	8006554 <memcpy>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	6126      	str	r6, [r4, #16]
 8006cfe:	6165      	str	r5, [r4, #20]
 8006d00:	443e      	add	r6, r7
 8006d02:	1bed      	subs	r5, r5, r7
 8006d04:	6026      	str	r6, [r4, #0]
 8006d06:	60a5      	str	r5, [r4, #8]
 8006d08:	464e      	mov	r6, r9
 8006d0a:	454e      	cmp	r6, r9
 8006d0c:	d900      	bls.n	8006d10 <__ssputs_r+0x84>
 8006d0e:	464e      	mov	r6, r9
 8006d10:	4632      	mov	r2, r6
 8006d12:	4641      	mov	r1, r8
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	f000 f92d 	bl	8006f74 <memmove>
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	441e      	add	r6, r3
 8006d24:	6026      	str	r6, [r4, #0]
 8006d26:	2000      	movs	r0, #0
 8006d28:	e7dc      	b.n	8006ce4 <__ssputs_r+0x58>
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	f000 f93d 	bl	8006faa <_realloc_r>
 8006d30:	4606      	mov	r6, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1e2      	bne.n	8006cfc <__ssputs_r+0x70>
 8006d36:	6921      	ldr	r1, [r4, #16]
 8006d38:	4650      	mov	r0, sl
 8006d3a:	f7ff feff 	bl	8006b3c <_free_r>
 8006d3e:	e7c8      	b.n	8006cd2 <__ssputs_r+0x46>

08006d40 <_svfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	461d      	mov	r5, r3
 8006d46:	898b      	ldrh	r3, [r1, #12]
 8006d48:	061f      	lsls	r7, r3, #24
 8006d4a:	b09d      	sub	sp, #116	; 0x74
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4616      	mov	r6, r2
 8006d52:	d50f      	bpl.n	8006d74 <_svfiprintf_r+0x34>
 8006d54:	690b      	ldr	r3, [r1, #16]
 8006d56:	b96b      	cbnz	r3, 8006d74 <_svfiprintf_r+0x34>
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	f7ff ff3d 	bl	8006bd8 <_malloc_r>
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	6120      	str	r0, [r4, #16]
 8006d62:	b928      	cbnz	r0, 8006d70 <_svfiprintf_r+0x30>
 8006d64:	230c      	movs	r3, #12
 8006d66:	f8c8 3000 	str.w	r3, [r8]
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	e0c8      	b.n	8006f02 <_svfiprintf_r+0x1c2>
 8006d70:	2340      	movs	r3, #64	; 0x40
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	2300      	movs	r3, #0
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7e:	2330      	movs	r3, #48	; 0x30
 8006d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d84:	9503      	str	r5, [sp, #12]
 8006d86:	f04f 0b01 	mov.w	fp, #1
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	463d      	mov	r5, r7
 8006d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d92:	b10b      	cbz	r3, 8006d98 <_svfiprintf_r+0x58>
 8006d94:	2b25      	cmp	r3, #37	; 0x25
 8006d96:	d13e      	bne.n	8006e16 <_svfiprintf_r+0xd6>
 8006d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d9c:	d00b      	beq.n	8006db6 <_svfiprintf_r+0x76>
 8006d9e:	4653      	mov	r3, sl
 8006da0:	4632      	mov	r2, r6
 8006da2:	4621      	mov	r1, r4
 8006da4:	4640      	mov	r0, r8
 8006da6:	f7ff ff71 	bl	8006c8c <__ssputs_r>
 8006daa:	3001      	adds	r0, #1
 8006dac:	f000 80a4 	beq.w	8006ef8 <_svfiprintf_r+0x1b8>
 8006db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db2:	4453      	add	r3, sl
 8006db4:	9309      	str	r3, [sp, #36]	; 0x24
 8006db6:	783b      	ldrb	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 809d 	beq.w	8006ef8 <_svfiprintf_r+0x1b8>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd2:	462f      	mov	r7, r5
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006dda:	4850      	ldr	r0, [pc, #320]	; (8006f1c <_svfiprintf_r+0x1dc>)
 8006ddc:	f7f9 fa08 	bl	80001f0 <memchr>
 8006de0:	9b04      	ldr	r3, [sp, #16]
 8006de2:	b9d0      	cbnz	r0, 8006e1a <_svfiprintf_r+0xda>
 8006de4:	06d9      	lsls	r1, r3, #27
 8006de6:	bf44      	itt	mi
 8006de8:	2220      	movmi	r2, #32
 8006dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dee:	071a      	lsls	r2, r3, #28
 8006df0:	bf44      	itt	mi
 8006df2:	222b      	movmi	r2, #43	; 0x2b
 8006df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006df8:	782a      	ldrb	r2, [r5, #0]
 8006dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8006dfc:	d015      	beq.n	8006e2a <_svfiprintf_r+0xea>
 8006dfe:	9a07      	ldr	r2, [sp, #28]
 8006e00:	462f      	mov	r7, r5
 8006e02:	2000      	movs	r0, #0
 8006e04:	250a      	movs	r5, #10
 8006e06:	4639      	mov	r1, r7
 8006e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e0c:	3b30      	subs	r3, #48	; 0x30
 8006e0e:	2b09      	cmp	r3, #9
 8006e10:	d94d      	bls.n	8006eae <_svfiprintf_r+0x16e>
 8006e12:	b1b8      	cbz	r0, 8006e44 <_svfiprintf_r+0x104>
 8006e14:	e00f      	b.n	8006e36 <_svfiprintf_r+0xf6>
 8006e16:	462f      	mov	r7, r5
 8006e18:	e7b8      	b.n	8006d8c <_svfiprintf_r+0x4c>
 8006e1a:	4a40      	ldr	r2, [pc, #256]	; (8006f1c <_svfiprintf_r+0x1dc>)
 8006e1c:	1a80      	subs	r0, r0, r2
 8006e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8006e22:	4318      	orrs	r0, r3
 8006e24:	9004      	str	r0, [sp, #16]
 8006e26:	463d      	mov	r5, r7
 8006e28:	e7d3      	b.n	8006dd2 <_svfiprintf_r+0x92>
 8006e2a:	9a03      	ldr	r2, [sp, #12]
 8006e2c:	1d11      	adds	r1, r2, #4
 8006e2e:	6812      	ldr	r2, [r2, #0]
 8006e30:	9103      	str	r1, [sp, #12]
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	db01      	blt.n	8006e3a <_svfiprintf_r+0xfa>
 8006e36:	9207      	str	r2, [sp, #28]
 8006e38:	e004      	b.n	8006e44 <_svfiprintf_r+0x104>
 8006e3a:	4252      	negs	r2, r2
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	9207      	str	r2, [sp, #28]
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	783b      	ldrb	r3, [r7, #0]
 8006e46:	2b2e      	cmp	r3, #46	; 0x2e
 8006e48:	d10c      	bne.n	8006e64 <_svfiprintf_r+0x124>
 8006e4a:	787b      	ldrb	r3, [r7, #1]
 8006e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4e:	d133      	bne.n	8006eb8 <_svfiprintf_r+0x178>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	9203      	str	r2, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bfb8      	it	lt
 8006e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e60:	3702      	adds	r7, #2
 8006e62:	9305      	str	r3, [sp, #20]
 8006e64:	4d2e      	ldr	r5, [pc, #184]	; (8006f20 <_svfiprintf_r+0x1e0>)
 8006e66:	7839      	ldrb	r1, [r7, #0]
 8006e68:	2203      	movs	r2, #3
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7f9 f9c0 	bl	80001f0 <memchr>
 8006e70:	b138      	cbz	r0, 8006e82 <_svfiprintf_r+0x142>
 8006e72:	2340      	movs	r3, #64	; 0x40
 8006e74:	1b40      	subs	r0, r0, r5
 8006e76:	fa03 f000 	lsl.w	r0, r3, r0
 8006e7a:	9b04      	ldr	r3, [sp, #16]
 8006e7c:	4303      	orrs	r3, r0
 8006e7e:	3701      	adds	r7, #1
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	7839      	ldrb	r1, [r7, #0]
 8006e84:	4827      	ldr	r0, [pc, #156]	; (8006f24 <_svfiprintf_r+0x1e4>)
 8006e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e8a:	2206      	movs	r2, #6
 8006e8c:	1c7e      	adds	r6, r7, #1
 8006e8e:	f7f9 f9af 	bl	80001f0 <memchr>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d038      	beq.n	8006f08 <_svfiprintf_r+0x1c8>
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <_svfiprintf_r+0x1e8>)
 8006e98:	bb13      	cbnz	r3, 8006ee0 <_svfiprintf_r+0x1a0>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	3307      	adds	r3, #7
 8006e9e:	f023 0307 	bic.w	r3, r3, #7
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea8:	444b      	add	r3, r9
 8006eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8006eac:	e76d      	b.n	8006d8a <_svfiprintf_r+0x4a>
 8006eae:	fb05 3202 	mla	r2, r5, r2, r3
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	e7a6      	b.n	8006e06 <_svfiprintf_r+0xc6>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	3701      	adds	r7, #1
 8006ebc:	9305      	str	r3, [sp, #20]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	250a      	movs	r5, #10
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec8:	3a30      	subs	r2, #48	; 0x30
 8006eca:	2a09      	cmp	r2, #9
 8006ecc:	d903      	bls.n	8006ed6 <_svfiprintf_r+0x196>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0c8      	beq.n	8006e64 <_svfiprintf_r+0x124>
 8006ed2:	9105      	str	r1, [sp, #20]
 8006ed4:	e7c6      	b.n	8006e64 <_svfiprintf_r+0x124>
 8006ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8006eda:	2301      	movs	r3, #1
 8006edc:	4607      	mov	r7, r0
 8006ede:	e7f0      	b.n	8006ec2 <_svfiprintf_r+0x182>
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <_svfiprintf_r+0x1ec>)
 8006ee8:	a904      	add	r1, sp, #16
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7fe f8f0 	bl	80050d0 <_printf_float>
 8006ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ef4:	4681      	mov	r9, r0
 8006ef6:	d1d6      	bne.n	8006ea6 <_svfiprintf_r+0x166>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	065b      	lsls	r3, r3, #25
 8006efc:	f53f af35 	bmi.w	8006d6a <_svfiprintf_r+0x2a>
 8006f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f02:	b01d      	add	sp, #116	; 0x74
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	ab03      	add	r3, sp, #12
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <_svfiprintf_r+0x1ec>)
 8006f10:	a904      	add	r1, sp, #16
 8006f12:	4640      	mov	r0, r8
 8006f14:	f7fe fb92 	bl	800563c <_printf_i>
 8006f18:	e7ea      	b.n	8006ef0 <_svfiprintf_r+0x1b0>
 8006f1a:	bf00      	nop
 8006f1c:	0800738c 	.word	0x0800738c
 8006f20:	08007392 	.word	0x08007392
 8006f24:	08007396 	.word	0x08007396
 8006f28:	080050d1 	.word	0x080050d1
 8006f2c:	08006c8d 	.word	0x08006c8d

08006f30 <_sbrk_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4c06      	ldr	r4, [pc, #24]	; (8006f4c <_sbrk_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4605      	mov	r5, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	f7fb fa22 	bl	8002384 <_sbrk>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_sbrk_r+0x1a>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_sbrk_r+0x1a>
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000aa8 	.word	0x20000aa8

08006f50 <__ascii_mbtowc>:
 8006f50:	b082      	sub	sp, #8
 8006f52:	b901      	cbnz	r1, 8006f56 <__ascii_mbtowc+0x6>
 8006f54:	a901      	add	r1, sp, #4
 8006f56:	b142      	cbz	r2, 8006f6a <__ascii_mbtowc+0x1a>
 8006f58:	b14b      	cbz	r3, 8006f6e <__ascii_mbtowc+0x1e>
 8006f5a:	7813      	ldrb	r3, [r2, #0]
 8006f5c:	600b      	str	r3, [r1, #0]
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	1c10      	adds	r0, r2, #0
 8006f62:	bf18      	it	ne
 8006f64:	2001      	movne	r0, #1
 8006f66:	b002      	add	sp, #8
 8006f68:	4770      	bx	lr
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	e7fb      	b.n	8006f66 <__ascii_mbtowc+0x16>
 8006f6e:	f06f 0001 	mvn.w	r0, #1
 8006f72:	e7f8      	b.n	8006f66 <__ascii_mbtowc+0x16>

08006f74 <memmove>:
 8006f74:	4288      	cmp	r0, r1
 8006f76:	b510      	push	{r4, lr}
 8006f78:	eb01 0302 	add.w	r3, r1, r2
 8006f7c:	d807      	bhi.n	8006f8e <memmove+0x1a>
 8006f7e:	1e42      	subs	r2, r0, #1
 8006f80:	4299      	cmp	r1, r3
 8006f82:	d00a      	beq.n	8006f9a <memmove+0x26>
 8006f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f8c:	e7f8      	b.n	8006f80 <memmove+0xc>
 8006f8e:	4283      	cmp	r3, r0
 8006f90:	d9f5      	bls.n	8006f7e <memmove+0xa>
 8006f92:	1881      	adds	r1, r0, r2
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	42d3      	cmn	r3, r2
 8006f98:	d100      	bne.n	8006f9c <memmove+0x28>
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fa0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006fa4:	e7f7      	b.n	8006f96 <memmove+0x22>

08006fa6 <__malloc_lock>:
 8006fa6:	4770      	bx	lr

08006fa8 <__malloc_unlock>:
 8006fa8:	4770      	bx	lr

08006faa <_realloc_r>:
 8006faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fac:	4607      	mov	r7, r0
 8006fae:	4614      	mov	r4, r2
 8006fb0:	460e      	mov	r6, r1
 8006fb2:	b921      	cbnz	r1, 8006fbe <_realloc_r+0x14>
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fba:	f7ff be0d 	b.w	8006bd8 <_malloc_r>
 8006fbe:	b922      	cbnz	r2, 8006fca <_realloc_r+0x20>
 8006fc0:	f7ff fdbc 	bl	8006b3c <_free_r>
 8006fc4:	4625      	mov	r5, r4
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fca:	f000 f821 	bl	8007010 <_malloc_usable_size_r>
 8006fce:	42a0      	cmp	r0, r4
 8006fd0:	d20f      	bcs.n	8006ff2 <_realloc_r+0x48>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7ff fdff 	bl	8006bd8 <_malloc_r>
 8006fda:	4605      	mov	r5, r0
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d0f2      	beq.n	8006fc6 <_realloc_r+0x1c>
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	f7ff fab6 	bl	8006554 <memcpy>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4638      	mov	r0, r7
 8006fec:	f7ff fda6 	bl	8006b3c <_free_r>
 8006ff0:	e7e9      	b.n	8006fc6 <_realloc_r+0x1c>
 8006ff2:	4635      	mov	r5, r6
 8006ff4:	e7e7      	b.n	8006fc6 <_realloc_r+0x1c>

08006ff6 <__ascii_wctomb>:
 8006ff6:	b149      	cbz	r1, 800700c <__ascii_wctomb+0x16>
 8006ff8:	2aff      	cmp	r2, #255	; 0xff
 8006ffa:	bf85      	ittet	hi
 8006ffc:	238a      	movhi	r3, #138	; 0x8a
 8006ffe:	6003      	strhi	r3, [r0, #0]
 8007000:	700a      	strbls	r2, [r1, #0]
 8007002:	f04f 30ff 	movhi.w	r0, #4294967295
 8007006:	bf98      	it	ls
 8007008:	2001      	movls	r0, #1
 800700a:	4770      	bx	lr
 800700c:	4608      	mov	r0, r1
 800700e:	4770      	bx	lr

08007010 <_malloc_usable_size_r>:
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f18      	subs	r0, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfbc      	itt	lt
 800701a:	580b      	ldrlt	r3, [r1, r0]
 800701c:	18c0      	addlt	r0, r0, r3
 800701e:	4770      	bx	lr

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
